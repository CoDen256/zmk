/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define Layer_Main 0
#define Layer_NAV 1
#define Layer_FUN 2
#define Layer_NUM 3
#define Layer_Magic 4

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

	behaviors {
		bt_0: bt_0 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_0";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_0>, <&bt BT_DISC 0>;
		};

		bt_1: bt_1 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_1";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_1>, <&bt BT_DISC 1>;
		};

		bt_2: bt_2 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_2";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_2>, <&bt BT_DISC 2>;
		};

		bt_3: bt_3 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_3";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_3>, <&bt BT_DISC 3>;
		};
	};

	macros {
		bt_select_0: bt_select_0 {
			label = "BT_SELECT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_select_1: bt_select_1 {
			label = "BT_SELECT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_select_2: bt_select_2 {
			label = "BT_SELECT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_select_3: bt_select_3 {
			label = "BT_SELECT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #else

	macros {
		bt_0: bt_0 {
			label = "BT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_1: bt_1 {
			label = "BT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_2: bt_2 {
			label = "BT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_3: bt_3 {
			label = "BT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #endif
};

&sk {
	release-after-ms = <900>;// release after 0.6s
	quick-release;// no double capitalization when rolling keys
};

&sl {
	ignore-modifiers;// allow chording sticky mods & layers

release-after-ms = <5000>;};

&lt {
	flavor = "balanced";
	tapping-term-ms = <200>;
	quick-tap-ms = <175>;
};


/ {
	behaviors {
		magic: magic {
			compatible = "zmk,behavior-hold-tap";
			label = "MAGIC_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			bindings = <&mo>, <&rgb_ug_status_macro>;
		};

		lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings = <&macro_param_1to1>,<&macro_press>,<&mo MACRO_PLACEHOLDER &macro_param_2to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_2to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER &macro_param_1to1>,<&macro_release>,<&mo MACRO_PLACEHOLDER>;
        };

		hml: hml {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <270>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hmr: hmr {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hlctrl:hlctrl {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;

			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <220>;
			hold-trigger-key-positions = <0>;
		};


		masked_home: masked_home {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp HOME>, <&hlctrl LC(HOME) HOME>;
			mods = <(MOD_LCTL)>;
		};

		masked_end: masked_end {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp END>, <&hlctrl LC(END) END>;
			mods = <(MOD_LCTL)>;
		};

		swapper: swapper {
			compatible = "zmk,behavior-tri-state";
			#binding-cells = <0>;
			bindings = <&kp TAB>;
			ignored-key-positions = <25>;
		};

		copy_cut: copy_cut {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LC(INS)>, <&kp LC(X)>;
		};


/*<macros-start>*/

        win_sleep: win_sleep { label = "WIN_SLEEP"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp LG(X) &kp U &kp S>;
        };

        alower: alower { label = "ALOWER"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_3 &kp KP_N2>,<&macro_release>,<&kp LALT>;
        };

        Aupper: Aupper { label = "AUPPER"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_4 &kp KP_NUMBER_2>,<&macro_release>,<&kp LALT>;
        };

        olower: olower { label = "OLOWER"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_4 &kp KP_NUMBER_8>,<&macro_release>,<&kp LALT>;
        };

        Oupper: Oupper { label = "OUPPER"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_5 &kp KP_NUMBER_3>,<&macro_release>,<&kp LALT>;
        };

        ulower: ulower { label = "ULOWER"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_2 &kp KP_NUMBER_9>,<&macro_release>,<&kp LALT>;
        };

        Uupper: Uupper { label = "UUPPER"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_5 &kp KP_NUMBER_4>,<&macro_release>,<&kp LALT>;
        };

        eszet: eszet { label = "ESZET"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_N2 &kp KP_NUMBER_3>,<&macro_release>,<&kp LALT>;
        };

        mleft: mleft { label = "MLEFT"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp F13>;
        };

        mright: mright { label = "MRIGHT"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp F14>;
        };

        mup: mup { label = "MUP"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp F15>;
        };

        mdown: mdown { label = "MDOWN"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp F16>;
        };

        mlclick: mlclick { label = "MLCLICK"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp F17>;
        };

        mrclick: mrclick { label = "MRCLICK"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp F18>;
        };

        mscrollup: mscrollup { label = "MSCROLLUP"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp F19>;
        };

        mscrolldown: mscrolldown { label = "MSCROLLDOWN"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp F20>;
        };

        reloadkeymap: reloadkeymap { label = "RELOADKEYMAP"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp LA(K) &kp TAB &kp TAB &kp SPACE &kp SPACE>;
        };

        cut_line: cut_line { label = "CUT_LINE"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&select_line &kp K_CUT &kp DELETE>;
        };

        move_down: move_down { label = "MOVE_DOWN"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&cut_line &kp DOWN &kp K_PASTE>;
        };

        move_up: move_up { label = "MOVE_UP"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&cut_line &kp UP_ARROW &kp K_PASTE>;
        };

        select_word: select_word { label = "SELECT_WORD"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&select_word_right &select_word_left>;
        };

        select_line: select_line { label = "SELECT_LINE"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp HOME &kp LS(END)>;
        };

        delete_word: delete_word { label = "DELETE_WORD"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&select_word &kp BACKSPACE>;
        };

        delete_line: delete_line { label = "DELETE_LINE"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&select_line &kp BACKSPACE &kp BACKSPACE>;
        };

        copy_line: copy_line { label = "COPY_LINE"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp LC(RIGHT)>;
        };

        select_word_right: select_word_right { label = "SELECT_WORD_RIGHT"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
        };

        select_word_left: select_word_left { label = "SELECT_WORD_LEFT"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
        };

        duplicate_line: duplicate_line { label = "DUPLICATE_LINE"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp RIGHT &kp ENTER &kp LC(V)>;
        };

        move_selection_right: move_selection_right { label = "MOVE_SELECTION_RIGHT"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp LC(X) &kp RIGHT &kp LA(LC(V))>;
        };

        move_selection_left: move_selection_left { label = "MOVE_SELECTION_LEFT"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&kp LC(X) &kp LEFT &kp LA(LC(V))>;
        };

        ampersand_ampersand: ampersand_ampersand { label = "AMPERSAND_AMPERSAND"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp AMPERSAND &kp AMPERSAND>;
        };

        pipe_pipe: pipe_pipe { label = "PIPE_PIPE"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp PIPE &kp PIPE>;
        };

        backslash_backslash: backslash_backslash { label = "BACKSLASH_BACKSLASH"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp BACKSLASH &kp BACKSLASH>;
        };

        slash_slash: slash_slash { label = "SLASH_SLASH"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp SLASH &kp SLASH>;
        };

        equal_equal: equal_equal { label = "EQUAL_EQUAL"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp EQUAL &kp EQUAL>;
        };

        colon_space: colon_space { label = "COLON_SPACE"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp COLON &kp SPACE>;
        };

        exclamation_equal: exclamation_equal { label = "EXCLAMATION_EQUAL"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp EXCLAMATION &kp EQUAL>;
        };

        less_than_greater_than_left_arrow: less_than_greater_than_left_arrow { label = "LESS_THAN_GREATER_THAN_LEFT_ARROW"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp LESS_THAN &kp GREATER_THAN &kp LEFT_ARROW>;
        };

        left_parenthesis_right_parenthesis_left_arrow: left_parenthesis_right_parenthesis_left_arrow { label = "LEFT_PARENTHESIS_RIGHT_PARENTHESIS_LEFT_ARROW"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
        };

        grave_grave_grave: grave_grave_grave { label = "GRAVE_GRAVE_GRAVE"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp GRAVE &kp GRAVE &kp GRAVE>;
        };

        comma_space: comma_space { label = "COMMA_SPACE"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp COMMA &kp SPACE>;
        };

        semicolon_enter: semicolon_enter { label = "SEMICOLON_ENTER"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp SEMICOLON &kp ENTER>;
        };

        minus_greater_than: minus_greater_than { label = "MINUS_GREATER_THAN"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp MINUS &kp GREATER_THAN>;
        };

        left_brace_right_brace_left_arrow: left_brace_right_brace_left_arrow { label = "LEFT_BRACE_RIGHT_BRACE_LEFT_ARROW"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_ARROW>;
        };

        left_bracket_right_bracket_left_arrow: left_bracket_right_bracket_left_arrow { label = "LEFT_BRACKET_RIGHT_BRACKET_LEFT_ARROW"; compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>; #tap-ms = <0>; #wait-ms = <0>;
            bindings = <&macro_tap>,<&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
        };
/*<macros-end>*/


        hml_lt:hml_lt {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&mo>, <&kp>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LT";};

         hmr_lt:hmr_lt {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&mo>, <&kp>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LT";};

         hml_lswit:hml_lswit {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&lswitcher>, <&kp>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LSWIT";};

         hmr_lswit:hmr_lswit {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LSWIT";
         bindings = <&lswitcher>, <&kp>;};

         hml_lnav: hml_lnav {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LNAV";
         bindings = <&lnav>, <&kp>;};

         hmr_lnav: hmr_lnav {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LNAV";
         bindings = <&lnav>, <&kp>;};

         hml_lfun: hml_lfun {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LFUN";
         bindings = <&lfun>, <&kp>;};

         Aumlaut:Aumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&alower>, <&Aupper>;
         label = "AUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};

         Oumlaut:Oumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&olower>, <&Oupper>;
         label = "OUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};

         Uumlaut:Uumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&ulower>, <&Uupper>;
         label = "UUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};
/*<mods-start>*/

        K_key:K_key{ label = "K_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp K>, <&K_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        K_sink_rshift:K_sink_rshift{ label = "K_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F1)>, <&kp K>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        G_key:G_key { label = "G_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <26 38>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&lnav>, <&G_link_rshift>;
        };

        G_link_lshift:G_link_lshift{ label = "G_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp G>, <&G_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        G_link_rshift:G_link_rshift{ label = "G_LINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&G_link_lshift>, <&G_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        G_sink_lshift:G_sink_lshift{ label = "G_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(X)>, <&kp G>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        G_sink_rshift:G_sink_rshift{ label = "G_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F2)>, <&kp G>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        H_key:H_key { label = "H_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <26 24 38>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&lswitcher>, <&H_link_rshift>;
        };

        H_link_rshift:H_link_rshift{ label = "H_LINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp H>, <&H_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        H_sink_rshift:H_sink_rshift{ label = "H_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F3)>, <&kp H>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        C_link_lshift:C_link_lshift{ label = "C_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C>, <&C_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        C_link_rctrl:C_link_rctrl{ label = "C_LINK_RCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&C_link_lshift>, <&C_sink_rctrl>;
            mods = <(MOD_RCTL)>;
            
        };

        C_key:C_key{ label = "C_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&C_link_rctrl>, <&C_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        C_sink_lshift:C_sink_lshift{ label = "C_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp C>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        C_sink_rctrl:C_sink_rctrl{ label = "C_SINK_RCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RC(F4)>, <&kp C>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
        };

        C_sink_rshift:C_sink_rshift{ label = "C_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F4)>, <&kp C>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        W_link_lshift:W_link_lshift{ label = "W_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp W>, <&W_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        W_key:W_key{ label = "W_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&W_link_lshift>, <&W_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        W_sink_lshift:W_sink_lshift{ label = "W_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(A)>, <&kp W>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        W_sink_rshift:W_sink_rshift{ label = "W_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F5)>, <&kp W>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        O_link_rshift:O_link_rshift{ label = "O_LINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp O>, <&O_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        O_key:O_key{ label = "O_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&O_link_rshift>, <&O_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        O_sink_rshift:O_sink_rshift{ label = "O_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F6)>, <&kp O>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        O_sink_lshift:O_sink_lshift{ label = "O_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F6)>, <&kp O>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        A_key:A_key { label = "A_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <29 30 31 41 42 43 44 59 60 61 62 77 76 75>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&kp>, <&A_link_rshift>;
        };

        A_link_lshift:A_link_lshift{ label = "A_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp A>, <&A_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        A_link_rctrl:A_link_rctrl{ label = "A_LINK_RCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&A_link_lshift>, <&A_sink_rctrl>;
            mods = <(MOD_RCTL)>;
            
        };

        A_link_lctrl:A_link_lctrl{ label = "A_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&A_link_rctrl>, <&A_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        A_link_rshift:A_link_rshift{ label = "A_LINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&A_link_lctrl>, <&A_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        A_sink_lshift:A_sink_lshift{ label = "A_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&kp A>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        A_sink_rctrl:A_sink_rctrl{ label = "A_SINK_RCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RC(F7)>, <&kp A>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
        };

        A_sink_lctrl:A_sink_lctrl{ label = "A_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(F7)>, <&kp A>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        A_sink_rshift:A_sink_rshift{ label = "A_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F7)>, <&kp A>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        I_key:I_key { label = "I_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <24 26 36 38 48 50 27>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&kp>, <&I_link_rshift>;
        };

        I_link_rshift:I_link_rshift{ label = "I_LINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp I>, <&I_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        I_sink_rshift:I_sink_rshift{ label = "I_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F8)>, <&kp I>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        N_key:N_key { label = "N_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <29 30 31 41 42 43 44 59 60 61 62 77 76 75>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&kp>, <&N_link_rshift>;
        };

        N_link_lshift:N_link_lshift{ label = "N_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N>, <&N_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        N_link_rshift:N_link_rshift{ label = "N_LINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&N_link_lshift>, <&N_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        N_sink_lshift:N_sink_lshift{ label = "N_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(S)>, <&kp N>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        N_sink_rshift:N_sink_rshift{ label = "N_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F9)>, <&kp N>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        J_key:J_key{ label = "J_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp J>, <&J_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        J_sink_rshift:J_sink_rshift{ label = "J_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F10)>, <&kp J>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        F_key:F_key { label = "F_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <25 26 50 38>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&mo>, <&F_link_rshift>;
        };

        F_link_lshift:F_link_lshift{ label = "F_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp F>, <&F_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        F_link_rshift:F_link_rshift{ label = "F_LINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&F_link_lshift>, <&F_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        F_sink_lshift:F_sink_lshift{ label = "F_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(F)>, <&kp F>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F_sink_rshift:F_sink_rshift{ label = "F_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F11)>, <&kp F>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        U_key:U_key { label = "U_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <29 30 31 41 42 43 44 59 60 61 62 77 76 75>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <480>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&kp>, <&U_link_rshift>;
        };

        U_link_rshift:U_link_rshift{ label = "U_LINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp U>, <&U_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        U_sink_rshift:U_sink_rshift{ label = "U_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F12)>, <&kp U>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        P_link_lshift:P_link_lshift{ label = "P_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp P>, <&P_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        P_key:P_key{ label = "P_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&P_link_lshift>, <&P_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        P_sink_lshift:P_sink_lshift{ label = "P_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>, <&kp P>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        P_sink_rshift:P_sink_rshift{ label = "P_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RS(F13)>, <&kp P>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        Q_link_lshift:Q_link_lshift{ label = "Q_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&Q_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        Q_key:Q_key{ label = "Q_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&Q_link_lshift>, <&Q_sink_rshift>;
            mods = <(MOD_RSFT)>;
            
        };

        Q_sink_lshift:Q_sink_lshift{ label = "Q_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(Y)>, <&kp Q>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Q_sink_rshift:Q_sink_rshift{ label = "Q_SINK_RSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RC(CARET)>, <&kp Q>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };


        V_link_lshift:V_link_lshift{ label = "V_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp V>, <&V_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        V_key:V_key{ label = "V_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&V_link_lshift>, <&V_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        V_sink_lshift:V_sink_lshift{ label = "V_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F14)>, <&kp V>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        V_sink_lctrl:V_sink_lctrl{ label = "V_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(F14)>, <&kp V>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        L_key:L_key{ label = "L_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp L>, <&L_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        L_sink_lshift:L_sink_lshift{ label = "L_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F15)>, <&kp L>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        B_key:B_key { label = "B_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&lnav>, <&B_link_lshift>;
        };

        B_link_lshift:B_link_lshift{ label = "B_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp B>, <&B_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        B_sink_lshift:B_sink_lshift{ label = "B_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F16)>, <&kp B>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        T_key:T_key { label = "T_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&kp>, <&T_link_lshift>;
        };

        T_link_lshift:T_link_lshift{ label = "T_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp T>, <&T_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        T_sink_lshift:T_sink_lshift{ label = "T_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F17)>, <&kp T>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        R_key:R_key { label = "R_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&kp>, <&R_link_lshift>;
        };

        R_link_lshift:R_link_lshift{ label = "R_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp R>, <&R_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        R_sink_lshift:R_sink_lshift{ label = "R_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F18)>, <&kp R>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        E_key:E_key { label = "E_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&kp>, <&E_link_lshift>;
        };

        E_link_lshift:E_link_lshift{ label = "E_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp E>, <&E_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        E_sink_lshift:E_sink_lshift{ label = "E_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F19)>, <&kp E>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        S_link_lshift:S_link_lshift{ label = "S_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp S>, <&S_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        S_key:S_key{ label = "S_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&S_link_lshift>, <&S_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        S_sink_lshift:S_sink_lshift{ label = "S_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F20)>, <&kp S>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        S_sink_lctrl:S_sink_lctrl{ label = "S_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(F20)>, <&kp S>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        M_key:M_key { label = "M_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&mo>, <&M_link_lshift>;
        };

        M_link_lshift:M_link_lshift{ label = "M_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp M>, <&M_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        M_sink_lshift:M_sink_lshift{ label = "M_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F21)>, <&kp M>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        D_key:D_key { label = "D_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <480>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&kp>, <&D_link_lshift>;
        };

        D_link_lshift:D_link_lshift{ label = "D_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp D>, <&D_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        D_sink_lshift:D_sink_lshift{ label = "D_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F22)>, <&kp D>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        Y_key:Y_key { label = "Y_KEY"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>;
            bindings = <&mo>, <&Y_link_lctrl>;
        };

        Y_link_lshift:Y_link_lshift{ label = "Y_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp Y>, <&Y_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        Y_link_lctrl:Y_link_lctrl{ label = "Y_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&Y_link_lshift>, <&Y_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        Y_sink_lshift:Y_sink_lshift{ label = "Y_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F23)>, <&kp Y>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Y_sink_lctrl:Y_sink_lctrl{ label = "Y_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(F23)>, <&kp Y>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        X_link_lshift:X_link_lshift{ label = "X_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp X>, <&X_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        X_key:X_key{ label = "X_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&X_link_lshift>, <&X_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        X_sink_lshift:X_sink_lshift{ label = "X_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(F24)>, <&kp X>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        X_sink_lctrl:X_sink_lctrl{ label = "X_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(F24)>, <&kp X>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        Z_link_lshift:Z_link_lshift{ label = "Z_LINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&Z_sink_lshift>;
            mods = <(MOD_LSFT)>;
            
        };

        Z_key:Z_key{ label = "Z_KEY"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&Z_link_lshift>, <&Z_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        Z_sink_lshift:Z_sink_lshift{ label = "Z_SINK_LSHIFT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(TILDE)>, <&kp Z>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Z_sink_lctrl:Z_sink_lctrl{ label = "Z_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(TILDE)>, <&kp Z>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        par:par{ label = "PAR"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&par_sink_rctrl>;
            mods = <(MOD_RCTL)>;
            
        };

        par_sink_rctrl:par_sink_rctrl{ label = "PAR_SINK_RCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp LEFT_PARENTHESIS>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
        };


        ang:ang{ label = "ANG"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN>, <&ang_sink_rctrl>;
            mods = <(MOD_RCTL)>;
            
        };

        ang_sink_rctrl:ang_sink_rctrl{ label = "ANG_SINK_RCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN>, <&kp LESS_THAN>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
        };


        cur:cur{ label = "CUR"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&cur_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        cur_sink_lctrl:cur_sink_lctrl{ label = "CUR_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACE>, <&kp LEFT_BRACE>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        bra:bra{ label = "BRA"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&bra_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        bra_sink_lctrl:bra_sink_lctrl{ label = "BRA_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>, <&kp LEFT_BRACKET>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        c_tab:c_tab{ label = "C_TAB"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(TAB)>, <&c_tab_sink_lalt>;
            mods = <(MOD_LALT)>;
            
        };

        c_tab_sink_lalt:c_tab_sink_lalt{ label = "C_TAB_SINK_LALT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(TAB)>, <&kp LC(TAB)>;
            mods = <(MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        sc_tab:sc_tab{ label = "SC_TAB"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(TAB))>, <&sc_tab_sink_lalt>;
            mods = <(MOD_LALT)>;
            
        };

        sc_tab_sink_lalt:sc_tab_sink_lalt{ label = "SC_TAB_SINK_LALT"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(TAB))>, <&kp LS(LC(TAB))>;
            mods = <(MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        ampersand:ampersand { label = "AMPERSAND"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <90>; quick-tap-ms = <175>; require-prior-idle-ms = <0>;
            bindings = <&ampersand_ampersand>, <&ampersand_link_lctrl>;
        };

        ampersand_link_lctrl:ampersand_link_lctrl{ label = "AMPERSAND_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPERSAND>, <&ampersand_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        ampersand_sink_lctrl:ampersand_sink_lctrl{ label = "AMPERSAND_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPERSAND>, <&kp AMPERSAND>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        pipe:pipe { label = "PIPE"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <90>; quick-tap-ms = <175>; require-prior-idle-ms = <0>;
            bindings = <&pipe_pipe>, <&pipe_link_lctrl>;
        };

        pipe_link_lctrl:pipe_link_lctrl{ label = "PIPE_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&pipe_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        pipe_sink_lctrl:pipe_sink_lctrl{ label = "PIPE_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp PIPE>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        backslash:backslash { label = "BACKSLASH"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <90>; quick-tap-ms = <175>; require-prior-idle-ms = <0>;
            bindings = <&backslash_backslash>, <&backslash_link_lctrl>;
        };

        backslash_link_lctrl:backslash_link_lctrl{ label = "BACKSLASH_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH>, <&backslash_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        backslash_sink_lctrl:backslash_sink_lctrl{ label = "BACKSLASH_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH>, <&kp BACKSLASH>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        slash:slash { label = "SLASH"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <120>; quick-tap-ms = <175>; require-prior-idle-ms = <0>;
            bindings = <&slash_slash>, <&slash_link_lctrl>;
        };

        slash_link_lctrl:slash_link_lctrl{ label = "SLASH_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&slash_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        slash_sink_lctrl:slash_sink_lctrl{ label = "SLASH_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp SLASH>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        colon:colon { label = "COLON"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <91>; quick-tap-ms = <175>; require-prior-idle-ms = <0>;
            bindings = <&colon_space>, <&colon_link_lctrl>;
        };

        colon_link_lctrl:colon_link_lctrl{ label = "COLON_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&colon_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        colon_sink_lctrl:colon_sink_lctrl{ label = "COLON_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp COLON>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        ampersand_a_n_g:ampersand_a_n_g { label = "AMPERSAND_A_N_G"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <0>;
            bindings = <&less_than_greater_than_left_arrow>, <&ampersand_a_n_g_link_lctrl>;
        };

        ampersand_a_n_g_link_lctrl:ampersand_a_n_g_link_lctrl{ label = "AMPERSAND_A_N_G_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ang>, <&ampersand_a_n_g_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        ampersand_a_n_g_sink_lctrl:ampersand_a_n_g_sink_lctrl{ label = "AMPERSAND_A_N_G_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ang>, <&ang>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        ampersand_p_a_r:ampersand_p_a_r { label = "AMPERSAND_P_A_R"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <0>;
            bindings = <&left_parenthesis_right_parenthesis_left_arrow>, <&ampersand_p_a_r_link_lctrl>;
        };

        ampersand_p_a_r_link_lctrl:ampersand_p_a_r_link_lctrl{ label = "AMPERSAND_P_A_R_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&par>, <&ampersand_p_a_r_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        ampersand_p_a_r_sink_lctrl:ampersand_p_a_r_sink_lctrl{ label = "AMPERSAND_P_A_R_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&par>, <&par>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        grave:grave { label = "GRAVE"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <120>; quick-tap-ms = <175>; require-prior-idle-ms = <0>;
            bindings = <&grave_grave_grave>, <&grave_link_lctrl>;
        };

        grave_link_lctrl:grave_link_lctrl{ label = "GRAVE_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&grave_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        grave_sink_lctrl:grave_sink_lctrl{ label = "GRAVE_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp GRAVE>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        semicolon:semicolon { label = "SEMICOLON"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <90>; quick-tap-ms = <175>; require-prior-idle-ms = <0>;
            bindings = <&semicolon_enter>, <&semicolon_link_lctrl>;
        };

        semicolon_link_lctrl:semicolon_link_lctrl{ label = "SEMICOLON_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&semicolon_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        semicolon_sink_lctrl:semicolon_sink_lctrl{ label = "SEMICOLON_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp SEMICOLON>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        ampersand_c_u_r:ampersand_c_u_r { label = "AMPERSAND_C_U_R"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <0>;
            bindings = <&left_brace_right_brace_left_arrow>, <&ampersand_c_u_r_link_lctrl>;
        };

        ampersand_c_u_r_link_lctrl:ampersand_c_u_r_link_lctrl{ label = "AMPERSAND_C_U_R_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&cur>, <&ampersand_c_u_r_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        ampersand_c_u_r_sink_lctrl:ampersand_c_u_r_sink_lctrl{ label = "AMPERSAND_C_U_R_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&cur>, <&cur>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };


        ampersand_b_r_a:ampersand_b_r_a { label = "AMPERSAND_B_R_A"; compatible = "zmk,behavior-hold-tap"; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 67 68 39>; hold-trigger-on-release;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <0>;
            bindings = <&left_bracket_right_bracket_left_arrow>, <&ampersand_b_r_a_link_lctrl>;
        };

        ampersand_b_r_a_link_lctrl:ampersand_b_r_a_link_lctrl{ label = "AMPERSAND_B_R_A_LINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bra>, <&ampersand_b_r_a_sink_lctrl>;
            mods = <(MOD_LCTL)>;
            
        };

        ampersand_b_r_a_sink_lctrl:ampersand_b_r_a_sink_lctrl{ label = "AMPERSAND_B_R_A_SINK_LCTRL"; compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&bra>, <&bra>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

/*<mods-end>*/
		kp_to:kp_to {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;
		label = "KP_TO";};

		kp_tog:kp_tog {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &tog MACRO_PLACEHOLDER>;
		label = "KP_TOG";};

		kp_sl: kp_sl {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>;
		label = "KP_SL";};

         lnav: lnav {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 4 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 4>,<&macro_press>;
         label = "LNAV";};

         lfun: lfun {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 4 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 4>,<&macro_press>;
         label = "LFUN";};

         lswitcher: lswitcher {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 6 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 6>,<&macro_press>;
         label = "LSWITCHER";};
    };

	//
	// Glove80 key positions index for positional hold-tap
	// - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
	// - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
	//
	// |------------------------|------------------------|
	// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
	// |                        |                        |
	// |  0  1  2  3  4         |          5  6  7  8  9 |
	// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
	// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
	// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
	// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
	// | 64 65 66 67 68         |         75 76 77 78 79 |
	// |                69 52   |   57 74                |
	// |                 70 53  |  56 73                 |
	// |                  71 54 | 55 72                  |
	// |------------------------|------------------------|
	//

	combos {
		compatible = "zmk,combos";

		// combo_mouse { timeout-ms = <18>; bindings = <&smart_mouse>; key-possitions = <24 26>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };

/*<combos-start>*/

        GH { timeout-ms = <20>; key-positions = <24 25>;
            bindings = <&ampersand 0 0>; 
        };

        HC { timeout-ms = <20>; key-positions = <25 26>;
            bindings = <&pipe 0 0>; 
        };

        GC { timeout-ms = <20>; key-positions = <24 26>;
            bindings = <&kp HASH>; 
        };

        GI { timeout-ms = <20>; key-positions = <24 37>;
            bindings = <&backslash 0 0>; 
        };

        HA { timeout-ms = <20>; key-positions = <25 36>;
            bindings = <&slash 0 0>; 
        };

        HN { timeout-ms = <20>; key-positions = <25 38>;
            bindings = <&kp MINUS>; 
        };

        CI { timeout-ms = <20>; key-positions = <26 37>;
            bindings = <&equal_equal>; 
        };

        AI { timeout-ms = <20>; key-positions = <36 37>;
            bindings = <&colon 0 0>; 
        };

        IN { timeout-ms = <20>; key-positions = <37 38>;
            bindings = <&kp PERIOD>; 
        };

        AN { timeout-ms = <20>; key-positions = <36 38>;
            bindings = <&kp EXCLAMATION>; 
        };

        AU { timeout-ms = <20>; key-positions = <36 49>;
            bindings = <&kp PLUS>; 
        };

        IF { timeout-ms = <20>; key-positions = <37 48>;
            bindings = <&exclamation_equal>; 
        };

        IP { timeout-ms = <20>; key-positions = <37 50>;
            bindings = <&kp EQUAL>; 
        };

        NU { timeout-ms = <20>; key-positions = <38 49>;
            bindings = <&kp ASTERISK>; 
        };

        FU { timeout-ms = <20>; key-positions = <48 49>;
            bindings = <&ampersand_a_n_g 0 0>; 
        };

        PU { timeout-ms = <20>; key-positions = <50 49>;
            bindings = <&ampersand_p_a_r 0 0>; 
        };

        FP { timeout-ms = <20>; key-positions = <48 50>;
            bindings = <&kp UNDERSCORE>; 
        };

        VL { timeout-ms = <20>; key-positions = <29 30>;
            bindings = <&kp SINGLE_QUOTE>; 
        };

        LB { timeout-ms = <20>; key-positions = <30 31>;
            bindings = <&kp DOUBLE_QUOTES>; 
        };

        VB { timeout-ms = <20>; key-positions = <29 31>;
            bindings = <&kp TILDE>; 
        };

        VR { timeout-ms = <20>; key-positions = <29 42>;
            bindings = <&kp CARET>; 
        };

        TL { timeout-ms = <20>; key-positions = <41 30>;
            bindings = <&grave 0 0>; 
        };

        BR { timeout-ms = <20>; key-positions = <31 42>;
            bindings = <&kp DOLLAR>; 
        };

        TR { timeout-ms = <20>; key-positions = <41 42>;
            bindings = <&comma_space>; 
        };

        RE { timeout-ms = <20>; key-positions = <42 43>;
            bindings = <&semicolon 0 0>; 
        };

        TE { timeout-ms = <20>; key-positions = <41 43>;
            bindings = <&kp QUESTION>; 
        };

        TD { timeout-ms = <20>; key-positions = <41 60>;
            bindings = <&none>; 
        };

        RM { timeout-ms = <20>; key-positions = <42 59>;
            bindings = <&minus_greater_than>; 
        };

        RY { timeout-ms = <20>; key-positions = <42 61>;
            bindings = <&kp AT_SIGN>; 
        };

        ED { timeout-ms = <20>; key-positions = <43 60>;
            bindings = <&none>; 
        };

        MD { timeout-ms = <20>; key-positions = <59 60>;
            bindings = <&ampersand_c_u_r 0 0>; 
        };

        DY { timeout-ms = <20>; key-positions = <60 61>;
            bindings = <&ampersand_b_r_a 0 0>; 
        };

/*<combos-end>*/

};

};

/* Automatically generated macro definitions */

/ {
	macros {
	};
};

/* Automatically generated keymap */

/ {

behaviors {};


behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};
keymap {
		compatible = "zmk,keymap";

		main {
			bindings = <
&kp F1             &kp F2           &kp F3             &kp F4                 &kp F5                                                                                                        &kp F6          &kp F7                     &kp F8              &kp F9      &kp F10
&kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &key_repeat        &K_key                 &kp F9          &kp LG(F10)                                                                      &kp LG(F11)  &kp LG(F12)     &key_repeat                &key_repeat         &none       &none
&kp C_MUTE         &kp CARET        &G_key LCTRL 0     &H_key LEFT_ALT 0      &C_key          &W_key                                                                           &none        &V_key          &L_key                     &B_key RIGHT_ALT 0  &kp DOLLAR  &none
&kp LEFT_WIN       &O_key           &A_key LEFT_ALT 0  &I_key LSHFT 0         &N_key LCTRL 0  &kp ESCAPE                                                                       &kp DELETE   &T_key RCTRL 0  &R_key RSHFT 0             &E_key RIGHT_ALT 0  &S_key      &kp RMETA
&mo 5              &J_key           &F_key 4 0         &U_key LS(LA(LGUI)) 0  &P_key          &none        &kp BACKSPACE  &mo 3  &magic 9 0    &magic 9 0  &tog 3  &kp DELETE  &none        &M_key 3 0      &D_key RS(RA(LEFT_GUI)) 0  &Y_key 4 0          &X_key      &none
&reloadkeymap      &kp AT           &Q_key             &kp TAB                &kp ENTER                    &kp SPACE      &sl 2  &none         &tog 1      &tog 8  &sl 1                    &kp ENTER       &kp TAB                    &Z_key              &kp TILDE   &none
>;};

		main_upper {
			bindings = <
&trans  &trans     &trans     &trans     &trans                                                                              &trans     &trans     &trans     &trans     &trans
&trans  &trans     &trans     &kp LS(K)  &trans     &trans                                                           &trans  &trans     &trans     &trans     &trans     &trans
&trans  &trans     &kp LS(G)  &kp LS(H)  &kp LS(C)  &kp LS(W)                                                        &trans  &kp LS(V)  &kp LS(L)  &kp LS(B)  &trans     &trans
&trans  &kp LS(O)  &kp LS(A)  &kp LS(I)  &kp LS(N)  &trans                                                           &trans  &kp LS(T)  &kp LS(R)  &kp LS(E)  &kp LS(S)  &trans
&trans  &kp LS(J)  &kp LS(F)  &kp LS(U)  &kp LS(P)  &trans     &trans  &trans      &trans    &trans  &trans  &trans  &trans  &kp LS(M)  &kp LS(D)  &kp LS(Y)  &kp LS(X)  &trans
&tog 1  &trans     &kp LS(Q)  &trans     &trans                &trans  &caps_word  &trans    &trans  &trans  &tog 1          &trans     &trans     &kp LS(Z)  &trans     &tog 1
>;};
de {
         bindings = <
&trans  &trans    &trans    &trans    &trans                                                                       &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans    &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans    &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &Oumlaut  &Aumlaut  &trans    &trans  &trans                                                       &trans  &trans  &trans  &trans  &eszet  &trans
&trans  &trans    &trans    &Uumlaut  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans
&to 2   &trans    &trans    &trans    &trans          &trans  &trans  &trans    &trans  &trans  &sk LSHFT          &trans  &trans  &trans  &trans  &to 2
>;};
num {
         bindings = <
&trans  &trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9                                                                    &trans           &trans                &trans                           &trans   &trans
&trans  &trans           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans                                                    &trans  &trans           &trans                &trans                           &trans   &trans
&trans  &trans           &kp N7           &kp N8           &kp N9           &trans                                                    &trans  &kp PERCENT      &kp ASTERISK          &kp SLASH                        &none    &trans
&trans  &kp NUMBER_0     &kp N4           &kp N5           &kp N6           &trans                                                    &trans  &hmr LCTRL LPAR  &hmr LSHIFT KP_EQUAL  &hmr LEFT_ALT RIGHT_PARENTHESIS  &kp DOT  &trans
&trans  &kp KP_NUMBER_0  &kp N1           &kp N2           &kp NUMBER_3     &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp PLUS         &kp MINUS             &kp COMMA                        &trans   &trans
&to 3   &trans           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3          &trans  &trans  &trans    &trans  &trans  &trans          &trans           &trans                &trans                           &trans   &to 3
>;};
nav {
			bindings = <
&trans  &trans          &trans                &trans          &trans                                                                                            &trans     &trans           &trans  &trans  &trans
&trans  &trans          &trans                &kp BACKSPACE   &kp DELETE       &trans                                                                   &trans  &trans     &trans           &trans  &trans  &trans
&trans  &trans          &none                 &masked_home    &masked_end      &trans                                                                   &trans  &kp LCTRL  &kp RIGHT_SHIFT  &none   &none   &trans
&trans  &kp LEFT_SHIFT  &move_selection_left  &kp LEFT_ARROW  &kp RIGHT_ARROW  &move_selection_right                                                    &trans  &kp RCTRL  &kp LEFT_SHIFT   &none   &none   &trans
&trans  &kp LCTRL       &none                 &kp UP_ARROW    &kp DOWN         &trans                 &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp LCTRL  &kp RIGHT_SHIFT  &none   &none   &trans
&tog 4  &trans          &trans                &kp PG_UP       &kp PAGE_DOWN                           &trans  &trans  &trans    &trans  &trans  &trans          &none      &none            &none   &trans  &to 4
>;};
fun {
			bindings = <
&trans  &trans  &trans     &trans     &trans                                                                                                         &trans     &trans     &trans         &trans  &trans
&trans  &trans  &trans     &trans     &trans  &trans                                                                                         &trans  &kp F10    &kp F11    &kp F12        &trans  &trans
&none   &none   &kp LC(Y)  &kp LC(Z)  &none   &none                                                                                          &trans  &kp F7     &kp F8     &kp F9         &trans  &trans
&none   &none   &kp LC(X)  &kp LC(V)  &none   &none                                                                                          &trans  &kp LCTRL  &kp RSHFT  &kp RIGHT_ALT  &trans  &trans
&trans  &none   &kp LC(C)  &kp LC(S)  &none   &none   &kp LC(LA(DELETE))  &kp LG(LC(LS(A)))  &kp LG(LS(LC(Q)))    &trans  &trans  &kp LG(X)  &trans  &kp F1     &kp F2     &kp F3         &none   &trans
&trans  &none   &kp LC(F)  &kp LC(A)  &none           &kp F9              &kp LS(F6)         &none                &none   &none   &kp LG(B)          &kp F4     &kp F5     &kp F6         &none   &none
>;
		};
switcher {
         bindings = <
&trans  &trans  &trans       &trans  &trans                                                                        &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F4       &trans  &kp ESCAPE  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(TAB)  &none   &kp TAB     &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F4  &sc_tab      &trans  &c_tab      &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans      &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans              &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
qwerty {
         bindings = <
&kp F1     &kp F2    &kp F3   &kp F4    &kp F5                                                                                       &kp F6  &kp F7     &kp F8    &kp F9    &kp F10
&kp EQUAL  &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                    &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q     &kp W    &kp E     &kp R      &kp T                                                                     &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC    &kp A     &kp S    &kp D     &kp F      &kp G                                                                     &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp APOS
&kp GRAVE  &kp Z     &kp X    &kp C     &kp V      &kp B   &kp LSHFT  &kp LCTRL  &trans      &trans    &kp LCTRL  &kp LSHFT  &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp PG_UP
&trans     &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp SPACE  &kp ENTER  &kp LALT    &kp RALT  &kp DEL    &kp BSPC           &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp PG_DN
>;};
mouse {
         bindings = <
&trans  &trans  &trans  &trans   &trans                                                                     &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans   &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F17  &kp F18  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F13  &kp F14  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F15  &kp F16  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F19  &kp F20          &trans  &trans  &trans    &trans  &tog 8  &trans          &trans  &trans  &trans  &trans  &trans
>;};
magic {
			bindings = <
&trans      &trans           &trans           &trans           &trans                                                                                                  &trans  &trans  &trans  &trans  &trans
&to 0       &to 0            &to 2            &to 4            &to 3            &to 5                                                                           &to 6  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                 &none  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                 &none  &none   &none   &none   &none   &none
&sys_reset  &none            &none            &none            &none            &none            &bt_2  &bootloader  &none           &none  &bootloader  &none  &none  &none   &none   &none   &none   &sys_reset
&none       &none            &none            &none            &bt BT_CLR                        &bt_0  &bt_1        &out OUT_USB    &none  &none        &none         &none   &none   &none   &none   &bt BT_CLR_ALL
>;
		};type {
         bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
	};
};
