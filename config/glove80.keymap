/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define Layer_Main 0
#define Layer_NAV 1
#define Layer_FUN 2
#define Layer_NUM 3
#define Layer_Magic 4


/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };

        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };

        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };

    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #else

    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #endif
};

&sk {
    release-after-ms = <900>;// release after 0.6s
    quick-release;// no double capitalization when rolling keys
};

&sl {
    ignore-modifiers;// allow chording sticky mods & layers
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};

// &num_word {
//     layers = <Layer_NUM>;
//     continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
// };

#define DSK_PREV    &hmr LCTRL LG(LC(LEFT))   // previous desktop
#define DSK_NEXT    &hmr LALT LG(LC(RIGHT)) // next     desktop
#define PIN_WIN     &kp LG(LC(LS(Q)))        // pin window across desktops
#define PIN_APP     &kp LG(LC(LS(A)))        // pin application across desktops
#define DSK_MGR     &kp LA(GRAVE)            // desktop manager
#define VOL_DOWN    &hmr RSHFT C_VOL_DN

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <350>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <350>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
            hold-trigger-on-release;
        };

        hml_repeat: hml_repeat {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <350>;
            bindings = <&kp>, <&key_repeat>;

            hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
            hold-trigger-on-release;
        };

        hmr_lpar_lt: hmr_lpar_lt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <350>;
            bindings = <&kp>, <&lpar_lt>;

            hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
            hold-trigger-on-release;
        };

        hmr_rpar_gt: hmr_rpar_gt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <350>;
            bindings = <&kp>, <&rpar_gt>;

            hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
            hold-trigger-on-release;
        };

        // &mt { flavor = "tap-preferred"; tapping-term-ms = <220>; quick-tap-ms = <220>; hold-trigger-key-positions = <0>; };

        mt_home: mt_home {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&masked_home>, <&kp>;

            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            hold-trigger-key-positions = <0>;
        };

        mt_end: mt_end {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&masked_end>, <&kp>;

            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            hold-trigger-key-positions = <0>;
        };

        masked_home: masked_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp HOME>;

            mods = <(MOD_LCTL)>;
        };

        masked_end: masked_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp END>;

            mods = <(MOD_LCTL)>;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        // &caps_word {
        // /delete-property/ ignore-modifiers;
        // };
        // smart_num: smart_num { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <200>; quick-tap-ms = <175>; bindings = <&mo>, <&num_dance>; };
        // num_dance: num_dance { compatible = "zmk,behavior-tap-dance"; #binding-cells = <0>; tapping-term-ms = <200>; bindings = <&num_word>, <&sl Layer_NUM>; };
        // smart_mouse: smart_mouse { compatible = "zmk,behavior-tri-state"; #binding-cells = <0>; bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>; ignored-key-positions = <26 24 28 29 30 31 32 41 42 43 59 60 61 72 73>; ignored-layers = <MOUSE>; };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kp TAB>;
            ignored-key-positions = <25>;
        };

        // sls: sls { compatible = "zmk,behavior-sticky-key"; #binding-cells = <1>; release-after-ms = <1000>; bindings = <&uc_shift>; ignore-modifiers; };
        // uc_shift: uc_shift { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <0>; tap-ms = <1>; bindings = <&macro_press &mo UC &kp LSHFT> , <&macro_pause_for_release> , <&macro_release &mo UC &kp LSHFT>; };

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp COMMA>, <&comma_inner_morph>;
        };

        comma_inner_morph: comma_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
            bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp DOT>, <&dot_inner_morph>;
        };

        dot_inner_morph: dot_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
            bindings = <&kp COLON>, <&kp GREATER_THAN>;
        };

        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp QMARK>, <&kp EXCL>;
        };

        quote: quote {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LS(SINGLE_QUOTE)>, <&kp SINGLE_QUOTE>;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LPAR>, <&kp LT>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp RPAR>, <&kp GT>;
        };

        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&spc_morph>;
        };

        spc_morph: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp SPACE>, <&dot_spc>;
        };

        dot_spc: dot_spc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
        };

        bs_del: bs_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <MOD_RSFT>;
        };

        copy_cut: copy_cut {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(INS)>, <&kp LC(X)>;
        };

        win_sleep: win_sleep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <500>;
            tap-ms = <50>;
            bindings = <&kp LG(X) &kp U &kp S>;
        };

        // Function arrow: ->

        func_arrow: function_arrow {
            compatible = "zmk,behavior-macro";
            label = "FUNCTION_ARROW";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap>, <&kp MINUS &kp GREATER_THAN>;
        };

        and_short: and_short {
            compatible = "zmk,behavior-macro";
            label = "AND_SHORT";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap>, <&kp AMPERSAND &kp AMPERSAND>;
        };

        or_short: or_short {
            compatible = "zmk,behavior-macro";
            label = "OR_SHORT";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap>, <&kp PIPE &kp PIPE>;
        };

        neq_short: neq_short {
            compatible = "zmk,behavior-macro";
            label = "NEQ_SHORT";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap>, <&kp EXCLAMATION &kp EQUAL>;
        };

        eq_short: eq_short {
            compatible = "zmk,behavior-macro";
            label = "EQ_SHORT";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap>, <&kp EQUAL &kp EQUAL>;
        };
    };

    //
    // Glove80 key positions index for positional hold-tap
    // - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
    // - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
    //
    // |------------------------|------------------------|
    // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
    // |                        |                        |
    // |  0  1  2  3  4         |          5  6  7  8  9 |
    // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
    // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
    // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
    // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
    // | 64 65 66 67 68         |         75 76 77 78 79 |
    // |                69 52   |   57 74                |
    // |                 70 53  |  56 73                 |
    // |                  71 54 | 55 72                  |
    // |------------------------|------------------------|
    //

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <18>;
            bindings = <&kp ESC>;
            key-positions = <24 25>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_ret {
            timeout-ms = <18>;
            bindings = <&kp RETURN>;
            key-positions = <25 26>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        // combo_mouse { timeout-ms = <18>; bindings = <&smart_mouse>; key-positions = <24 26>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };

        combo_tab {
            timeout-ms = <18>;
            bindings = <&hml LS(LALT) TAB>;
            key-positions = <36 37>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_repeat {
            timeout-ms = <18>;
            bindings = <&hml_repeat LS(LCTRL) 0>;
            key-positions = <37 38>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_cut {
            timeout-ms = <18>;
            bindings = <&kp LC(X)>;
            key-positions = <48 50>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_copy {
            timeout-ms = <18>;
            bindings = <&kp LC(INS)>;
            key-positions = <48 49>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_paste {
            timeout-ms = <18>;
            bindings = <&kp LS(INS)>;
            key-positions = <49 50>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_bspc {
            timeout-ms = <18>;
            bindings = <&kp BSPC>;
            key-positions = <29 30>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_del {
            timeout-ms = <18>;
            bindings = <&kp DEL>;
            key-positions = <30 31>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_lpar {
            timeout-ms = <18>;
            bindings = <&hmr_lpar_lt RS(LCTRL) 0>;
            key-positions = <41 42>;
            layers = <Layer_Main Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_rpar {
            timeout-ms = <18>;
            bindings = <&hmr_rpar_gt RS(LALT) 0>;
            key-positions = <42 43>;
            layers = <Layer_Main Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_lt {
            timeout-ms = <18>;
            bindings = <&kp LT>;
            key-positions = <41 42>;
            layers = <Layer_NAV>;
            require-prior-idle-ms = <150>;
        };

        combo_gt {
            timeout-ms = <18>;
            bindings = <&kp GT>;
            key-positions = <42 43>;
            layers = <Layer_NAV>;
            require-prior-idle-ms = <150>;
        };

        combo_lbkt {
            timeout-ms = <18>;
            bindings = <&kp LBKT>;
            key-positions = <59 60>;
            layers = <Layer_Main Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_rbkt {
            timeout-ms = <18>;
            bindings = <&kp RBKT>;
            key-positions = <60 61>;
            layers = <Layer_Main Layer_NUM>;
            require-prior-idle-ms = <150>;
        };

        combo_lbrc {
            timeout-ms = <18>;
            bindings = <&kp LBRC>;
            key-positions = <59 60>;
            layers = <Layer_NAV>;
            require-prior-idle-ms = <150>;
        };

        combo_rbrc {
            timeout-ms = <18>;
            bindings = <&kp RBRC>;
            key-positions = <60 61>;
            layers = <Layer_NAV>;
            require-prior-idle-ms = <150>;
        };

        //  combo_grk { timeout-ms = <18>; bindings = <&sl UC>; key-positions = <29 31>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };
        // combo_cpgrk { timeout-ms = <18>; bindings = <&sls 0>; key-positions = <29 30 31>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };

        combo_at {
            timeout-ms = <30>;
            bindings = <&kp AT>;
            key-positions = <24 36>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_hash {
            timeout-ms = <30>;
            bindings = <&kp HASH>;
            key-positions = <25 37>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_dllr {
            timeout-ms = <30>;
            bindings = <&kp DLLR>;
            key-positions = <26 38>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_prcnt {
            timeout-ms = <30>;
            bindings = <&kp PRCNT>;
            key-positions = <27 39>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_grave {
            timeout-ms = <30>;
            bindings = <&kp GRAVE>;
            key-positions = <36 48>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_bslh {
            timeout-ms = <30>;
            bindings = <&kp BSLH>;
            key-positions = <37 49>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_equal {
            timeout-ms = <30>;
            bindings = <&kp EQUAL>;
            key-positions = <38 50>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_tilde {
            timeout-ms = <30>;
            bindings = <&kp TILDE>;
            key-positions = <39 51>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_caret {
            timeout-ms = <30>;
            bindings = <&kp CARET>;
            key-positions = <28 40>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_plus {
            timeout-ms = <30>;
            bindings = <&kp PLUS>;
            key-positions = <29 41>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_star {
            timeout-ms = <30>;
            bindings = <&kp STAR>;
            key-positions = <30 42>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_amps {
            timeout-ms = <30>;
            bindings = <&kp AMPS>;
            key-positions = <31 43>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_under {
            timeout-ms = <30>;
            bindings = <&kp UNDER>;
            key-positions = <40 58>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_minus {
            timeout-ms = <30>;
            bindings = <&kp MINUS>;
            key-positions = <41 59>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_fslh {
            timeout-ms = <30>;
            bindings = <&kp FSLH>;
            key-positions = <42 60>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };

        combo_pipe {
            timeout-ms = <30>;
            bindings = <&kp PIPE>;
            key-positions = <43 61>;
            layers = <Layer_Main Layer_NAV Layer_NUM>;
            require-prior-idle-ms = <50>;
        };
    };
};

/* Automatically generated macro definitions */

/ {
    macros {
    };
};

/* Automatically generated keymap */

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_Main {
            bindings = <
&kp F1                &kp F2       &kp F3        &kp F4        &kp F5                                                                                                     &kp F6        &kp F7        &kp F8       &kp F9       &kp F10
&kp EQUAL             &kp N1       &kp N2        &kp K         &kp N4        &kp N5                                                                               &kp N6  &kp N7        &kp N8        &kp N9       &kp N0       &kp MINUS
&none                 &kp ESC      &kp G         &kp H         &kp C         &kp Z                                                                                &trans  &kp V         &kp L         &kp B        &kp SQT      &none
&none                 &hml LGUI O  &hml LALT A   &hml LSHFT I  &hml LCTRL N  &qexcl                                                                               &trans  &hmr LCTRL T  &hmr RSHFT R  &hmr LALT E  &hmr LGUI S  &none
&kp LSHFT             &kp J        &kp F         &kp U         &kp P         &trans  &mo Layer_NAV  &lt Layer_FUN RET  &caps_word    &none  &none  &mo Layer_NUM  &trans  &kp M         &kp D         &kp Y        &kp X        &kp RSHFT
&magic Layer_Magic 0  &none        &comma_morph  &quote        &kp Q                 &kp SPACE      &kp BACKSPACE      &none         &none  &none  &kp TAB                &kp W         &kp RET       &dot_morph   &none        &magic Layer_Magic 0
            >;
        };

        layer_NAV {
            bindings = <
&kp F1     &kp F2    &kp F3    &kp F4       &kp F5                                                                                &kp F6             &kp F7            &kp F8           &kp F9   &kp F10
&kp EQUAL  &kp N1    &kp N2    &kp K        &kp N4     &kp N5                                                          &kp N6     &kp N7             &kp N8            &kp N9           &kp N0   &kp MINUS
&kp TAB    &trans    &trans    &kp LS(TAB)  &none      &trans                                                          &kp PG_UP  &mt LC(BSPC) BSPC  &mt LC(HOME) UP   &mt LC(DEL) DEL  &trans   &kp BACKSLASH
&kp ESC    &sk LGUI  &sk LALT  &sk LSHFT    &sk LCTRL  &trans                                                          &kp PG_DN  &mt_home 0 LEFT    &mt LC(END) DOWN  &mt_end 0 RIGHT  &kp RET  &none
&none      &trans    &trans    &trans       &trans     &trans  &none           &none   &none    &none  &none  &none    &kp INS    &kp TAB            &kp LT            &kp GT           &trans   &none
&none      &none     &none     &kp LEFT     &kp Q              &to Layer_Main  &trans  &none    &none  &none  &kp ESC             &kp B              &kp DOWN          &none            &none    &none
            >;
        };

        layer_FUN {
            bindings = <
&kp F1     &kp F2         &kp F3        &kp F4         &kp F5                                                                                                                             &kp F6      &kp F7        &kp F8      &kp F9      &kp F10
&kp EQUAL  &kp N1         &kp N2        &kp K          &kp N4         &kp N5                                                                           &kp N6                             &kp N7      &kp N8        &kp N9      &kp N0      &kp MINUS
&kp TAB    &kp F12        &kp F7        &kp F8         &kp F9         &trans                                                                           &trans                             &kp C_PREV  &kp C_VOL_UP  &kp C_NEXT  &win_sleep  &kp BACKSLASH
&kp ESC    &hml LGUI F11  &hml LALT F4  &hml LSHFT F5  &hml LCTRL F6  &trans                                                                           &trans DSK_PREV VOL_DOWN DSK_NEXT  &trans      &none         &none       &kp F10     &kp F1
&kp F2     &kp F3         &trans        &none          &none          &none   &none  &none     &none PIN_APP PIN_WIN DSK_MGR    &trans  &trans  &none  &none                              &none       &none         &kp LEFT    &kp Q       &to Layer_Main
&trans     &none          &none         &kp C_MUTE     &kp C_PP               &kp B  &kp DOWN  &none                            &none   &none
            >;
        };

        layer_NUM {
            bindings = <
&kp F1     &kp F2        &kp F3        &kp F4         &kp F5                                                                                 &kp F6  &kp F7    &kp F8  &kp F9  &kp F10
&kp EQUAL  &kp N1        &kp N2        &kp K          &kp N4         &kp N5                                                          &kp N6  &kp N7  &kp N8    &kp N9  &kp N0  &kp MINUS
&kp TAB    &trans        &kp N7        &kp N8         &kp N9         &trans                                                          &trans  &trans  &trans    &trans  &trans  &kp BACKSLASH
&kp ESC    &hml LGUI N0  &hml LALT N4  &hml LSHFT N5  &hml LCTRL N6  &trans                                                          &trans  &trans  &trans    &trans  &trans  &none
&none      &trans        &kp N1        &kp N2         &kp N3         &trans  &none           &none   &none    &none  &none   &none   &trans  &trans  &trans    &trans  &trans  &none
&none      &none         &none         &kp LEFT       &kp Q                  &to Layer_Main  &trans  &none    &none  &trans  &trans          &kp B   &kp DOWN  &none   &none   &none
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none  &none  &none  &none  &bt BT_CLR_ALL
&to 0        &to 1            &to 2            &to 3            &to 4            &to 5                                                               &to 6  &to 7  &to 8  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
