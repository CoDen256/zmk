/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define Layer_Main 0
#define Layer_NAV 1
#define Layer_FUN 2
#define Layer_NUM 3
#define Layer_Magic 4

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

	behaviors {
		bt_0: bt_0 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_0";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_0>, <&bt BT_DISC 0>;
		};

		bt_1: bt_1 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_1";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_1>, <&bt BT_DISC 1>;
		};

		bt_2: bt_2 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_2";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_2>, <&bt BT_DISC 2>;
		};

		bt_3: bt_3 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_3";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_3>, <&bt BT_DISC 3>;
		};
	};

	macros {
		bt_select_0: bt_select_0 {
			label = "BT_SELECT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_select_1: bt_select_1 {
			label = "BT_SELECT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_select_2: bt_select_2 {
			label = "BT_SELECT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_select_3: bt_select_3 {
			label = "BT_SELECT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #else

	macros {
		bt_0: bt_0 {
			label = "BT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_1: bt_1 {
			label = "BT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_2: bt_2 {
			label = "BT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_3: bt_3 {
			label = "BT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #endif
};

&sk {
	release-after-ms = <900>;// release after 0.6s
	quick-release;// no double capitalization when rolling keys
};

&sl {
	ignore-modifiers;// allow chording sticky mods & layers

release-after-ms = <5000>;};

&lt {
	flavor = "balanced";
	tapping-term-ms = <200>;
	quick-tap-ms = <175>;
};


/ {
	behaviors {
		magic: magic {
			compatible = "zmk,behavior-hold-tap";
			label = "MAGIC_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			bindings = <&mo>, <&rgb_ug_status_macro>;
		};

		lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings = <&macro_param_1to1>,<&macro_press>,<&mo MACRO_PLACEHOLDER &macro_param_2to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_2to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER &macro_param_1to1>,<&macro_release>,<&mo MACRO_PLACEHOLDER>;
        };

		hml: hml {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <270>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hmr: hmr {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hlctrl:hlctrl {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;

			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <220>;
			hold-trigger-key-positions = <0>;
		};



		swapper: swapper {
			compatible = "zmk,behavior-tri-state";
			#binding-cells = <0>;
			bindings = <&kp TAB>;
			ignored-key-positions = <25>;
		};

		copy_cut: copy_cut {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LC(INS)>, <&kp LC(X)>;
		};


/*<macros-start>*/

        reloadkeymap: reloadkeymap { label = "RELOADKEYMAP"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp LA(K) &kp TAB &kp TAB &kp SPACE &kp SPACE>;
        };

        mleft: mleft { label = "MLEFT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp F13>;
        };

        mright: mright { label = "MRIGHT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp F14>;
        };

        mup: mup { label = "MUP"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp F15>;
        };

        mdown: mdown { label = "MDOWN"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp F16>;
        };

        mlclick: mlclick { label = "MLCLICK"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp F17>;
        };

        mrclick: mrclick { label = "MRCLICK"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp F18>;
        };

        mscrollup: mscrollup { label = "MSCROLLUP"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp F19>;
        };

        mscrolldown: mscrolldown { label = "MSCROLLDOWN"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp F20>;
        };

        cut_line: cut_line { label = "CUT_LINE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&select_line &kp K_CUT &kp DELETE>;
        };

        move_down: move_down { label = "MOVE_DOWN"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&cut_line &kp DOWN &kp K_PASTE>;
        };

        move_up: move_up { label = "MOVE_UP"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&cut_line &kp UP_ARROW &kp K_PASTE>;
        };

        select_word: select_word { label = "SELECT_WORD"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&select_word_right &select_word_left>;
        };

        select_line: select_line { label = "SELECT_LINE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp HOME &kp LS(END)>;
        };

        delete_word: delete_word { label = "DELETE_WORD"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&select_word &kp BACKSPACE>;
        };

        delete_line: delete_line { label = "DELETE_LINE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&select_line &kp BACKSPACE &kp BACKSPACE>;
        };

        copy_line: copy_line { label = "COPY_LINE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp LC(RIGHT)>;
        };

        select_word_right: select_word_right { label = "SELECT_WORD_RIGHT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
        };

        select_word_left: select_word_left { label = "SELECT_WORD_LEFT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
        };

        duplicate_line: duplicate_line { label = "DUPLICATE_LINE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp RIGHT &kp ENTER &kp LC(V)>;
        };

        moswitcher: moswitcher { label = "MOSWITCHER"; #binding-cells = <1>; compatible = "zmk,behavior-macro-one-param"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&macro_press>,<&mo 4 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 4>,<&macro_press>;
        };

        exc_equal: exc_equal { label = "EXC_EQUAL"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&macro_tap>,<&kp EXCLAMATION &kp EQUAL>;
        };

        pipe_pipe: pipe_pipe { label = "PIPE_PIPE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&macro_tap>,<&kp PIPE &kp PIPE>;
        };

        ampersand_ampersand: ampersand_ampersand { label = "AMPERSAND_AMPERSAND"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&macro_tap>,<&kp AMPERSAND &kp AMPERSAND>;
        };

        minus_gre_tha: minus_gre_tha { label = "MINUS_GRE_THA"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&macro_tap>,<&kp MINUS &kp GREATER_THAN>;
        };

        backslash_backslash: backslash_backslash { label = "BACKSLASH_BACKSLASH"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&macro_tap>,<&kp BACKSLASH &kp BACKSLASH>;
        };

        slash_slash: slash_slash { label = "SLASH_SLASH"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&macro_tap>,<&kp SLASH &kp SLASH>;
        };

        lef_bra_rig_bra_left_arrow: lef_bra_rig_bra_left_arrow { label = "LEF_BRA_RIG_BRA_LEFT_ARROW"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&macro_tap>,<&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
        };

        lef_par_rig_par_left_arrow: lef_par_rig_par_left_arrow { label = "LEF_PAR_RIG_PAR_LEFT_ARROW"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&macro_tap>,<&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
        };

        equal_equal: equal_equal { label = "EQUAL_EQUAL"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&macro_tap>,<&kp EQUAL &kp EQUAL>;
        };

        left_brace_rig_bra_left_arrow: left_brace_rig_bra_left_arrow { label = "LEFT_BRACE_RIG_BRA_LEFT_ARROW"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            wait-ms = <0>; tap-ms = <0>;
            bindings = <&macro_tap>,<&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_ARROW>;
        };
/*<macros-end>*/



/*<mods-start>*/

        TR_delegate:TR_delegate { label = "TR_DELEGATE"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <250>; quick-tap-ms = <175>; require-prior-idle-ms = <0>; hold-trigger-key-positions = <0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&pipe_pipe>, <&kp>;
        };

        RE_delegate:RE_delegate { label = "RE_DELEGATE"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <250>; quick-tap-ms = <175>; require-prior-idle-ms = <0>; hold-trigger-key-positions = <0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&ampersand_ampersand>, <&kp>;
        };

        backslash_x_bac_bac:backslash_x_bac_bac { label = "BACKSLASH_X_BAC_BAC"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <250>; quick-tap-ms = <175>; require-prior-idle-ms = <0>; hold-trigger-key-positions = <0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&backslash_backslash>, <&kp>;
        };

        H_key_hold_tap:H_key_hold_tap { label = "H_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <26 24 38>;
            bindings = <&moswitcher>, <&kp>;
        };

        A_key_hold_tap:A_key_hold_tap { label = "A_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&kp>, <&kp>;
        };

        I_key_hold_tap:I_key_hold_tap { label = "I_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <24 26 36 38 48 50 18 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&kp>, <&kp>;
        };

        N_key_hold_tap:N_key_hold_tap { label = "N_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&kp>, <&kp>;
        };

        F_key_hold_tap:F_key_hold_tap { label = "F_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <25 26 50 38 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&mo>, <&kp>;
        };

        slash_x_sla_sla:slash_x_sla_sla { label = "SLASH_X_SLA_SLA"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <250>; quick-tap-ms = <175>; require-prior-idle-ms = <0>; hold-trigger-key-positions = <0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&slash_slash>, <&kp>;
        };

        Q4_key_hold_tap:Q4_key_hold_tap { label = "Q4_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <250>; quick-tap-ms = <175>; require-prior-idle-ms = <0>; hold-trigger-key-positions = <0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&lef_bra_rig_bra_left_arrow>, <&kp>;
        };

        Q5_key_hold_tap:Q5_key_hold_tap { label = "Q5_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <250>; quick-tap-ms = <175>; require-prior-idle-ms = <0>; hold-trigger-key-positions = <0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&lef_par_rig_par_left_arrow>, <&kp>;
        };

        T_key_hold_tap:T_key_hold_tap { label = "T_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&kp>, <&kp>;
        };

        R_key_hold_tap:R_key_hold_tap { label = "R_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <31 29 43 41 61 59 77 0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68>;
            bindings = <&kp>, <&kp>;
        };

        E_key_hold_tap:E_key_hold_tap { label = "E_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68>;
            bindings = <&kp>, <&kp>;
        };

        equal_x_equ_equ:equal_x_equ_equ { label = "EQUAL_X_EQU_EQU"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <250>; quick-tap-ms = <175>; require-prior-idle-ms = <0>; hold-trigger-key-positions = <0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&equal_equal>, <&kp>;
        };

        Z6_key_hold_tap:Z6_key_hold_tap { label = "Z6_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <0>; hold-trigger-key-positions = <0 1 2 3 4 10 11 12 22 23 34 46 13 24 25 26 35 36 37 38 47 48 49 50 66 14 15 27 39 51 64 65 67 68 5 6 7 8 9 19 20 21 32 33 45 63 18 29 30 31 41 42 43 44 59 60 61 62 77 16 17 28 40 58 75 76 79 80>;
            bindings = <&left_brace_rig_bra_left_arrow>, <&kp>;
        };

        EN_SET:EN_SET { label = "EN_SET"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LG(F10)>, <&kp LG(F10)>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        RU_SET:RU_SET { label = "RU_SET"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LG(F11)>, <&kp LG(F11)>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        DE_SET:DE_SET { label = "DE_SET"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LG(F12)>, <&kp LG(F12)>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVK:NAVK { label = "NAVK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp LEFT>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVK5:NAVK5 { label = "NAVK5"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp RIGHT>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVH:NAVH { label = "NAVH"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&NAVH_lctrl_link>, <&NAVH_rctrl_sink>;
            mods = <(MOD_RCTL)>;
            
        };

        NAVH_lctrl_link:NAVH_lctrl_link { label = "NAVH_LCTRL_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp HOME>, <&NAVH_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        NAVH_lctrl_sink:NAVH_lctrl_sink { label = "NAVH_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(HOME)>, <&kp HOME>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVH_rctrl_sink:NAVH_rctrl_sink { label = "NAVH_RCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(HOME)>, <&kp HOME>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
        };

        NAVC:NAVC { label = "NAVC"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&NAVC_lctrl_link>, <&NAVC_rctrl_sink>;
            mods = <(MOD_RCTL)>;
            
        };

        NAVC_lctrl_link:NAVC_lctrl_link { label = "NAVC_LCTRL_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp END>, <&NAVC_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        NAVC_lctrl_sink:NAVC_lctrl_sink { label = "NAVC_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(END)>, <&kp END>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVC_rctrl_sink:NAVC_rctrl_sink { label = "NAVC_RCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(END)>, <&kp END>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
        };

        NAVI:NAVI { label = "NAVI"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(LEFT)>, <&kp LC(LEFT)>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVN:NAVN { label = "NAVN"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(RIGHT)>, <&kp LC(RIGHT)>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVU:NAVU { label = "NAVU"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp UP>, <&kp UP>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVP:NAVP { label = "NAVP"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp DOWN>, <&kp DOWN>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVA:NAVA { label = "NAVA"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&select_line>, <&select_line>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVW5:NAVW5 { label = "NAVW5"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&select_word>, <&select_word>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVQ4:NAVQ4 { label = "NAVQ4"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp PAGE_UP>, <&kp PAGE_UP>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        NAVQ5:NAVQ5 { label = "NAVQ5"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp PAGE_DOWN>, <&kp PAGE_DOWN>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F1_key:F1_key { label = "F1_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp F1>, <&kp F1>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F2_key:F2_key { label = "F2_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp F2>, <&kp F2>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F3_key:F3_key { label = "F3_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp F3>, <&kp F3>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F4_key:F4_key { label = "F4_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp F4>, <&kp F4>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F5_key:F5_key { label = "F5_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp F5>, <&kp F5>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        K1_key:K1_key { label = "K1_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&none>, <&none>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        K2_key:K2_key { label = "K2_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&none>, <&none>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        K3_key:K3_key { label = "K3_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&backslash_x_bac_bac 0 BACKSLASH>, <&backslash_x_bac_bac 0 BACKSLASH>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        G1_key:G1_key { label = "G1_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&none>, <&none>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        G2_key:G2_key { label = "G2_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp HASH>, <&kp HASH>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        O1_key:O1_key { label = "O1_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp AT_SIGN>, <&kp AT_SIGN>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        J1_key:J1_key { label = "J1_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&none>, <&none>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        K_key:K_key { label = "K_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp K>, <&K_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        K_key_rshift_sink:K_key_rshift_sink { label = "K_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F1)>, <&kp K>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        G_key:G_key { label = "G_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&G_key_lshift_link>, <&G_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        G_key_lshift_link:G_key_lshift_link { label = "G_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp G>, <&G_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        G_key_lshift_sink:G_key_lshift_sink { label = "G_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(X)>, <&kp G>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        G_key_rshift_sink:G_key_rshift_sink { label = "G_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F2)>, <&kp G>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        H_key:H_key { label = "H_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&H_key_hold_tap LALT H>, <&H_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        H_key_rshift_sink:H_key_rshift_sink { label = "H_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F3)>, <&H_key_hold_tap LALT H>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        C_key:C_key { label = "C_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&C_key_rshift_link>, <&C_key_rctrl_sink>;
            mods = <(MOD_RCTL)>;
            
        };

        C_key_lshift_link:C_key_lshift_link { label = "C_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp C>, <&C_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        C_key_rshift_link:C_key_rshift_link { label = "C_KEY_RSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&C_key_lshift_link>, <&C_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        C_key_lshift_sink:C_key_lshift_sink { label = "C_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp C>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        C_key_rshift_sink:C_key_rshift_sink { label = "C_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F4)>, <&kp C>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        C_key_rctrl_sink:C_key_rctrl_sink { label = "C_KEY_RCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RC(F4)>, <&kp C>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
        };

        O_key:O_key { label = "O_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&O_key_lshift_link>, <&O_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        O_key_lshift_link:O_key_lshift_link { label = "O_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp O>, <&O_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        O_key_lshift_sink:O_key_lshift_sink { label = "O_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F6)>, <&kp O>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        O_key_rshift_sink:O_key_rshift_sink { label = "O_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F6)>, <&kp O>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        A_key:A_key { label = "A_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&A_key_rctrl_link>, <&A_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        A_key_lshift_link:A_key_lshift_link { label = "A_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&A_key_hold_tap LALT A>, <&A_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        A_key_rshift_link:A_key_rshift_link { label = "A_KEY_RSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&A_key_lshift_link>, <&A_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        A_key_rctrl_link:A_key_rctrl_link { label = "A_KEY_RCTRL_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&A_key_rshift_link>, <&A_key_rctrl_sink>;
            mods = <(MOD_RCTL)>;
            
        };

        A_key_lshift_sink:A_key_lshift_sink { label = "A_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&A_key_hold_tap LALT A>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        A_key_rshift_sink:A_key_rshift_sink { label = "A_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F7)>, <&A_key_hold_tap LALT A>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        A_key_rctrl_sink:A_key_rctrl_sink { label = "A_KEY_RCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RC(F7)>, <&A_key_hold_tap LALT A>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
        };

        A_key_lctrl_sink:A_key_lctrl_sink { label = "A_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F7)>, <&A_key_hold_tap LALT A>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        I_key:I_key { label = "I_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&I_key_hold_tap LSHIFT I>, <&I_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        I_key_rshift_sink:I_key_rshift_sink { label = "I_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F8)>, <&I_key_hold_tap LSHIFT I>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        N_key:N_key { label = "N_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&N_key_lshift_link>, <&N_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        N_key_lshift_link:N_key_lshift_link { label = "N_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&N_key_hold_tap LCTRL N>, <&N_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        N_key_lshift_sink:N_key_lshift_sink { label = "N_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(S)>, <&N_key_hold_tap LCTRL N>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        N_key_rshift_sink:N_key_rshift_sink { label = "N_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F9)>, <&N_key_hold_tap LCTRL N>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        J_key:J_key { label = "J_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp J>, <&J_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        J_key_rshift_sink:J_key_rshift_sink { label = "J_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F10)>, <&kp J>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        F_key:F_key { label = "F_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&F_key_lshift_link>, <&F_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        F_key_lshift_link:F_key_lshift_link { label = "F_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&F_key_hold_tap 2 F>, <&F_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        F_key_lshift_sink:F_key_lshift_sink { label = "F_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F)>, <&F_key_hold_tap 2 F>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F_key_rshift_sink:F_key_rshift_sink { label = "F_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F11)>, <&F_key_hold_tap 2 F>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        U_key:U_key { label = "U_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp U>, <&U_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        U_key_rshift_sink:U_key_rshift_sink { label = "U_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F12)>, <&kp U>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        P_key:P_key { label = "P_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&P_key_lshift_link>, <&P_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        P_key_lshift_link:P_key_lshift_link { label = "P_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp P>, <&P_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        P_key_lshift_sink:P_key_lshift_sink { label = "P_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(V)>, <&kp P>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        P_key_rshift_sink:P_key_rshift_sink { label = "P_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F13)>, <&kp P>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        Q_key:Q_key { label = "Q_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&Q_key_lshift_link>, <&Q_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        Q_key_lshift_link:Q_key_lshift_link { label = "Q_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp Q>, <&Q_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        Q_key_lshift_sink:Q_key_lshift_sink { label = "Q_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(Y)>, <&kp Q>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Q_key_rshift_sink:Q_key_rshift_sink { label = "Q_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RC(CARET)>, <&kp Q>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        K5_key:K5_key { label = "K5_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&slash_x_sla_sla 0 SLASH>, <&slash_x_sla_sla 0 SLASH>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        K6_key:K6_key { label = "K6_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp TILDE>, <&kp TILDE>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        C6_key:C6_key { label = "C6_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&C6_key_lshift_link>, <&C6_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        C6_key_lshift_link:C6_key_lshift_link { label = "C6_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp ESCAPE>, <&C6_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        C6_key_lshift_sink:C6_key_lshift_sink { label = "C6_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(A)>, <&kp ESCAPE>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        C6_key_rshift_sink:C6_key_rshift_sink { label = "C6_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F5)>, <&kp ESCAPE>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        N6_key:N6_key { label = "N6_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp ENTER>, <&kp ENTER>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        P6_key:P6_key { label = "P6_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp PERIOD>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Q1_key:Q1_key { label = "Q1_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&none>, <&none>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Q2_key:Q2_key { label = "Q2_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp CARET>, <&kp CARET>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Q4_key:Q4_key { label = "Q4_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&Q4_key_hold_tap 0 LEFT_BRACKET>, <&Q4_key_hold_tap 0 LEFT_BRACKET>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Q5_key:Q5_key { label = "Q5_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&Q5_key_hold_tap 0 LEFT_PARENTHESIS>, <&Q5_key_hold_tap 0 LEFT_PARENTHESIS>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F6_key:F6_key { label = "F6_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp F6>, <&kp F6>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F7_key:F7_key { label = "F7_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp F7>, <&kp F7>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F8_key:F8_key { label = "F8_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp F8>, <&kp F8>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F9_key:F9_key { label = "F9_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp F9>, <&kp F9>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F0_key:F0_key { label = "F0_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp F10>, <&kp F10>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        W_key:W_key { label = "W_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp W>, <&kp W>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        V_key:V_key { label = "V_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&V_key_lshift_link>, <&V_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        V_key_lshift_link:V_key_lshift_link { label = "V_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp V>, <&V_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        V_key_lshift_sink:V_key_lshift_sink { label = "V_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F14)>, <&kp V>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        V_key_lctrl_sink:V_key_lctrl_sink { label = "V_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F14)>, <&kp V>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        L_key:L_key { label = "L_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp L>, <&L_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        L_key_lshift_sink:L_key_lshift_sink { label = "L_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F15)>, <&kp L>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        B_key:B_key { label = "B_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp B>, <&B_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        B_key_lshift_sink:B_key_lshift_sink { label = "B_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F16)>, <&kp B>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        T_key:T_key { label = "T_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&T_key_rshift_link>, <&T_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        T_key_rshift_link:T_key_rshift_link { label = "T_KEY_RSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&T_key_hold_tap RCTRL T>, <&T_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        T_key_rshift_sink:T_key_rshift_sink { label = "T_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(S)>, <&T_key_hold_tap RCTRL T>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        T_key_lshift_sink:T_key_lshift_sink { label = "T_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F17)>, <&T_key_hold_tap RCTRL T>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        R_key:R_key { label = "R_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&R_key_hold_tap RSHIFT R>, <&R_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        R_key_lshift_sink:R_key_lshift_sink { label = "R_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F18)>, <&R_key_hold_tap RSHIFT R>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        E_key:E_key { label = "E_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&E_key_rshift_link>, <&E_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        E_key_rshift_link:E_key_rshift_link { label = "E_KEY_RSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&E_key_hold_tap RALT E>, <&E_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        E_key_rshift_sink:E_key_rshift_sink { label = "E_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&E_key_hold_tap RALT E>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        E_key_lshift_sink:E_key_lshift_sink { label = "E_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F19)>, <&E_key_hold_tap RALT E>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        S_key:S_key { label = "S_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&S_key_lshift_link>, <&S_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        S_key_lshift_link:S_key_lshift_link { label = "S_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp S>, <&S_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        S_key_lshift_sink:S_key_lshift_sink { label = "S_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F20)>, <&kp S>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        S_key_lctrl_sink:S_key_lctrl_sink { label = "S_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F20)>, <&kp S>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        M_key:M_key { label = "M_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp M>, <&M_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        M_key_lshift_sink:M_key_lshift_sink { label = "M_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F21)>, <&kp M>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        D_key:D_key { label = "D_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp D>, <&D_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        D_key_lshift_sink:D_key_lshift_sink { label = "D_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F22)>, <&kp D>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Y_key:Y_key { label = "Y_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp Y>, <&Y_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        Y_key_lshift_sink:Y_key_lshift_sink { label = "Y_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F23)>, <&kp Y>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        X_key:X_key { label = "X_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&X_key_lshift_link>, <&X_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        X_key_lshift_link:X_key_lshift_link { label = "X_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp X>, <&X_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        X_key_lshift_sink:X_key_lshift_sink { label = "X_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F24)>, <&kp X>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        X_key_lctrl_sink:X_key_lctrl_sink { label = "X_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F24)>, <&kp X>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Z_key:Z_key { label = "Z_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&Z_key_lshift_link>, <&Z_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        Z_key_lshift_link:Z_key_lshift_link { label = "Z_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp Z>, <&Z_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        Z_key_lshift_sink:Z_key_lshift_sink { label = "Z_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(TILDE)>, <&kp Z>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Z_key_lctrl_sink:Z_key_lctrl_sink { label = "Z_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(TILDE)>, <&kp Z>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        W5_key:W5_key { label = "W5_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp HASH>, <&kp HASH>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        W6_key:W6_key { label = "W6_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LESS_THAN>, <&kp LESS_THAN>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        V5_key:V5_key { label = "V5_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&equal_x_equ_equ 0 EQUAL>, <&equal_x_equ_equ 0 EQUAL>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        T5_key:T5_key { label = "T5_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp TAB>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        M5_key:M5_key { label = "M5_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp COMMA>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        W8_key:W8_key { label = "W8_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp GREATER_THAN>, <&kp GREATER_THAN>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        W9_key:W9_key { label = "W9_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&none>, <&none>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        W0_key:W0_key { label = "W0_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&none>, <&none>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        B9_key:B9_key { label = "B9_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp TILDE>, <&kp TILDE>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        B0_key:B0_key { label = "B0_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&none>, <&none>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        S0_key:S0_key { label = "S0_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp GRAVE>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        X0_key:X0_key { label = "X0_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&none>, <&none>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Z6_key:Z6_key { label = "Z6_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&Z6_key_hold_tap 0 LEFT_BRACE>, <&Z6_key_hold_tap 0 LEFT_BRACE>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Z7_key:Z7_key { label = "Z7_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp UNDERSCORE>, <&kp UNDERSCORE>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Z9_key:Z9_key { label = "Z9_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp DOLLAR>, <&kp DOLLAR>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Z0_key:Z0_key { label = "Z0_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&none>, <&none>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TL1:TL1 { label = "TL1"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp SPACE>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TL2:TL2 { label = "TL2"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp BACKSPACE>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TL3:TL3 { label = "TL3"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&sl 3>, <&sl 3>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TL4:TL4 { label = "TL4"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(RA(RGUI))>, <&kp RS(RA(RGUI))>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TL5:TL5 { label = "TL5"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LGUI>, <&kp LGUI>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TL6:TL6 { label = "TL6"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&magic 6 0>, <&magic 6 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TR1:TR1 { label = "TR1"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&sl 1>, <&sl 1>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TR2:TR2 { label = "TR2"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp DELETE>, <&kp DELETE>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TR3:TR3 { label = "TR3"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&sl 3>, <&sl 3>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TR4:TR4 { label = "TR4"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(LS(LA(F24)))>, <&kp LC(LS(LA(F24)))>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TR5:TR5 { label = "TR5"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RGUI>, <&kp RGUI>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        TR6:TR6 { label = "TR6"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&magic 6 0>, <&magic 6 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };
/*<mods-end>*/
		kp_to:kp_to {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;
		label = "KP_TO";};

		kp_tog:kp_tog {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &tog MACRO_PLACEHOLDER>;
		label = "KP_TOG";};

		kp_sl: kp_sl {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>;
		label = "KP_SL";};
    };

	//
	// Glove80 key positions index for positional hold-tap
	// - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
	// - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
	//
	// |------------------------|------------------------|
	// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
	// |                        |                        |
	// |  0  1  2  3  4         |          5  6  7  8  9 |
	// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
	// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
	// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
	// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
	// | 64 65 66 67 68         |         75 76 77 78 79 |
	// |                69 52   |   57 74                |
	// |                 70 53  |  56 73                 |
	// |                  71 54 | 55 72                  |
	// |------------------------|------------------------|
	//

	combos {
		compatible = "zmk,combos";
/*<combos-start>*/

        GH { timeout-ms = <30>; key-positions = <24 25>; layers = <0 1>;
            bindings = <&kp PLUS>; 
        };

        HC { timeout-ms = <30>; key-positions = <25 26>; layers = <0 1>;
            bindings = <&kp MINUS>; 
        };

        GC { timeout-ms = <30>; key-positions = <24 26>; layers = <0 1>;
            bindings = <&kp ASTERISK>; 
        };

        AI { timeout-ms = <30>; key-positions = <36 37>; layers = <0 1>;
            bindings = <&kp SINGLE_QUOTE>; 
        };

        IN { timeout-ms = <30>; key-positions = <37 38>; layers = <0 1>;
            bindings = <&kp DOUBLE_QUOTES>; 
        };

        AN { timeout-ms = <30>; key-positions = <36 38>; layers = <0 1>;
            bindings = <&kp EXCLAMATION>; 
        };

        PU { timeout-ms = <30>; key-positions = <50 49>; layers = <0 1>;
            bindings = <&kp PERCENT>; 
        };

        TR { timeout-ms = <30>; key-positions = <41 42>; layers = <0 1>;
            bindings = <&TR_delegate 0 PIPE>; 
        };

        RE { timeout-ms = <30>; key-positions = <42 43>; layers = <0 1>;
            bindings = <&RE_delegate 0 AMPERSAND>; 
        };

        TE { timeout-ms = <30>; key-positions = <41 43>; layers = <0 1>;
            bindings = <&kp QUESTION>; 
        };

        MD { timeout-ms = <30>; key-positions = <59 60>; layers = <0 1>;
            bindings = <&minus_gre_tha>; 
        };
/*<combos-end>*/

};

};

/* Automatically generated macro definitions */

/ {
	macros {
	};
};

/* Automatically generated keymap */

/ {


behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};
keymap {
		compatible = "zmk,keymap";
    main { // 0
    			bindings = <
&F1_key  &F2_key  &F3_key  &F4_key  &F5_key                                                          &F6_key  &F7_key  &F8_key  &F9_key  &F0_key
&K1_key  &K2_key  &K3_key  &K_key   &K5_key  &K6_key                                        &W5_key  &W6_key  &W_key   &W8_key  &W9_key  &W0_key
&G1_key  &G2_key  &G_key   &H_key   &C_key   &C6_key                                        &V5_key  &V_key   &L_key   &B_key   &B9_key  &B0_key
&O1_key  &O_key   &A_key   &I_key   &N_key   &N6_key                                        &T5_key  &T_key   &R_key   &E_key   &S_key   &S0_key
&J1_key  &J_key   &F_key   &U_key   &P_key   &P6_key  &TL2  &TL4  &TL6    &TR6  &TR4  &TR2  &M5_key  &M_key   &D_key   &Y_key   &X_key   &X0_key
&Q1_key  &Q2_key  &Q_key   &Q4_key  &Q5_key           &TL1  &TL3  &TL5    &TR5  &TR3  &TR1           &Z6_key  &Z7_key  &Z_key   &Z9_key  &Z0_key
>;};
upper { // 1
			bindings = <
&trans  &trans     &trans     &trans             &trans                                                                                             &trans           &trans     &trans     &trans     &trans
&trans  &trans     &trans     &kp LS(K)          &trans                 &trans                                                       &trans         &trans           &kp LS(W)  &trans     &trans     &trans
&trans  &trans     &kp LS(G)  &kp LS(H)          &kp LS(C)              &trans                                                       &exc_equal     &kp LS(V)        &kp LS(L)  &kp LS(B)  &trans     &trans
&trans  &kp LS(O)  &kp LS(A)  &kp LS(I)          &kp LS(N)              &trans                                                       &kp LS(TAB)    &kp LS(T)        &kp LS(R)  &kp LS(E)  &kp LS(S)  &trans
&trans  &kp LS(J)  &kp LS(F)  &kp LS(U)          &kp LS(P)              &kp COLON  &trans  &trans  &trans    &trans  &trans  &trans  &kp SEMICOLON  &kp LS(M)        &kp LS(D)  &kp LS(Y)  &kp LS(X)  &trans
&trans  &trans     &kp LS(Q)  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS             &trans  &trans  &trans    &trans  &trans  &tog 1                 &kp RIGHT_BRACE  &trans     &kp LS(Z)  &trans     &trans
>;};

nav { // 2
			bindings = <
&trans  &trans     &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &NAVK   &NAVK5  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &NAVH   &NAVC   &trans                                                    &trans  &none   &none   &none   &trans  &trans
&trans  &kp LCTRL  &NAVA   &NAVI   &NAVN   &NAVW5                                                    &trans  &none   &none   &none   &trans  &trans
&trans  &kp LSHFT  &trans  &NAVU   &NAVP   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &none   &none   &none   &trans  &trans
&trans  &trans     &trans  &NAVQ4  &NAVQ5          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
num { // 3
         bindings = <
&trans  &trans  &trans  &trans  &trans                                                                          &trans                &trans     &trans                 &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans        &kp MINUS             &kp SLASH  &kp PLUS               &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &kp EQUAL     &kp N7                &kp N8     &kp N9                 &none       &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &kp ASTERISK  &kp N4                &kp N5     &kp N6                 &kp PERIOD  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &tog 3  &trans  &trans    &trans  &trans  &trans  &kp PERCENT   &kp N1                &kp N2     &kp NUMBER_3           &none       &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans                &kp LEFT_PARENTHESIS  &kp N0     &kp RIGHT_PARENTHESIS  &trans      &trans
>;};

switcher { // 4
         bindings = <
&trans  &trans  &trans       &trans  &trans                                                                        &trans       &trans  &trans      &trans  &trans
&trans  &trans  &kp F4       &trans  &kp ESCAPE  &trans                                                    &trans  &kp F4       &trans  &kp ESCAPE  &trans  &trans
&trans  &trans  &kp LS(TAB)  &none   &kp TAB     &trans                                                    &trans  &kp LS(TAB)  &none   &kp TAB     &trans  &trans
&trans  &kp F4  &kp AT       &trans  &kp GRAVE   &trans                                                    &trans  &kp AT       &trans  &kp GRAVE   &kp F4  &trans
&trans  &trans  &trans       &trans  &trans      &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans       &trans  &trans      &trans  &trans
&trans  &trans  &trans       &trans  &trans              &trans  &trans  &trans    &trans  &trans  &trans          &trans       &trans  &trans      &trans  &trans
>;};
gaming { // 5
         bindings = <
&kp F1  &kp F2     &kp F3  &kp F4  &kp F5                                                                           &kp F6  &kp F7     &kp F8   &kp F9    &kp F10
&kp N9  &kp N0     &kp N1  &kp N2  &kp N3  &kp N4                                                           &kp N5  &kp N6  &kp N7     &kp N8   &kp N9    &kp N0
&kp N8  &kp ESC    &kp Q   &kp W   &kp E   &kp R                                                            &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&kp N7  &kp LSHFT  &kp A   &kp S   &kp D   &kp F                                                            &kp H   &kp J   &kp K      &kp L    &kp SEMI  &trans
&kp N6  &kp LCTRL  &kp Z   &kp X   &kp C   &kp V   &kp ENTER  &kp TAB   &trans      &trans  &trans  &trans  &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
&kp N5  &trans     &kp T   &kp G   &kp B           &kp SPACE  &kp LALT  &kp BSPC    &trans  &trans  &trans          &trans  &trans     &trans   &trans    &trans
>;};

magic { // 6
			bindings = <
&trans      &trans           &trans           &trans           &trans                                                                                                      &trans  &trans  &trans  &trans  &trans
&to 0       &to 1            &to 2            &to 3            &to 4            &to 5                                                                               &to 6  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                     &none  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                     &none  &none   &none   &none   &none   &none
&sys_reset  &none            &none            &none            &none            &none            &bt_2  &bootloader  &none           &none    &bootloader  &none    &none  &none   &none   &none   &none   &sys_reset
&none       &none            &none            &none            &bt BT_CLR                        &bt_0  &bt_1        &out OUT_USB    &EN_SET  &RU_SET      &DE_SET         &none   &none   &none   &none   &bt BT_CLR_ALL
>;
		};
	};
};
