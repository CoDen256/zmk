
/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

//
// Glove80 key positions index for positional hold-tap
// - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
// - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
//
// |------------------------|------------------------|
// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
// |                        |                        |
// |  0  1  2  3  4         |          5  6  7  8  9 |
// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
// | 64 65 66 67 68         |         75 76 77 78 79 |
// |                69 52   |   57 74                |
// |                 70 53  |  56 73                 |
// |                  71 54 | 55 72                  |
// |------------------------|------------------------|
//



#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Custom 0
#define LAYER_Customalt 1
#define LAYER_Norman 2
#define LAYER_Normanv2 3
#define LAYER_Normanv3 4
#define LAYER_Normanv4 5
#define LAYER_Lower 6
#define LAYER_Magic 7

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
	behaviors {
		// For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
		// Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
		lower: lower {
			compatible = "zmk,behavior-tap-dance";
			label = "LAYER_TAP_DANCE";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
		};
	};
};

/ {
	macros {
		rgb_ug_status_macro: rgb_ug_status_macro {
			label = "RGB_UG_STATUS";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&rgb_ug RGB_STATUS>;
		};
	};
};


/ {
#ifdef BT_DISC_CMD
	behaviors {
		bt_0: bt_0 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_0";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_0>, <&bt BT_DISC 0>;
		};
		bt_1: bt_1 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_1";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_1>, <&bt BT_DISC 1>;
		};
		bt_2: bt_2 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_2";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_2>, <&bt BT_DISC 2>;
		};
		bt_3: bt_3 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_3";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_3>, <&bt BT_DISC 3>;
		};
	};
	macros {
		bt_select_0: bt_select_0 {
			label = "BT_SELECT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 0>;
		};
		bt_select_1: bt_select_1 {
			label = "BT_SELECT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 1>;
		};
		bt_select_2: bt_select_2 {
			label = "BT_SELECT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 2>;
		};
		bt_select_3: bt_select_3 {
			label = "BT_SELECT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 3>;
		};
	};
#else
	macros {
		bt_0: bt_0 {
			label = "BT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 0>;
		};
		bt_1: bt_1 {
			label = "BT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 1>;
		};
		bt_2: bt_2 {
			label = "BT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 2>;
		};
		bt_3: bt_3 {
			label = "BT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 3>;
		};
	};
#endif
};

&mt { flavor = "tap-preferred"; tapping-term-ms = <220>; quick-tap-ms = <220>; hold-trigger-key-positions = <0>; };

/ {
	behaviors {
		magic: magic {
			compatible = "zmk,behavior-hold-tap";
			label = "MAGIC_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			bindings = <&mo>, <&rgb_ug_status_macro>;
		};
	hml: hml { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <350>; bindings = <&kp>, <&kp>; hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>; hold-trigger-on-release; };
	hmr: hmr { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <350>; bindings = <&kp>, <&kp>; hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>; hold-trigger-on-release; };
		
	hml_repeat: hml_repeat { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <350>; bindings = <&kp>, <&key_repeat>; hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>; hold-trigger-on-release; };
	hmr_lpar_lt: hmr_lpar_lt { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <350>; bindings = <&kp>, <&lpar_lt>; hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>; hold-trigger-on-release; };
	hmr_rpar_gt: hmr_rpar_gt { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <350>; bindings = <&kp>, <&rpar_gt>; hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>; hold-trigger-on-release; };
		
	mt_home: mt_home { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&masked_home>, <&kp>; flavor = "tap-preferred"; tapping-term-ms = <220>; quick-tap-ms = <220>; hold-trigger-key-positions = <0>; };
	mt_end: mt_end { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&masked_end>, <&kp>; flavor = "tap-preferred"; tapping-term-ms = <220>; quick-tap-ms = <220>; hold-trigger-key-positions = <0>; };
	masked_home: masked_home { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp HOME>, <&kp HOME>; mods = <(MOD_LCTL)>; };
	masked_end: masked_end { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp END>, <&kp END>; mods = <(MOD_LCTL)>; };
		
	smart_shft: smart_shft { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&sk LSHFT>, <&caps_word>; mods = <(MOD_LSFT)>; };
		
		// &caps_word {
		// /delete-property/ ignore-modifiers;
		// };
		
	smart_num: smart_num { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <200>; quick-tap-ms = <175>; bindings = <&mo>, <&num_dance>; };
		
	num_dance: num_dance { compatible = "zmk,behavior-tap-dance"; #binding-cells = <0>; tapping-term-ms = <200>; bindings = <&num_word>, <&sl Layer_NUM>; };
		
		// &num_word {
		// layers = <Layer_NUM>;
		// continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
		// };
		
	smart_mouse: smart_mouse { compatible = "zmk,behavior-tri-state"; #binding-cells = <0>; bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>; ignored-key-positions = <26 24 28 29 30 31 32 41 42 43 59 60 61 72 73>; ignored-layers = <MOUSE>; };
	swapper: swapper { compatible = "zmk,behavior-tri-state"; #binding-cells = <0>; bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>; ignored-key-positions = <25>; };
		
	sls: sls { compatible = "zmk,behavior-sticky-key"; #binding-cells = <1>; release-after-ms = <1000>; bindings = <&uc_shift>; ignore-modifiers; };
		
	uc_shift: uc_shift { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <0>; tap-ms = <1>; bindings = <&macro_press &mo UC &kp LSHFT> , <&macro_pause_for_release> , <&macro_release &mo UC &kp LSHFT>; };
	comma_morph: comma_morph { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; mods = <(MOD_LSFT|MOD_RSFT)>; bindings = <&kp COMMA>, <&comma_inner_morph>; };
	comma_inner_morph: comma_inner_morph { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; mods = <(MOD_LCTL|MOD_RCTL)>; bindings = <&kp SEMICOLON>, <&kp LESS_THAN>; };
		
	dot_morph: dot_morph { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; mods = <(MOD_LSFT|MOD_RSFT)>; bindings = <&kp DOT>, <&dot_inner_morph>; };
	dot_inner_morph: dot_inner_morph { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; mods = <(MOD_LCTL|MOD_RCTL)>; bindings = <&kp COLON>, <&kp GREATER_THAN>; };
		
	qexcl: qexcl { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; mods = <(MOD_LSFT|MOD_RSFT)>; bindings = <&kp QMARK>, <&kp EXCL>; };
	quote: quote { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; mods = <(MOD_LSFT|MOD_RSFT)>; bindings = <&kp LS(SINGLE_QUOTE)>, <&kp SINGLE_QUOTE>; };
		
	lpar_lt: lpar_lt { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; mods = <(MOD_LSFT|MOD_RSFT)>; bindings = <&kp LPAR>, <&kp LT>; };
	rpar_gt: rpar_gt { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; mods = <(MOD_LSFT|MOD_RSFT)>; bindings = <&kp RPAR>, <&kp GT>; };
		
	lt_spc: lt_spc { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <200>; quick-tap-ms = <175>; bindings = <&mo>, <&spc_morph>; };
		
	spc_morph: spc_morph { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; mods = <(MOD_LSFT|MOD_RSFT)>; bindings = <&kp SPACE>, <&dot_spc>; };
	dot_spc: dot_spc { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <0>; tap-ms = <5>; bindings = <&kp DOT &kp SPACE &sk LSHFT>; };
		
	bs_del: bs_del { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp BSPC>, <&kp DEL>; mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>; };
		
	copy_cut: copy_cut { compatible = "zmk,behavior-tap-dance"; #binding-cells = <0>; tapping-term-ms = <200>; bindings = <&kp LC(INS)>, <&kp LC(X)>; };
		
	win_sleep: win_sleep { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <500>; tap-ms = <50>; bindings = <&kp LG(X) &kp U &kp S>; };
		
	func_arrow: function_arrow { compatible = "zmk,behavior-macro"; label = "FUNCTION_ARROW"; #binding-cells = <0>; tap-ms = <0>; wait-ms = <0>; bindings = <&macro_tap &kp MINUS &kp GREATER_THAN>;};
		
	and_short: and_short{ compatible = "zmk,behavior-macro"; label = "AND_SHORT"; #binding-cells = <0>; tap-ms = <0>; wait-ms = <0>; bindings = <&macro_tap &kp AMPERSAND &kp AMPERSAND> ;};
		
	or_short: or_short{  compatible = "zmk,behavior-macro";  label = "OR_SHORT";  #binding-cells = <0>;  tap-ms = <0>;  wait-ms = <0>;  bindings  = <&macro_tap &kp PIPE &kp PIPE>  ;};
		
	neq_short: neq_short{compatible = "zmk,behavior-macro";label = "NEQ_SHORT";#binding-cells = <0>;tap-ms = <0>;wait-ms = <0>;bindings= <&macro_tap &kp EXCLAMATION &kp EQUAL>;};
		
	eq_short: eq_short{compatible = "zmk,behavior-macro";label = "EQ_SHORT";#binding-cells = <0>;tap-ms = <0>;wait-ms = <0>;bindings= <&macro_tap &kp EQUAL &kp EQUAL>;};
		
	};
};


/* Custom Defined Behaviors */
/ {
	behaviors {
		
	};
};

/* Automatically generated macro definitions */
/ {
	macros {
		
	};
};

/* Automatically generated keymap */
/ {
	keymap {
		compatible = "zmk,keymap";
		
		
		layer_Custom {
			bindings = <
			&kp F1  &kp F2     &kp F3     &kp F4  &kp F5                                                                                                   &kp F6     &kp F7     &kp F8  &kp F9    &kp F10
			&kp ESC  &kp N1  &kp SPACE      &kp K  &kp N4     &kp N5                                                                                &kp N6  &kp N7  &kp SPACE  &kp SPACE  &kp N0      &none
			&kp RET   &none      &kp G      &kp H   &kp C  &kp SPACE                                                                             &kp SPACE   &kp V      &kp L      &kp B   &none      &none
			&kp LSHFT   &kp O      &kp A      &kp I   &kp N  &kp SPACE                                                                             &kp SPACE   &kp T      &kp R      &kp E   &kp S  &kp RSHFT
			&none   &kp J      &kp F      &kp U   &kp P  &kp SPACE      &none      &none    &lower  &magic LAYER_Magic 0      &none     &none  &kp SPACE   &kp M      &kp D      &kp Y   &kp X      &none
			&none   &none  &kp SPACE  &kp SPACE   &kp Q             &kp SPACE  &kp LCTRL  &kp LALT              &kp RALT  &kp RCTRL  &kp BSPC              &kp W  &kp SPACE  &kp SPACE   &kp Z      &none
			>;
		};
		
		layer_Customalt {
			bindings = <
			&kp F1  &kp F2     &kp F3  &kp F4  &kp F5                                                                                                   &kp F6  &kp F7     &kp F8  &kp F9    &kp F10
			&kp ESC  &kp N1  &kp SPACE   &kp K  &kp N4     &kp N5                                                                                &kp N6  &kp N7   &kp K  &kp SPACE  &kp N0      &none
			&kp RET   &none      &kp G   &kp H   &kp C  &kp SPACE                                                                             &kp SPACE   &kp V   &kp L      &kp B   &none      &none
			&kp LSHFT   &kp O      &kp A   &kp I   &kp N  &kp SPACE                                                                             &kp SPACE   &kp T   &kp R      &kp E   &kp S  &kp RSHFT
			&none   &kp J      &kp F   &kp U   &kp P  &kp SPACE     &none      &none    &lower  &magic LAYER_Magic 0      &none      &none  &kp SPACE   &kp M   &kp D      &kp Y   &kp X      &none
			&none   &none      &none   &none   &kp Q             &kp BSPC  &kp LCTRL  &kp LALT              &kp RALT  &kp RCTRL  &kp SPACE              &kp W   &none      &none   &kp Z      &none
			>;
		};
		
		layer_Norman {
			bindings = <
			&kp F1  &kp F2  &kp F3  &kp F4  &kp F5                                                                                             &kp F6  &kp F7  &kp F8  &kp F9    &kp F10
			&kp ESC  &kp N1   &none   &kp Z  &kp N4  &kp N5                                                                             &kp N6  &kp N7   &kp J   &none  &kp N0      &none
			&kp RET   &none   &kp C   &kp F   &kp M   &none                                                                              &none   &kp H   &kp P   &kp G   &none      &none
			&kp LSHFT   &kp A   &kp S   &kp E   &kp T   &none                                                                              &none   &kp I   &kp N   &kp O   &kp R  &kp RSHFT
			&none   &kp K   &kp V   &kp Y   &kp D   &none      &none      &none    &lower  &magic LAYER_Magic 0      &none     &none   &none   &kp U   &kp L   &kp B   &kp X      &none
			&none   &kp Z   &none   &none   &kp W          &kp SPACE  &kp LCTRL  &kp LALT              &kp RALT  &kp RCTRL  &kp BSPC           &none   &kp Q   &none   &kp J      &none
			>;
		};
		
		layer_Normanv2 {
			bindings = <
			&kp F1  &kp F2  &kp F3  &kp F4  &kp F5                                                                                             &kp F6  &kp F7  &kp F8  &kp F9    &kp F10
			&kp ESC  &kp N1   &none   &kp Z  &kp N4  &kp N5                                                                             &kp N6  &kp N7   &kp J   &none  &kp N0      &none
			&kp RET   &none   &kp C   &kp U   &kp M   &none                                                                              &none   &kp V   &kp P   &kp Y   &none      &none
			&kp LSHFT   &kp A   &kp S   &kp E   &kp T   &none                                                                              &none   &kp N   &kp I   &kp O   &kp R  &kp RSHFT
			&none   &kp K   &kp G   &kp F   &kp D   &none      &none      &none    &lower  &magic LAYER_Magic 0      &none     &none   &none   &kp L   &kp H   &kp B   &kp X      &none
			&none   &kp Z   &none   &none   &kp W          &kp SPACE  &kp LCTRL  &kp LALT              &kp RALT  &kp RCTRL  &kp BSPC           &none   &kp Q   &none   &kp J      &none
			>;
		};
		
		layer_Normanv3 {
			bindings = <
			&kp F1  &kp F2  &kp F3  &kp F4  &kp F5                                                                                             &kp F6  &kp F7  &kp F8  &kp F9    &kp F10
			&kp ESC  &kp N1   &none   &kp Z  &kp N4  &kp N5                                                                             &kp N6  &kp N7   &kp J   &none  &kp N0      &none
			&kp RET   &none   &kp C   &kp F   &kp M   &none                                                                              &none   &kp B   &kp L   &kp U   &none      &none
			&kp LSHFT   &kp A   &kp S   &kp E   &kp T   &none                                                                              &none   &kp O   &kp N   &kp I   &kp R  &kp RSHFT
			&none   &kp K   &kp V   &kp Y   &kp D   &none      &none      &none    &lower  &magic LAYER_Magic 0      &none     &none   &none   &kp G   &kp P   &kp H   &kp X      &none
			&none   &kp Z   &none   &none   &kp W          &kp SPACE  &kp LCTRL  &kp LALT              &kp RALT  &kp RCTRL  &kp BSPC           &none   &kp Q   &none   &kp J      &none
			>;
		};
		
		layer_Normanv4 {
			bindings = <
			&kp F1  &kp F2  &kp F3  &kp F4  &kp F5                                                                                             &kp F6  &kp F7  &kp F8  &kp F9    &kp F10
			&kp ESC  &kp N1   &none   &kp Z  &kp N4  &kp N5                                                                             &kp N6  &kp N7   &kp J   &none  &kp N0      &none
			&kp RET   &none   &kp C   &kp F   &kp M   &none                                                                              &none   &kp G   &kp L   &kp H   &none      &none
			&kp LSHFT   &kp A   &kp S   &kp E   &kp T   &none                                                                              &none   &kp O   &kp N   &kp I   &kp R  &kp RSHFT
			&none   &kp K   &kp V   &kp Y   &kp D   &none      &none      &none    &lower  &magic LAYER_Magic 0      &none     &none   &none   &kp U   &kp P   &kp B   &kp X      &none
			&none   &kp Z   &none   &none   &kp W          &kp SPACE  &kp LCTRL  &kp LALT              &kp RALT  &kp RCTRL  &kp BSPC           &none   &kp Q   &none   &kp J      &none
			>;
		};
		
		layer_Lower {
			bindings = <
			&none   &none       &none      &none      &none                                                                                &none     &none     &none      &none   &none
			&none   &none       &none      &none      &none      &none                                                           &none     &none     &none     &none      &none   &none
			&none   &none    &kp PLUS     &kp N1     &kp N0  &kp MINUS                                                           &none     &none     &none     &none      &none   &none
			&none  &kp AT    &kp STAR     &kp N2     &kp N3   &kp FSLH                                                       &kp EQUAL  &kp AMPS  &kp PIPE  &kp EXCL  &kp PRCNT   &none
			&none   &none    &kp HASH  &kp CARET   &kp DLLR      &none      &none   &none   &to 2   &none   &none     &none      &none    &kp N4    &kp N5    &kp N6      &none   &none
			&none   &none  &kp TILDE2  &kp GRAVE  &kp UNDER             &kp SPACE   &none   &none   &none   &none  &kp BSPC               &kp N7    &kp N8    &kp N9      &none   &none
			>;
		};
		
		layer_Magic {
			bindings = <
			&bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
			&to 0            &to 1            &to 2            &to 3            &to 4            &to 5                                                         &to 6   &to 7   &to 8   &none   &none           &none
			&none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
			&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
			&sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
			&none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
			>;
		};
		
	};
};