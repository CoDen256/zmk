/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define Layer_Main 0
#define Layer_NAV 1
#define Layer_FUN 2
#define Layer_NUM 3
#define Layer_Magic 4

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

	behaviors {
		bt_0: bt_0 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_0";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_0>, <&bt BT_DISC 0>;
		};

		bt_1: bt_1 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_1";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_1>, <&bt BT_DISC 1>;
		};

		bt_2: bt_2 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_2";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_2>, <&bt BT_DISC 2>;
		};

		bt_3: bt_3 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_3";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_3>, <&bt BT_DISC 3>;
		};
	};

	macros {
		bt_select_0: bt_select_0 {
			label = "BT_SELECT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_select_1: bt_select_1 {
			label = "BT_SELECT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_select_2: bt_select_2 {
			label = "BT_SELECT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_select_3: bt_select_3 {
			label = "BT_SELECT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #else

	macros {
		bt_0: bt_0 {
			label = "BT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_1: bt_1 {
			label = "BT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_2: bt_2 {
			label = "BT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_3: bt_3 {
			label = "BT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #endif
};

&sk {
	release-after-ms = <900>;// release after 0.6s
	quick-release;// no double capitalization when rolling keys
};

&sl {
	ignore-modifiers;// allow chording sticky mods & layers

release-after-ms = <5000>;};

&lt {
	flavor = "balanced";
	tapping-term-ms = <200>;
	quick-tap-ms = <175>;
};


/ {
	behaviors {
		magic: magic {
			compatible = "zmk,behavior-hold-tap";
			label = "MAGIC_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			bindings = <&mo>, <&rgb_ug_status_macro>;
		};

		// num_word: num_word {
		//     compatible = "zmk,behavior-num-word";
		//     #binding-cells = <0>;
		//     layers = <Layer_NUM>; // to be specified in user config using "&num_word { layers = <xx>; };"
		//     continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR EQUAL>;
		//     ignore-numbers;
		// };

		// num_dance: num_dance {
		//     compatible = "zmk,behavior-tap-dance";
		//     #binding-cells = <0>;
		//     tapping-term-ms = <200>;
		//     bindings = <&num_word>, <&sl Layer_NUM>;
		// };

		// smart_num: smart_num {
		//     compatible = "zmk,behavior-hold-tap";
		//     #binding-cells = <2>;
		//     flavor = "balanced";
		//     tapping-term-ms = <200>;
		//     quick-tap-ms = <175>;
		//     bindings = <&mo>, <&num_dance>;
		// };


		lm: lm {
    compatible = "zmk,behavior-macro-two-param";
    wait-ms = <0>;
    tap-ms = <0>;
    #binding-cells = <2>;
    bindings = <&macro_param_1to1>,<&macro_press>,<&mo MACRO_PLACEHOLDER &macro_param_2to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_2to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER &macro_param_1to1>,<&macro_release>,<&mo MACRO_PLACEHOLDER>;
};

		hml: hml {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <270>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hmr: hmr {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hml_repeat: hml_repeat {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&key_repeat>;

			hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hmr_lpar_lt: hmr_lpar_lt {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&lpar_lt>;

			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hmr_rpar_gt: hmr_rpar_gt {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&rpar_gt>;

			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		// &mt { flavor = "tap-preferred"; tapping-term-ms = <220>; quick-tap-ms = <220>; hold-trigger-key-positions = <0>; };

		mt_home: mt_home {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&masked_home>, <&kp>;

			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <220>;
			hold-trigger-key-positions = <0>;
		};

		mt_end: mt_end {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&masked_end>, <&kp>;

			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <220>;
			hold-trigger-key-positions = <0>;
		};

		masked_home: masked_home {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp HOME>, <&kp HOME>;

			mods = <(MOD_LCTL)>;
		};

		masked_end: masked_end {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp END>, <&kp END>;

			mods = <(MOD_LCTL)>;
		};

		smart_shft: smart_shft {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&sk LSHFT>, <&caps_word>;

			mods = <(MOD_LSFT)>;
		};

		// &caps_word {
		// /delete-property/ ignore-modifiers;
		// };
		// smart_num: smart_num { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <200>; quick-tap-ms = <175>; bindings = <&mo>, <&num_dance>; };
		// num_dance: num_dance { compatible = "zmk,behavior-tap-dance"; #binding-cells = <0>; tapping-term-ms = <200>; bindings = <&num_word>, <&sl Layer_NUM>; };
		// smart_mouse: smart_mouse { compatible = "zmk,behavior-tri-state"; #binding-cells = <0>; bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>; ignored-key-positions = <26 24 28 29 30 31 32 41 42 43 59 60 61 72 73>; ignored-layers = <MOUSE>; };

		swapper: swapper {
			compatible = "zmk,behavior-tri-state";
			#binding-cells = <0>;
			bindings = <&kp TAB>;
			ignored-key-positions = <25>;
		};

		// sls: sls { compatible = "zmk,behavior-sticky-key"; #binding-cells = <1>; release-after-ms = <1000>; bindings = <&uc_shift>; ignore-modifiers; };
		// uc_shift: uc_shift { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <0>; tap-ms = <1>; bindings = <&macro_press &mo UC &kp LSHFT> , <&macro_pause_for_release> , <&macro_release &mo UC &kp LSHFT>; };

		comma_morph: comma_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp COMMA>, <&kp SEMICOLON>;
		};

		comma_inner_morph: comma_inner_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LCTL|MOD_RCTL)>;
			bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
		};

		dot_morph: dot_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp DOT>, <&kp COLON>;
		};

		dot_inner_morph: dot_inner_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LCTL|MOD_RCTL)>;
			bindings = <&kp COLON>, <&kp GREATER_THAN>;
		};

		qexcl: qexcl {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp QMARK>, <&kp EXCL>;
		};

		quote: quote {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp LS(SINGLE_QUOTE)>, <&kp SINGLE_QUOTE>;
		};

		lpar_lt: lpar_lt {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp LPAR>, <&kp LT>;
		};

		rpar_gt: rpar_gt {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp RPAR>, <&kp GT>;
		};

		lt_spc: lt_spc {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <200>;
			quick-tap-ms = <175>;
			bindings = <&mo>, <&spc_morph>;
		};

		spc_morph: spc_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp SPACE>, <&dot_spc>;
		};

		dot_spc: dot_spc {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			tap-ms = <5>;
			bindings = <&kp DOT &kp SPACE &sk LSHFT>;
		};

		bs_del: bs_del {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp BSPC>, <&kp DEL>;

			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <MOD_RSFT>;
		};

		copy_cut: copy_cut {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LC(INS)>, <&kp LC(X)>;
		};

		win_sleep: win_sleep {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <500>;
			tap-ms = <50>;
			bindings = <&kp LG(X) &kp U &kp S>;
		};

		// Function arrow: ->

		func_arrow: function_arrow {
			compatible = "zmk,behavior-macro";
			label = "FUNCTION_ARROW";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp MINUS &kp LS(PERIOD)>;
		};

		and_short: and_short {
			compatible = "zmk,behavior-macro";
			label = "AND_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp LS(N7) &kp LS(N7)>;
		};

		or_short: or_short {
			compatible = "zmk,behavior-macro";
			label = "OR_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp LS(NON_US_BACKSLASH) &kp LS(NON_US_BACKSLASH)>;
		};

		neq_short: neq_short {
			compatible = "zmk,behavior-macro";
			label = "NEQ_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp RS(NUMBER_1) &kp EQUAL>;
		};

		eq_short: eq_short {
			compatible = "zmk,behavior-macro";
			label = "EQ_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp EQUAL &kp EQUAL>;
		};

		select_word: select_word {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&select_word_right>, <&select_word_left>;

			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		eq_morph: eq_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LCTL|MOD_RCTL)>;
			bindings = <&neq_morph>, <&eq_short>;

			label = "EQ_MORPH";
		};

		neq_morph: neq_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp EQUAL>, <&neq_short>;

			label = "NEQ_MORPH";
		};

		and_morph: and_morph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&and_short>, <&kp AMPERSAND>;
		label = "AND_MORPH";};

		or_morph: or_morph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&or_short>, <&kp PIPE>;
		label = "OR_MORPH";};

		grave_morpph: grave_morpph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&code_block>, <&kp GRAVE>;
		label = "GRAVE_MORPPH";};

		comment_morph: comment_morph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp HASH>, <&comment>;
		label = "COMMENT_MORPH";};

		caret_morph:caret_morph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp CARET>, <&kp TILDE>;
		label = "CARET_MORPH";};

		star_hash_morph: star_hash_morph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp ASTERISK>, <&kp HASH>;
		label = "STAR_HASH_MORPH";};hml_lt:hml_lt {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&mo>, <&kp>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LT";};hmr_lt:hmr_lt {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&mo>, <&kp>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LT";};hml_lswit:hml_lswit {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&lswitcher>, <&kp>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LSWIT";};hmr_lswit:hmr_lswit {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LSWIT";
         bindings = <&lswitcher>, <&kp>;};hml_lnav: hml_lnav {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LNAV";
         bindings = <&lnav>, <&kp>;};hmr_lnav: hmr_lnav {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LNAV";
         bindings = <&lnav>, <&kp>;};hml_lfun: hml_lfun {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LFUN";
         bindings = <&lfun>, <&kp>;};Aumlaut:Aumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&alower>, <&Aupper>;
         label = "AUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};Oumlaut:Oumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&olower>, <&Oupper>;
         label = "OUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};Uumlaut:Uumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&ulower>, <&Uupper>;
         label = "UUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};
/*<mods-start>*/

K_key:K_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp K>, <&K_sink_rshift>;
label = "K_KEY";
mods = <(MOD_RSFT)>;

};

K_sink_rshift:K_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F1)>, <&kp K>;
label = "K_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


G_key:G_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&lnav>, <&G_link_rshift>;
hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "G_KEY";};


G_link_lshift:G_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp G>, <&G_sink_lshift>;
label = "G_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

G_link_rshift:G_link_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&G_link_lshift>, <&G_sink_rshift>;
label = "G_LINK_RSHIFT";
mods = <(MOD_RSFT)>;

};

G_sink_lshift:G_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(X)>, <&kp G>;
label = "G_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

G_sink_rshift:G_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F2)>, <&kp G>;
label = "G_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


H_key:H_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&lswitcher>, <&H_link_rshift>;
hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "H_KEY";};


H_link_rshift:H_link_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp H>, <&H_sink_rshift>;
label = "H_LINK_RSHIFT";
mods = <(MOD_RSFT)>;

};

H_sink_rshift:H_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F3)>, <&kp H>;
label = "H_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


C_link_lshift:C_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp C>, <&C_sink_lshift>;
label = "C_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

C_link_rctrl:C_link_rctrl{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&C_link_lshift>, <&C_sink_rctrl>;
label = "C_LINK_RCTRL";
mods = <(MOD_RCTL)>;

};

C_key:C_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&C_link_rctrl>, <&C_sink_rshift>;
label = "C_KEY";
mods = <(MOD_RSFT)>;

};

C_sink_lshift:C_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(C)>, <&kp C>;
label = "C_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

C_sink_rctrl:C_sink_rctrl{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RC(F4)>, <&kp C>;
label = "C_SINK_RCTRL";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
};

C_sink_rshift:C_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F4)>, <&kp C>;
label = "C_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


W_link_lshift:W_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp W>, <&W_sink_lshift>;
label = "W_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

W_key:W_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&W_link_lshift>, <&W_sink_rshift>;
label = "W_KEY";
mods = <(MOD_RSFT)>;

};

W_sink_lshift:W_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(A)>, <&kp W>;
label = "W_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

W_sink_rshift:W_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F5)>, <&kp W>;
label = "W_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


O_key:O_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp O>, <&O_sink_rshift>;
label = "O_KEY";
mods = <(MOD_RSFT)>;

};

O_sink_rshift:O_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F6)>, <&kp O>;
label = "O_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


A_key:A_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&kp>, <&A_link_rshift>;
hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "A_KEY";};


A_link_lshift:A_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp A>, <&A_sink_lshift>;
label = "A_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

A_link_rctrl:A_link_rctrl{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&A_link_lshift>, <&A_sink_rctrl>;
label = "A_LINK_RCTRL";
mods = <(MOD_RCTL)>;

};

A_link_rshift:A_link_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&A_link_rctrl>, <&A_sink_rshift>;
label = "A_LINK_RSHIFT";
mods = <(MOD_RSFT)>;

};

A_sink_lshift:A_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(Z)>, <&kp A>;
label = "A_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

A_sink_rctrl:A_sink_rctrl{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RC(F7)>, <&kp A>;
label = "A_SINK_RCTRL";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
};

A_sink_rshift:A_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F7)>, <&kp A>;
label = "A_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


I_key:I_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&kp>, <&I_link_rshift>;
hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "I_KEY";};


I_link_rshift:I_link_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp I>, <&I_sink_rshift>;
label = "I_LINK_RSHIFT";
mods = <(MOD_RSFT)>;

};

I_sink_rshift:I_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F8)>, <&kp I>;
label = "I_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


N_key:N_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&kp>, <&N_link_rshift>;
hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "N_KEY";};


N_link_lshift:N_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp N>, <&N_sink_lshift>;
label = "N_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

N_link_rshift:N_link_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&N_link_lshift>, <&N_sink_rshift>;
label = "N_LINK_RSHIFT";
mods = <(MOD_RSFT)>;

};

N_sink_lshift:N_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(S)>, <&kp N>;
label = "N_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

N_sink_rshift:N_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F9)>, <&kp N>;
label = "N_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


J_key:J_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp J>, <&J_sink_rshift>;
label = "J_KEY";
mods = <(MOD_RSFT)>;

};

J_sink_rshift:J_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F10)>, <&kp J>;
label = "J_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


F_key:F_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&mo>, <&F_link_rshift>;
hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "F_KEY";};


F_link_lshift:F_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp F>, <&F_sink_lshift>;
label = "F_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

F_link_rshift:F_link_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&F_link_lshift>, <&F_sink_rshift>;
label = "F_LINK_RSHIFT";
mods = <(MOD_RSFT)>;

};

F_sink_lshift:F_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(F)>, <&kp F>;
label = "F_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

F_sink_rshift:F_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F11)>, <&kp F>;
label = "F_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


U_key:U_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&kp>, <&U_link_rshift>;
hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "U_KEY";};


U_link_rshift:U_link_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp U>, <&U_sink_rshift>;
label = "U_LINK_RSHIFT";
mods = <(MOD_RSFT)>;

};

U_sink_rshift:U_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F12)>, <&kp U>;
label = "U_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


P_link_lshift:P_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp P>, <&P_sink_lshift>;
label = "P_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

P_key:P_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&P_link_lshift>, <&P_sink_rshift>;
label = "P_KEY";
mods = <(MOD_RSFT)>;

};

P_sink_lshift:P_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(V)>, <&kp P>;
label = "P_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

P_sink_rshift:P_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RS(F13)>, <&kp P>;
label = "P_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


Q_link_lshift:Q_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp Q>, <&Q_sink_lshift>;
label = "Q_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

Q_key:Q_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&Q_link_lshift>, <&Q_sink_rshift>;
label = "Q_KEY";
mods = <(MOD_RSFT)>;

};

Q_sink_lshift:Q_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(Y)>, <&kp Q>;
label = "Q_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

Q_sink_rshift:Q_sink_rshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RC(CARET)>, <&kp Q>;
label = "Q_SINK_RSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
};


V_link_lshift:V_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp V>, <&V_sink_lshift>;
label = "V_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

V_key:V_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&V_link_lshift>, <&V_sink_lctrl>;
label = "V_KEY";
mods = <(MOD_LCTL)>;

};

V_sink_lshift:V_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(F14)>, <&kp V>;
label = "V_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

V_sink_lctrl:V_sink_lctrl{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(F14)>, <&kp V>;
label = "V_SINK_LCTRL";
mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


L_key:L_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp L>, <&L_sink_lshift>;
label = "L_KEY";
mods = <(MOD_LSFT)>;

};

L_sink_lshift:L_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(F15)>, <&kp L>;
label = "L_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


B_key:B_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&lnav>, <&B_link_lshift>;
hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "B_KEY";};


B_link_lshift:B_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp B>, <&B_sink_lshift>;
label = "B_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

B_sink_lshift:B_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(F16)>, <&kp B>;
label = "B_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


T_key:T_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&kp>, <&T_link_lshift>;
hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "T_KEY";};


T_link_lshift:T_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp T>, <&T_sink_lshift>;
label = "T_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

T_sink_lshift:T_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(F17)>, <&kp T>;
label = "T_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


R_key:R_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&kp>, <&R_link_lshift>;
hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "R_KEY";};


R_link_lshift:R_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp R>, <&R_sink_lshift>;
label = "R_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

R_sink_lshift:R_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(F18)>, <&kp R>;
label = "R_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


E_key:E_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&kp>, <&E_link_lshift>;
hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "E_KEY";};


E_link_lshift:E_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp E>, <&E_sink_lshift>;
label = "E_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

E_sink_lshift:E_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(F19)>, <&kp E>;
label = "E_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


S_link_lshift:S_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp S>, <&S_sink_lshift>;
label = "S_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

S_key:S_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&S_link_lshift>, <&S_sink_lctrl>;
label = "S_KEY";
mods = <(MOD_LCTL)>;

};

S_sink_lshift:S_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(F20)>, <&kp S>;
label = "S_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

S_sink_lctrl:S_sink_lctrl{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(F20)>, <&kp S>;
label = "S_SINK_LCTRL";
mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


M_key:M_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&mo>, <&M_link_lshift>;
hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "M_KEY";};


M_link_lshift:M_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp M>, <&M_sink_lshift>;
label = "M_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

M_sink_lshift:M_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(F21)>, <&kp M>;
label = "M_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


D_key:D_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&kp>, <&D_link_lshift>;
hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "D_KEY";};


D_link_lshift:D_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp D>, <&D_sink_lshift>;
label = "D_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

D_sink_lshift:D_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(F22)>, <&kp D>;
label = "D_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


Y_key:Y_key {
compatible = "zmk,behavior-hold-tap";
#binding-cells = <2>;
flavor = "balanced";
tapping-term-ms = <280>;
quick-tap-ms = <175>;
require-prior-idle-ms = <350>;
bindings = <&mo>, <&Y_link_lctrl>;
hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
hold-trigger-on-release;
label = "Y_KEY";};


Y_link_lshift:Y_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp Y>, <&Y_sink_lshift>;
label = "Y_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

Y_link_lctrl:Y_link_lctrl{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&Y_link_lshift>, <&Y_sink_lctrl>;
label = "Y_LINK_LCTRL";
mods = <(MOD_LCTL)>;

};

Y_sink_lshift:Y_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(F23)>, <&kp Y>;
label = "Y_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

Y_sink_lctrl:Y_sink_lctrl{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(F23)>, <&kp Y>;
label = "Y_SINK_LCTRL";
mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


X_link_lshift:X_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp X>, <&X_sink_lshift>;
label = "X_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

X_key:X_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&X_link_lshift>, <&X_sink_lctrl>;
label = "X_KEY";
mods = <(MOD_LCTL)>;

};

X_sink_lshift:X_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(F24)>, <&kp X>;
label = "X_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

X_sink_lctrl:X_sink_lctrl{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(F24)>, <&kp X>;
label = "X_SINK_LCTRL";
mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


Z_link_lshift:Z_link_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp Z>, <&Z_sink_lshift>;
label = "Z_LINK_LSHIFT";
mods = <(MOD_LSFT)>;

};

Z_key:Z_key{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&Z_link_lshift>, <&Z_sink_lctrl>;
label = "Z_KEY";
mods = <(MOD_LCTL)>;

};

Z_sink_lshift:Z_sink_lshift{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LS(TILDE)>, <&kp Z>;
label = "Z_SINK_LSHIFT";
mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};

Z_sink_lctrl:Z_sink_lctrl{
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LC(TILDE)>, <&kp Z>;
label = "Z_SINK_LCTRL";
mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
};


/*<mods-end>*/



		select_word_right: select_word_right {
			compatible = "zmk,behavior-macro";
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
		};

		select_word_left: select_word_left {
			compatible = "zmk,behavior-macro";
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
		};

		code_block: code_block {
			compatible = "zmk,behavior-macro";

			label = "CODE_BLOCK";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
		bindings = <&macro_tap>,<&kp GRAVE &kp GRAVE &kp GRAVE>;};comment: comment {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp SLASH &kp SLASH>;
		label = "COMMENT";};

		duplicate_line: duplicate_line {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp RIGHT &kp ENTER &kp LC(V)>;
		label = "DUPLICATE_LINE";};

		kp_to:kp_to {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;
		label = "KP_TO";};

		kp_tog:kp_tog {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &tog MACRO_PLACEHOLDER>;
		label = "KP_TOG";};

		kp_sl: kp_sl {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>;
		label = "KP_SL";};

		select_line: select_line {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp HOME &kp LS(END)>;
		label = "SELECT_LINE";};

		delete_word: delete_word {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&select_word &kp BACKSPACE>;
		label = "DELETE_WORD";};

		delete_line: delete_line {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&select_line &kp BACKSPACE &kp BACKSPACE>;
		label = "DELETE_LINE";};

		copy_line: copy_line {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp LC(RIGHT)>;
		label = "COPY_LINE";};

		trans_tog: trans_tog {
			compatible = "zmk,behavior-macro-one-param";

			#binding-cells = <1>;
			bindings = <&trans &macro_param_1to1 &tog MACRO_PLACEHOLDER>;
		label = "TRANS_TOG";};

		trans_to: trans_to {
			compatible = "zmk,behavior-macro-one-param";

			#binding-cells = <1>;
			bindings = <&trans &macro_param_1to1 &to MACRO_PLACEHOLDER>;
		};cut_line: cut_line {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&select_line &kp K_CUT &kp DELETE>;
         label = "CUT_LINE";};move_down: move_down {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&cut_line &kp DOWN &kp K_PASTE>;
         label = "MOVE_DOWN";};move_up: move_up {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&cut_line &kp UP_ARROW &kp K_PASTE>;
         label = "MOVE_UP";};

         lnav: lnav {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 4 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 4>,<&macro_press>;
         label = "LNAV";};lfun: lfun {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 4 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 4>,<&macro_press>;
         label = "LFUN";};lswitcher: lswitcher {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 6 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 6>,<&macro_press>;
         label = "LSWITCHER";};alower:alower {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_3 &kp KP_N2>,<&macro_release>,<&kp LALT>;
         label = "Alower";};Aupper:Aupper {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_4 &kp KP_NUMBER_2>,<&macro_release>,<&kp LALT>;
         label = "Aupper";};olower:olower {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_4 &kp KP_NUMBER_8>,<&macro_release>,<&kp LALT>;
         label = "OLOWER";};Oupper:Oupper {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_5 &kp KP_NUMBER_3>,<&macro_release>,<&kp LALT>;
         label = "OUPPER";};ulower:ulower {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_2 &kp KP_NUMBER_9>,<&macro_release>,<&kp LALT>;
         label = "ULOWER";};Uupper:Uupper {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_5 &kp KP_NUMBER_4>,<&macro_release>,<&kp LALT>;
         label = "UUPPER";};eszet:eszet {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_N2 &kp KP_NUMBER_3>,<&macro_release>,<&kp LALT>;
         label = "eszet";};i_ukr: i_ukr {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_3 &kp KP_N2>,<&macro_release>,<&kp LALT>;
         label = "I_UKR";};ii_ukr: ii_ukr {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_3 &kp KP_N2>,<&macro_release>,<&kp LALT>;
         label = "II_UKR";};paren: paren {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
         label = "PAREN";};brackets: brackets {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
         label = "BRACKETS";};curly: curly {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_ARROW>;
         label = "CURLY";};angle: angle {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp LESS_THAN &kp GREATER_THAN &kp LEFT_ARROW>;
         label = "ANGLE";};backslash: backslash {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp BACKSLASH &kp BACKSLASH>;
         label = "BACKSLASH";};slash: slash {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp SLASH &kp SLASH>;
         label = "SLASH";};mleft: mleft {
        compatible = "zmk,behavior-macro";
      
         #binding-cells = <0>;
         bindings = <&kp F13>;
         label = "MLEFT";};mright: mright {
        compatible = "zmk,behavior-macro";
      
         #binding-cells = <0>;
         bindings = <&kp F14>;
         label = "MRIGHT";};mup: mup {
        compatible = "zmk,behavior-macro";
      
         #binding-cells = <0>;
         bindings = <&kp F15>;
         label = "MUP";};mdown: mdown {
        compatible = "zmk,behavior-macro";
      
         #binding-cells = <0>;
         bindings = <&kp F16>;
         label = "MDOWN";};mlclick: mlclick {
        compatible = "zmk,behavior-macro";
      
         #binding-cells = <0>;
         bindings = <&kp F17>;
         label = "MLCLICK";};mrclick: mrclick {
        compatible = "zmk,behavior-macro";
      
         #binding-cells = <0>;
         bindings = <&kp F18>;
         label = "MRCLICK";};mscrollup: mscrollup {
        compatible = "zmk,behavior-macro";
      
         #binding-cells = <0>;
         bindings = <&kp F19>;
         label = "MSCROLLUP";};mscrolldown: mscrolldown {
        compatible = "zmk,behavior-macro";
      
         #binding-cells = <0>;
         bindings = <&kp F20>;
         label = "MSCROLLDOWN";};
	};
	//
	// Glove80 key positions index for positional hold-tap
	// - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
	// - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
	//
	// |------------------------|------------------------|
	// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
	// |                        |                        |
	// |  0  1  2  3  4         |          5  6  7  8  9 |
	// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
	// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
	// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
	// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
	// | 64 65 66 67 68         |         75 76 77 78 79 |
	// |                69 52   |   57 74                |
	// |                 70 53  |  56 73                 |
	// |                  71 54 | 55 72                  |
	// |------------------------|------------------------|
	//

	combos {
		compatible = "zmk,combos";

		// combo_mouse { timeout-ms = <18>; bindings = <&smart_mouse>; key-possitions = <24 26>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };


		RT {
			bindings = <&kp COMMA>;
			key-positions = <41 42>;
		
         timeout-ms = <20>;

         };
		RE {
			bindings = <&kp SEMI>;
			key-positions = <42 43>;

         timeout-ms = <20>;
        };
		IN {
			bindings = <&kp DOT>;
		 timeout-ms = <20>;
                	key-positions = <37 38>;
		};

		AI {
			bindings = <&kp COLON>;
			key-positions = <37 36>;
 timeout-ms = <20>;

		};

		MD {
			bindings = <&curly>;
		 timeout-ms = <20>;
                	key-positions = <59 60>;
		};

		DY {
			bindings = <&brackets>;
			key-positions = <60 61>; timeout-ms = <20>;

		};

		PU {
			bindings = <&paren>;
			key-positions = <49 50>; timeout-ms = <20>;

		};

		FU {
         bindings = <&angle>;
         key-positions = <49 48>; timeout-ms = <20>;
                                         };

		LV {
         bindings = <&kp SINGLE_QUOTE>;
         key-positions = <30 29>; timeout-ms = <20>;
                                         };CH {
         bindings = <&or_short>;
         key-positions = <25 26>; timeout-ms = <20>;
                                         };
		BL {
         bindings = <&kp DOUBLE_QUOTES>;
         key-positions = <31 30>; timeout-ms = <20>;
                                         };
		HG {
			bindings = <&and_short>;
			key-positions = <25 24>; timeout-ms = <20>;

		};

		MR {
			bindings = <&func_arrow>;
			key-positions = <59 42>; timeout-ms = <20>;

		};

		TD {
			bindings = <&none>;
			key-positions = <41 60>; timeout-ms = <20>;

		};

		RY {
			bindings = <&kp AT>;
			key-positions = <42 61>; timeout-ms = <20>;

		};

		DE {
			bindings = <&none>;
			key-positions = <60 43>; timeout-ms = <20>;

		};


		TE {
			bindings = <&kp QUESTION>;
		key-positions = <41 43>; timeout-ms = <20>;
                                        };TL {
			bindings = <&kp GRAVE>;
		key-positions = <41 30>; timeout-ms = <20>;
                                        };EL {
			bindings = <&code_block>;
		key-positions = <30 43>; timeout-ms = <20>;
                                        };VR {
			bindings = <&kp CARET>;
		key-positions = <29 42>; timeout-ms = <20>;
                                        };LE {
			bindings = <&kp DOLLAR>;
		key-positions = <42 31>; timeout-ms = <20>;
                                        };IP {
			bindings = <&kp EQUAL>;
		key-positions = <37 50>; timeout-ms = <20>;
                                        };UN {
			bindings = <&kp ASTERISK>;
		key-positions = <38 49>; timeout-ms = <20>;
                                        };UA {
			bindings = <&kp PLUS>;
		key-positions = <49 36>; timeout-ms = <20>;
                                        };FI {
			bindings = <&neq_short>;
		key-positions = <48 37>; timeout-ms = <20>;
                                        };AN {
			bindings = <&kp EXCL>;
		key-positions = <36 38>; timeout-ms = <20>;
                                        };NH {
			bindings = <&kp MINUS>;
		key-positions = <38 25>; timeout-ms = <20>;
                                        };IC {
			bindings = <&eq_short>;
		key-positions = <37 26>; timeout-ms = <20>;
                                        };

		GI {
			bindings = <&backslash>;
		key-positions = <37 24>; timeout-ms = <20>;
                                        };

		AH {
			bindings = <&kp SLASH>;
		key-positions = <36 25>; timeout-ms = <20>;
                                        };

		MY {
			bindings = <&none>;
		key-positions = <59 61>; timeout-ms = <20>;
                                        };

		FP {
			bindings = <&kp UNDERSCORE>; timeout-ms = <20>;

		key-positions = <48 50>;};

		VB {
			bindings = <&kp TILDE>; timeout-ms = <20>;

		key-positions = <29 31>;};

		CG {
			bindings = <&kp HASH>; timeout-ms = <20>;

		key-positions = <26 24>;};

		VE {
			bindings = <&none>; timeout-ms = <20>;

		key-positions = <29 43>;};

		TB {
			bindings = <&none>; timeout-ms = <20>;

		key-positions = <31 41>;};YT {
			bindings = <&none>; timeout-ms = <20>;

		key-positions = <41 61>;};ME {
			bindings = <&none>; timeout-ms = <20>;

		key-positions = <59 43>;};




		NG {
			bindings = <&kp PERCENT>; timeout-ms = <20>;

		key-positions = <38 24>;};

		AC {
			bindings = <&slash>; timeout-ms = <20>;

		key-positions = <36 26>;};


		PA {
			bindings = <&none>; timeout-ms = <20>;

		key-positions = <50 36>;};

		FN {
			bindings = <&none>; timeout-ms = <20>;

		key-positions = <48 38>;};
		MRIGHT {
			bindings = <&delete_word>;
		key-positions = <59 76>;};

		DLEFT {
			bindings = <&select_word_right>;
		key-positions = <75 60>;};

		IRIGHT {
			bindings = <&select_word_left>;
		key-positions = <49 68>;};

		PLEFT {
			bindings = <&select_word>;
		key-positions = <67 50>;};

		R_MIDDLEL {
			bindings = <&none>;
		key-positions = <76 75>;};

		R_MIDDLER {
			bindings = <&none>;
		key-positions = <77 76>;};

		L_MIDDLER {
			bindings = <&none>;
		key-positions = <68 67>;};

		L_MIDDLEL {
			bindings = <&none>;
		key-positions = <67 66>;};NT {
         bindings = <&none>;
         key-positions = <41 38>;};IR {
         bindings = <&none>;
         key-positions = <37 42>;};PM {
         bindings = <&select_line>;
         key-positions = <50 59>;};UD {
         bindings = <&delete_line>;
         key-positions = <49 60>;};FY {
         bindings = <&duplicate_line>;
         key-positions = <48 61>;};CK {
         bindings = <&none>;
         key-positions = <26 13>;};V8 {
         bindings = <&none>;
         key-positions = <29 18>;};



		//  combo_grk { timeout-ms = <18>; bindings = <&sl UC>; key-fpositions = <29 31>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };
		// combo_cpgrk { timeout-ms = <18>; bindings = <&sls 0>; keyfdgdf-positions = <29 30 31>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };
	};
};

/* Automatically generated macro definitions */

/ {
	macros {
	};
};

/* Automatically generated keymap */

/ {

behaviors {};


behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};
keymap {
		compatible = "zmk,keymap";

		main {
			bindings = <
&kp F1             &kp F2                     &kp F3             &kp F4                         &kp F5                                                                                                        &kp F6          &kp F7                             &kp F8              &kp F9                     &kp F10
&kp C_VOLUME_DOWN  &kp C_VOLUME_UP            &kp ESCAPE         &K_key                         &kp ESCAPE      &kp LG(F10)                                                                      &kp LG(F11)  &kp LG(F12)     &none                              &none               &none                      &none
&kp C_MUTE         &kp CARET                  &G_key LCTRL 0     &H_key LEFT_ALT 0              &C_key          &W_key                                                                           &none        &V_key          &L_key                             &B_key RIGHT_ALT 0  &kp DOLLAR                 &none
&kp LEFT_WIN       &O_key   &A_key LEFT_ALT 0  &I_key LSHFT 0                 &N_key LCTRL 0  &kp F9                                                                           &none        &T_key RCTRL 0  &R_key RSHFT 0                     &E_key RIGHT_ALT 0  &S_key  &kp RMETA
&mo 5              &J_key                     &F_key 4 0         &U_key LS(LA(LGUI)) 0   &P_key          &none        &kp BACKSPACE  &mo 3  &magic 9 0    &magic 9 0  &tog 3  &kp DELETE  &none        &M_key 3 0      &D_key RS(RA(LEFT_GUI)) 0   &Y_key 4 0          &X_key                     &none
&kp LG(L)          &none                      &Q_key             &kp TAB                        &kp ENTER                    &kp SPACE      &sl 1  &none         &none       &tog 8  &sl 1                    &kp ENTER       &kp TAB                            &Z_key              &none                      &none
>;};

		main_upper {
			bindings = <
&trans  &trans     &trans     &trans     &trans                                                                          &trans     &trans     &trans     &trans     &trans
&trans  &trans     &trans     &kp LS(K)  &trans     &trans                                                       &trans  &trans     &trans     &trans     &trans     &trans
&trans  &trans     &kp LS(G)  &kp LS(H)  &kp LS(C)  &kp LS(W)                                                    &trans  &kp LS(V)  &kp LS(L)  &kp LS(B)  &trans     &trans
&trans  &kp LS(O)  &kp LS(A)  &kp LS(I)  &kp LS(N)  &trans                                                       &trans  &kp LS(T)  &kp LS(R)  &kp LS(E)  &kp LS(S)  &trans
&trans  &kp LS(J)  &kp LS(F)  &kp LS(U)  &kp LS(P)  &trans     &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp LS(M)  &kp LS(D)  &kp LS(Y)  &kp LS(X)  &trans
&trans  &trans     &kp LS(Q)  &trans     &trans                &trans  &trans  &trans    &trans  &trans  &trans          &trans     &trans     &kp LS(Z)  &trans     &trans
>;};
de {
         bindings = <
&trans  &trans    &trans    &trans    &trans                                                                       &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans    &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans    &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &Oumlaut  &Aumlaut  &trans    &trans  &trans                                                       &trans  &trans  &trans  &trans  &eszet  &trans
&trans  &trans    &trans    &Uumlaut  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans    &trans          &trans  &trans  &trans    &trans  &trans  &sk LSHFT          &trans  &trans  &trans  &trans  &trans
>;};
num {
         bindings = <
&trans  &trans  &trans        &trans        &trans                                                                          &trans           &trans                &trans                           &trans   &trans
&trans  &trans  &none         &none         &trans        &trans                                                    &trans  &trans           &trans                &trans                           &trans   &trans
&trans  &trans  &kp N7        &kp N8        &kp N9        &trans                                                    &trans  &kp PERCENT      &kp ASTERISK          &kp SLASH                        &none    &trans
&trans  &kp N0  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans                                                    &trans  &hmr LCTRL LPAR  &hmr LSHIFT KP_EQUAL  &hmr LEFT_ALT RIGHT_PARENTHESIS  &kp DOT  &trans
&trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp PLUS         &kp MINUS             &kp COMMA                        &trans   &trans
&trans  &trans  &trans        &trans        &trans                &trans  &trans  &trans    &trans  &trans  &trans          &trans           &trans                &trans                           &trans   &trans
>;};
nav {
			bindings = <
&trans  &trans          &trans  &trans          &trans                                                                             &trans     &trans           &trans  &trans  &trans
&trans  &trans          &trans  &kp BACKSPACE   &kp DELETE       &trans                                                    &trans  &trans     &trans           &trans  &trans  &trans
&trans  &trans          &none   &kp HOME        &kp END          &trans                                                    &trans  &kp LCTRL  &kp RIGHT_SHIFT  &none   &none   &trans
&trans  &kp LEFT_SHIFT  &none   &kp LEFT_ARROW  &kp RIGHT_ARROW  &trans                                                    &trans  &kp RCTRL  &kp LEFT_SHIFT   &none   &none   &trans
&trans  &kp LCTRL       &none   &kp UP_ARROW    &kp DOWN         &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp LCTRL  &kp RIGHT_SHIFT  &none   &none   &trans
&trans  &trans          &trans  &kp PG_UP       &kp PAGE_DOWN            &trans  &trans  &trans    &trans  &trans  &trans          &none      &none            &none   &trans  &trans
>;};
fun {
			bindings = <
&trans  &trans  &trans     &trans     &trans                                                                                                         &trans     &trans     &trans         &trans  &trans
&trans  &trans  &trans     &trans     &trans  &trans                                                                                         &trans  &kp F10    &kp F11    &kp F12        &trans  &trans
&none   &none   &kp LC(Y)  &kp LC(Z)  &none   &none                                                                                          &trans  &kp F7     &kp F8     &kp F9         &trans  &trans
&none   &none   &kp LC(X)  &kp LC(V)  &none   &none                                                                                          &trans  &kp LCTRL  &kp RSHFT  &kp RIGHT_ALT  &trans  &trans
&trans  &none   &kp LC(C)  &kp LC(S)  &none   &none   &kp LC(LA(DELETE))  &kp LG(LC(LS(A)))  &kp LG(LS(LC(Q)))    &trans  &trans  &kp LG(X)  &trans  &kp F1     &kp F2     &kp F3         &none   &trans
&trans  &none   &kp LC(F)  &kp LC(A)  &none           &kp F9              &kp LS(F6)         &none                &none   &none   &kp LG(B)          &kp F4     &kp F5     &kp F6         &none   &none
>;
		};
switcher {
         bindings = <
&trans  &trans  &trans       &trans  &trans                                                                        &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F4       &trans  &kp ESCAPE  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(TAB)  &none   &kp TAB     &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans      &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans      &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans              &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
qwerty {
         bindings = <
&kp F1     &kp F2    &kp F3   &kp F4    &kp F5                                                                                       &kp F6  &kp F7     &kp F8    &kp F9    &kp F10
&kp EQUAL  &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                    &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q     &kp W    &kp E     &kp R      &kp T                                                                     &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC    &kp A     &kp S    &kp D     &kp F      &kp G                                                                     &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp APOS
&kp GRAVE  &kp Z     &kp X    &kp C     &kp V      &kp B   &kp LSHFT  &kp LCTRL  &trans      &trans    &kp LCTRL  &kp LSHFT  &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp PG_UP
&trans     &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp SPACE  &kp ENTER  &kp LALT    &kp RALT  &kp DEL    &kp BSPC           &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp PG_DN
>;};
mouse {
         bindings = <
&trans  &trans  &trans  &trans   &trans                                                                     &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans   &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F17  &kp F18  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F13  &kp F14  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F15  &kp F16  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F19  &kp F20          &trans  &trans  &trans    &trans  &tog 8  &trans          &trans  &trans  &trans  &trans  &trans
>;};
magic {
			bindings = <
&trans      &trans           &trans           &trans           &trans                                                                                                  &trans  &trans  &trans  &trans  &trans
&to 0       &to 0            &to 2            &to 4            &to 3            &to 5                                                                           &to 6  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                 &none  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                 &none  &none   &none   &none   &none   &none
&sys_reset  &none            &none            &none            &none            &none            &bt_2  &bootloader  &none           &none  &bootloader  &none  &none  &none   &none   &none   &none   &sys_reset
&none       &none            &none            &none            &bt BT_CLR                        &bt_0  &bt_1        &out OUT_USB    &none  &none        &none         &none   &none   &none   &none   &bt BT_CLR_ALL
>;
		};
	};
};
