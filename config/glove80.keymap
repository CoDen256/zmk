/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define Layer_Main 0
#define Layer_NAV 1
#define Layer_FUN 2
#define Layer_NUM 3
#define Layer_Magic 4

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD
	
	behaviors {
		bt_0: bt_0 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_0";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_0>, <&bt BT_DISC 0>;
		};
		
		bt_1: bt_1 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_1";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_1>, <&bt BT_DISC 1>;
		};
		
		bt_2: bt_2 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_2";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_2>, <&bt BT_DISC 2>;
		};
		
		bt_3: bt_3 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_3";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_3>, <&bt BT_DISC 3>;
		};
	};
	
	macros {
		bt_select_0: bt_select_0 {
			label = "BT_SELECT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};
		
		bt_select_1: bt_select_1 {
			label = "BT_SELECT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};
		
		bt_select_2: bt_select_2 {
			label = "BT_SELECT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};
		
		bt_select_3: bt_select_3 {
			label = "BT_SELECT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};
	
    #else
	
	macros {
		bt_0: bt_0 {
			label = "BT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};
		
		bt_1: bt_1 {
			label = "BT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};
		
		bt_2: bt_2 {
			label = "BT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};
		
		bt_3: bt_3 {
			label = "BT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};
	
    #endif
};

&sk {
	release-after-ms = <900>;// release after 0.6s
	quick-release;// no double capitalization when rolling keys
};

&sl {
	ignore-modifiers;// allow chording sticky mods & layers
	
release-after-ms = <5000>;};

&lt {
	flavor = "balanced";
	tapping-term-ms = <200>;
	quick-tap-ms = <175>;
};


/ {
	behaviors {
		magic: magic {
			compatible = "zmk,behavior-hold-tap";
			label = "MAGIC_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			bindings = <&mo>, <&rgb_ug_status_macro>;
		};
		
		// num_word: num_word {
		//     compatible = "zmk,behavior-num-word";
		//     #binding-cells = <0>;
		//     layers = <Layer_NUM>; // to be specified in user config using "&num_word { layers = <xx>; };"
		//     continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR EQUAL>;
		//     ignore-numbers;
		// };
		
		// num_dance: num_dance {
		//     compatible = "zmk,behavior-tap-dance";
		//     #binding-cells = <0>;
		//     tapping-term-ms = <200>;
		//     bindings = <&num_word>, <&sl Layer_NUM>;
		// };
		
		// smart_num: smart_num {
		//     compatible = "zmk,behavior-hold-tap";
		//     #binding-cells = <2>;
		//     flavor = "balanced";
		//     tapping-term-ms = <200>;
		//     quick-tap-ms = <175>;
		//     bindings = <&mo>, <&num_dance>;
		// };
		
		hml: hml {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&kp>;
			
			hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};
		
		hmr: hmr {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&kp>;
			
			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};
		
		hml_repeat: hml_repeat {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&key_repeat>;
			
			hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};
		
		hmr_lpar_lt: hmr_lpar_lt {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&lpar_lt>;
			
			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};
		
		hmr_rpar_gt: hmr_rpar_gt {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&rpar_gt>;
			
			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};
		
		// &mt { flavor = "tap-preferred"; tapping-term-ms = <220>; quick-tap-ms = <220>; hold-trigger-key-positions = <0>; };
		
		mt_home: mt_home {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&masked_home>, <&kp>;
			
			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <220>;
			hold-trigger-key-positions = <0>;
		};
		
		mt_end: mt_end {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&masked_end>, <&kp>;
			
			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <220>;
			hold-trigger-key-positions = <0>;
		};
		
		masked_home: masked_home {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp HOME>, <&kp HOME>;
			
			mods = <(MOD_LCTL)>;
		};
		
		masked_end: masked_end {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp END>, <&kp END>;
			
			mods = <(MOD_LCTL)>;
		};
		
		smart_shft: smart_shft {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&sk LSHFT>, <&caps_word>;
			
			mods = <(MOD_LSFT)>;
		};
		
		// &caps_word {
		// /delete-property/ ignore-modifiers;
		// };
		// smart_num: smart_num { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <200>; quick-tap-ms = <175>; bindings = <&mo>, <&num_dance>; };
		// num_dance: num_dance { compatible = "zmk,behavior-tap-dance"; #binding-cells = <0>; tapping-term-ms = <200>; bindings = <&num_word>, <&sl Layer_NUM>; };
		// smart_mouse: smart_mouse { compatible = "zmk,behavior-tri-state"; #binding-cells = <0>; bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>; ignored-key-positions = <26 24 28 29 30 31 32 41 42 43 59 60 61 72 73>; ignored-layers = <MOUSE>; };
		
		swapper: swapper {
			compatible = "zmk,behavior-tri-state";
			#binding-cells = <0>;
			bindings = <&kp TAB>;
			ignored-key-positions = <25>;
		};
		
		// sls: sls { compatible = "zmk,behavior-sticky-key"; #binding-cells = <1>; release-after-ms = <1000>; bindings = <&uc_shift>; ignore-modifiers; };
		// uc_shift: uc_shift { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <0>; tap-ms = <1>; bindings = <&macro_press &mo UC &kp LSHFT> , <&macro_pause_for_release> , <&macro_release &mo UC &kp LSHFT>; };
		
		comma_morph: comma_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp COMMA>, <&kp SEMICOLON>;
		};
		
		comma_inner_morph: comma_inner_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LCTL|MOD_RCTL)>;
			bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
		};
		
		dot_morph: dot_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp DOT>, <&kp COLON>;
		};
		
		dot_inner_morph: dot_inner_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LCTL|MOD_RCTL)>;
			bindings = <&kp COLON>, <&kp GREATER_THAN>;
		};
		
		qexcl: qexcl {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp QMARK>, <&kp EXCL>;
		};
		
		quote: quote {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp LS(SINGLE_QUOTE)>, <&kp SINGLE_QUOTE>;
		};
		
		lpar_lt: lpar_lt {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp LPAR>, <&kp LT>;
		};
		
		rpar_gt: rpar_gt {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp RPAR>, <&kp GT>;
		};
		
		lt_spc: lt_spc {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <200>;
			quick-tap-ms = <175>;
			bindings = <&mo>, <&spc_morph>;
		};
		
		spc_morph: spc_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp SPACE>, <&dot_spc>;
		};
		
		dot_spc: dot_spc {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			tap-ms = <5>;
			bindings = <&kp DOT &kp SPACE &sk LSHFT>;
		};
		
		bs_del: bs_del {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp BSPC>, <&kp DEL>;
			
			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <MOD_RSFT>;
		};
		
		copy_cut: copy_cut {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LC(INS)>, <&kp LC(X)>;
		};
		
		win_sleep: win_sleep {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <500>;
			tap-ms = <50>;
			bindings = <&kp LG(X) &kp U &kp S>;
		};
		
		// Function arrow: ->
		
		func_arrow: function_arrow {
			compatible = "zmk,behavior-macro";
			label = "FUNCTION_ARROW";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp MINUS &kp LS(PERIOD)>;
		};
		
		and_short: and_short {
			compatible = "zmk,behavior-macro";
			label = "AND_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp LS(NUMBER_6) &kp LS(N6)>;
		};
		
		or_short: or_short {
			compatible = "zmk,behavior-macro";
			label = "OR_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp LS(NON_US_BACKSLASH) &kp LS(NON_US_BACKSLASH)>;
		};
		
		neq_short: neq_short {
			compatible = "zmk,behavior-macro";
			label = "NEQ_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp RS(NUMBER_1) &kp EQUAL>;
		};
		
		eq_short: eq_short {
			compatible = "zmk,behavior-macro";
			label = "EQ_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp EQUAL &kp EQUAL>;
		};
		
		select_word: select_word {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&select_word_right>, <&select_word_left>;
			
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		
		eq_morph: eq_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LCTL|MOD_RCTL)>;
			bindings = <&neq_morph>, <&eq_short>;
			
			label = "EQ_MORPH";
		};
		
		neq_morph: neq_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp EQUAL>, <&neq_short>;
			
			label = "NEQ_MORPH";
		};
		
		and_morph: and_morph {
			compatible = "zmk,behavior-mod-morph";
			
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&and_short>, <&kp AMPERSAND>;
		label = "AND_MORPH";};
		
		or_morph: or_morph {
			compatible = "zmk,behavior-mod-morph";
			
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&or_short>, <&kp PIPE>;
		label = "OR_MORPH";};
		
		grave_morpph: grave_morpph {
			compatible = "zmk,behavior-mod-morph";
			
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&code_block>, <&kp GRAVE>;
		label = "GRAVE_MORPPH";};
		
		comment_morph: comment_morph {
			compatible = "zmk,behavior-mod-morph";
			
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp HASH>, <&comment>;
		label = "COMMENT_MORPH";};
		
		caret_morph:caret_morph {
			compatible = "zmk,behavior-mod-morph";
			
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp CARET>, <&kp TILDE>;
		label = "CARET_MORPH";};
		
		star_hash_morph: star_hash_morph {
			compatible = "zmk,behavior-mod-morph";
			
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp ASTERISK>, <&kp HASH>;
		label = "STAR_HASH_MORPH";};
		
		select_word_right: select_word_right {
			compatible = "zmk,behavior-macro";
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
		};
		
		select_word_left: select_word_left {
			compatible = "zmk,behavior-macro";
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
		};
		
		code_block: code_block {
			compatible = "zmk,behavior-macro";
			
			label = "CODE_BLOCK";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
		bindings = <&macro_tap>,<&kp GRAVE &kp GRAVE &kp GRAVE>;};comment: comment {
			compatible = "zmk,behavior-macro";
			
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp SLASH &kp SLASH>;
		label = "COMMENT";};
		
		duplicate_line: duplicate_line {
			compatible = "zmk,behavior-macro";
			
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp RIGHT &kp ENTER &kp LC(V)>;
		label = "DUPLICATE_LINE";};
		
		kp_to:kp_to {
			compatible = "zmk,behavior-macro-two-param";
			
			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;
		label = "KP_TO";};
		
		kp_tog:kp_tog {
			compatible = "zmk,behavior-macro-two-param";
			
			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &tog MACRO_PLACEHOLDER>;
		label = "KP_TOG";};
		
		kp_sl: kp_sl {
			compatible = "zmk,behavior-macro-two-param";
			
			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>;
		label = "KP_SL";};
		
		select_line: select_line {
			compatible = "zmk,behavior-macro";
			
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp HOME &kp LS(END)>;
		label = "SELECT_LINE";};
		
		delete_word: delete_word {
			compatible = "zmk,behavior-macro";
			
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&select_word &kp BACKSPACE>;
		label = "DELETE_WORD";};
		
		delete_line: delete_line {
			compatible = "zmk,behavior-macro";
			
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&select_line &kp BACKSPACE>;
		label = "DELETE_LINE";};
		
		copy_line: copy_line {
			compatible = "zmk,behavior-macro";
			
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp LC(RIGHT)>;
		label = "COPY_LINE";};
		
		trans_tog: trans_tog {
			compatible = "zmk,behavior-macro-one-param";
			
			#binding-cells = <1>;
			bindings = <&trans &macro_param_1to1 &tog MACRO_PLACEHOLDER>;
		label = "TRANS_TOG";};
		
		trans_to: trans_to {
			compatible = "zmk,behavior-macro-one-param";
			
			#binding-cells = <1>;
			bindings = <&trans &macro_param_1to1 &to MACRO_PLACEHOLDER>;
		};
	};
	//
	// Glove80 key positions index for positional hold-tap
	// - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
	// - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
	//
	// |------------------------|------------------------|
	// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
	// |                        |                        |
	// |  0  1  2  3  4         |          5  6  7  8  9 |
	// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
	// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
	// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
	// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
	// | 64 65 66 67 68         |         75 76 77 78 79 |
	// |                69 52   |   57 74                |
	// |                 70 53  |  56 73                 |
	// |                  71 54 | 55 72                  |
	// |------------------------|------------------------|
	//
	
	combos {
		compatible = "zmk,combos";
		
		// combo_mouse { timeout-ms = <18>; bindings = <&smart_mouse>; key-possitions = <24 26>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };


		RT {
			bindings = <&kp RIGHT_SHIFT>;
			key-positions = <41 42>;
		};
		RE {
			bindings = <&kp BACKSPACE>;
			key-positions = <42 43>;
		};
		IN {
			bindings = <&kp LEFT_SHIFT>;
			key-positions = <37 38>;
		};
		
		AI {
			bindings = <&kp ENTER>;
			key-positions = <37 36>;    

		};
		
		MD {
			bindings = <&kp LC(LEFT)>;
			key-positions = <59 60>;
		};
		
		DY {
			bindings = <&kp LC(RIGHT)>;
			key-positions = <60 61>;
		};
		
		PU {
			bindings = <&kp UP_ARROW>;
			key-positions = <49 50>;
		};
		
		FU {
			bindings = <&kp DOWN>;
			key-positions = <48 49>;
		};
		
		MR {
			bindings = <&kp DOT>;
			key-positions = <59 42>;
		};
		
		TD {
			bindings = <&kp COMMA>;
			key-positions = <41 60>;
		};
		
		RY {
			bindings = <&kp LC(BACKSPACE)>;
			key-positions = <42 61>;
		};
		
		DE {
			bindings = <&kp LC(DELETE)>;
			key-positions = <60 43>;
		};
		
		
		TE {
			bindings = <&mo 5>;
		key-positions = <41 43>;};TL {
			bindings = <&kp COLON>;
		key-positions = <41 30>;};EL {
			bindings = <&kp SEMICOLON>;
		key-positions = <30 43>;};VR {
			bindings = <&kp LEFT_BRACE>;
		key-positions = <29 42>;};LE {
			bindings = <&kp LEFT_PARENTHESIS>;
		key-positions = <42 31>;};IP {
			bindings = <&kp RIGHT>;
		key-positions = <37 50>;};UN {
			bindings = <&kp LEFT_ARROW>;
		key-positions = <38 49>;};UA {
			bindings = <&kp END>;
		key-positions = <49 36>;};FI {
			bindings = <&kp HOME>;
		key-positions = <48 37>;};AN {
			bindings = <&kp TAB>;
		key-positions = <36 38>;};NH {
			bindings = <&kp ESC>;
		key-positions = <38 25>;};IC {
			bindings = <&kp ASTERISK>;
		key-positions = <37 26>;};
		
		GI {
			bindings = <&kp PLUS>;
		key-positions = <37 24>;};
		
		AH {
			bindings = <&kp MINUS>;
		key-positions = <36 25>;};
		
		MY {
			bindings = <&select_word>;
		key-positions = <59 61>;};
		
		FP {
			bindings = <&kp EQUAL>;
		key-positions = <48 50>;};
		
		VB {
			bindings = <&select_line>;
		key-positions = <29 31>;};
		
		CG {
			bindings = <&kp DOUBLE_QUOTES>;
		key-positions = <26 24>;};
		
		VE {
			bindings = <&duplicate_line>;
		key-positions = <29 43>;};
		
		TB {
			bindings = <&kp LESS_THAN>;
		key-positions = <31 41>;};YT {
			bindings = <&and_short>;
		key-positions = <41 61>;};ME {
			bindings = <&or_short>;
		key-positions = <59 43>;};
		
		
		
		
		NG {
			bindings = <&kp LC(X)>;
		key-positions = <38 24>;};
		
		AC {
			bindings = <&kp LC(F)>;
		key-positions = <36 26>;};
		
		
		PA {
			bindings = <&kp LC(A)>;
		key-positions = <50 36>;};
		
		FN {
			bindings = <&kp LC(S)>;
		key-positions = <48 38>;};
		
		SE {
			bindings = <&mo 8>;
		key-positions = <44 43>;};
		
		SR {
			bindings = <&kp DELETE>;
		key-positions = <44 42>;};
				
		ST {
			bindings = <&mo 7>;
		key-positions = <44 41>;};
		OA {
			bindings = <&mo 8>;
		key-positions = <39 36>;};
		
		OI {
			bindings = <&kp LC(C)>;
		key-positions = <35 37>;};
		        		ON {
			bindings = <&kp LC(V)>;
		key-positions = <35 38>;};
		MRIGHT {
			bindings = <&kp EXCLAMATION>;
		key-positions = <59 76>;};
		
		DLEFT {
			bindings = <&kp QUESTION>;
		key-positions = <75 60>;};
		
		IRIGHT {
			bindings = <&kp PG_DN>;
		key-positions = <49 68>;};
		
		PLEFT {
			bindings = <&kp PG_UP>;
		key-positions = <67 50>;};
		
		R_MIDDLEL {
			bindings = <&kp HASH>;
		key-positions = <76 75>;};
		
		R_MIDDLER {
			bindings = <&kp PERCENT>;
		key-positions = <77 76>;};
		
		L_MIDDLER {
			bindings = <&kp UNDERSCORE>;
		key-positions = <68 67>;};
		
		L_MIDDLEL {
			bindings = <&func_arrow>;
		key-positions = <67 66>;};
		
		
		
		//  combo_grk { timeout-ms = <18>; bindings = <&sl UC>; key-fpositions = <29 31>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };
		// combo_cpgrk { timeout-ms = <18>; bindings = <&sls 0>; keyfdgdf-positions = <29 30 31>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };
	};
};

/* Automatically generated macro definitions */

/ {
	macros {
	};
};

/* Automatically generated keymap */

/ {
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
	
behaviors {};
keymap {
		compatible = "zmk,keymap";
		
		main {
			bindings = <
&tog 0      &tog 1       &tog 2       &kp_tog ESCAPE 2  &tog 4                                                                                                          &tog 6        &tog 7        &kp C_MUTE   &kp C_VOL_DN  &kp C_VOLUME_UP
&to 0       &to 1        &to 2        &kp K             &to 4         &tog 5                                                                                &to 5       &to 6         &to 7         &none        &none         &none
&none       &none        &kp G        &kp H             &kp C         &kp W                                                                                 &qexcl      &kp V         &kp L         &kp B        &kp F4        &kp F1
&dot_morph  &hml LGUI O  &hml LALT A  &hml LSHFT I      &hml LCTRL N  &caret_morph                                                                          &kp DOLLAR  &hmr LCTRL T  &hmr RSHFT R  &hmr LALT E  &hmr LGUI S   &comma_morph
&none       &kp J        &kp F        &kp U             &kp P         &none         &smart_shft  &tog 9  &magic 9 0    &magic 9 0  &to 9  &tog 2            &none       &kp M         &kp D         &kp Y        &kp X         &none
&none       &none        &kp Q        &mo 7             &kp TAB                     &kp SPACE    &none   &win_sleep    &none       &none  &kp_tog ESCAPE 2              &kp RET       &tog 6        &kp Z        &none         &none
>;};
		browser {
			bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &kp LC(F6)  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans      &trans  &trans  &trans
>;};
		vim {
			bindings = <
&trans      &trans  &trans            &trans     &trans                                                                                                                           &trans                &trans        &trans             &trans       &trans
&trans      &trans  &star_hash_morph  &kp LC(R)  &kp_tog S 2   &trans                                                                                             &trans          &kp LEFT_PARENTHESIS  &kp PERCENT   &kp DOUBLE_QUOTES  &trans       &trans
&trans      &kp X   &kp D             &kp U      &kp_tog C 3   &kp_sl R 4                                                                                         &kp LEFT_BRACE  &kp V                 &kp_tog O 2   &kp_tog A 2        &none        &trans
&dot_morph  &kp J   &kp K             &kp H      &kp L         &kp Z                                                                                              &kp SQT         &kp B                 &kp W         &kp E              &kp_tog I 2  &comma_morph
&none       &kp N   &kp G             &kp Y      &kp P         &kp M       &kp_tog SLASH 4  &trans        &trans    &trans  &trans           &kp_tog LS(SLASH) 4  &trans          &kp N0                &kp DOLLAR    &kp_sl F 4         &kp_sl T 4   &trans
&none       &kp N9  &kp N7            &kp N5     &kp NUMBER_3              &kp LEFT_SHIFT   &kp NUMBER_1  &trans    &trans  &kp_tog COLON 4  &kp LCTRL                            &kp NUMBER_2          &kp NUMBER_4  &kp NUMBER_6       &kp N8       &trans
>;};
		vim_change0 {
			bindings = <
&trans           &trans       &trans            &trans           &trans                                                                                                                                 &trans                     &trans            &trans                  &trans      &trans
&trans           &trans       &star_hash_morph  &kp_tog LC(R) 3  &kp_to S 0    &trans                                                                                              &trans               &kp_to LEFT_PARENTHESIS 0  &kp_to PERCENT 0  &kp_to DOUBLE_QUOTES 0  &trans      &trans
&trans           &kp_tog X 3  &kp_tog D 3       &kp_tog U 3      &kp_to C 0    &kp_sl R 3                                                                                          &kp_to LEFT_BRACE 0  &kp_tog V 3                &kp_to O 3        &kp A                   &none       &trans
&kp_tog COMMA 3  &kp_tog J 3  &kp_tog K 3       &kp_tog H 3      &kp_tog L 3   &kp_tog Z 3                                                                                         &kp_to SQT 0         &kp_to B 0                 &kp_to W 0        &kp_to E 0              &kp I       &kp_tog DOT 3
&none            &kp_tog N 3  &kp_tog G 3       &kp_tog Y 3      &kp_to P 0    &kp_tog M 3  &kp_tog SLASH 4  &trans        &trans    &trans  &trans           &kp_tog LS(SLASH) 4  &trans               &kp_to N0 0                &kp_to DOLLAR 0   &kp_tog F 3             &kp_to T 0  &trans
&none            &none        &kp N7            &kp N5           &kp NUMBER_3               &kp LEFT_SHIFT   &kp NUMBER_1  &trans    &trans  &kp_tog COLON 4  &kp LCTRL                                 &kp NUMBER_2               &kp NUMBER_4      &kp NUMBER_6            &kp N8      &trans
>;};
		typing {
			bindings = <
&trans      &trans       &trans       &trans        &trans                                                                                                &trans         &trans        &trans       &trans       &trans
&trans      &trans       &trans       &trans        &trans        &trans                                                                      &trans      &trans         &trans        &trans       &trans       &trans
&trans      &trans       &kp G        &kp H         &kp C         &kp W                                                                       &qexcl      &kp V          &kp L         &kp B        &trans       &trans
&dot_morph  &hml LGUI O  &hml LALT A  &hml LSHFT I  &hml LCTRL N  &caret_morph                                                                &kp DOLLAR  &hmr LCTRL T   &hmr RSHFT R  &hmr LALT E  &hmr LGUI S  &comma_morph
&trans      &kp J        &kp F        &kp U         &kp P         &trans        &smart_shft  &trans  &trans    &trans  &trans  &trans         &trans      &kp M          &kp D         &kp Y        &kp X        &trans
&trans      &trans       &kp Q        &tog 7        &kp TAB                     &kp SPACE    &trans  &trans    &trans  &trans  &kp BACKSPACE              &kp_tog RET 4  &tog 6        &kp Z        &trans       &trans
>;};
		num {
			bindings = <
&trans  &trans        &trans        &trans         &trans                                                                                     &trans     &trans           &trans         &trans         &trans
&trans  &trans        &kp ASTERISK  &kp BSLH       &kp PERCENT    &trans                                                              &trans  &trans     &trans           &trans         &trans         &trans
&trans  &trans        &kp N7        &kp N8         &kp N9         &trans                                                              &trans  &trans     &trans           &trans         &trans         &trans
&trans  &hml LGUI N0  &hml LALT N4  &hml LSHFT N5  &hml LCTRL N6  &trans                                                              &trans  &kp RCTRL  &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_WIN  &trans
&trans  &kp EQUAL     &kp N1        &kp N2         &kp N3         &trans  &trans     &trans  &trans    &trans  &trans  &trans         &trans  &trans     &trans           &trans         &trans         &trans
&trans  &trans        &kp PLUS      &tog 7         &kp MINUS              &kp SPACE  &trans  &trans    &trans  &trans  &kp BACKSPACE          &kp ENTER  &tog 6           &trans         &trans         &trans
>;
		};
		nav {
			bindings = <
&none   &none           &trans           &trans          &trans                                                                                                                       &trans              &trans         &trans         &trans           &trans
&trans  &trans          &delete_line     &kp LC(Y)       &none         &trans                                                                                                 &trans  &trans              &trans         &trans         &trans           &trans
&trans  &trans          &kp LC(X)        &kp LC(Z)       &delete_word  &delete_line                                                                                           &trans  &kp HOME            &kp END        &kp LC(A)      &select_line     &trans
&trans  &kp DOWN_ARROW  &kp UP_ARROW     &kp LEFT_ARROW  &kp RIGHT     &trans                                                                                                 &trans  &kp LC(LEFT_ARROW)  &kp LC(RIGHT)  &select_word   &kp RIGHT_SHIFT  &kp LC(S)
&trans  &kp PG_UP       &kp PAGE_DOWN    &kp LC(C)       &kp LC(V)     &trans        &kp_tog LC(F) 6  &kp LC(DELETE)  &trans    &trans  &trans             &kp LC(BACKSPACE)  &trans  &kp DOWN_ARROW      &kp UP_ARROW   &kp RCTRL      &kp RIGHT_ALT    &trans
&trans  &none           &duplicate_line  &copy_line      &kp TAB                     &kp SPACE        &kp DEL         &none     &trans  &kp LC(BACKSPACE)  &kp BACKSPACE              &kp ENTER           &tog 6         &kp RIGHT_WIN  &none            &trans
>;
		};
		fun {
			bindings = <
&trans  &trans     &trans     &trans  &trans                                                                                                         &trans   &trans   &trans   &trans  &trans
&trans  &trans     &trans     &trans  &trans     &trans                                                                                      &trans  &kp F10  &kp F11  &kp F12  &trans  &trans
&none   &none      &none      &none   &trans     &none                                                                                       &trans  &kp F7   &kp F8   &kp F9   &trans  &trans
&none   &none      &none      &none   &kp LC(X)  &none                                                                                       &trans  &kp F4   &kp F5   &kp F6   &trans  &trans
&trans  &kp LC(Y)  &kp LC(Z)  &none   &kp LC(S)  &none   &kp LG(LC(LS(A)))  &kp LG(LC(LS(Q)))  &trans                &trans  &trans  &trans  &trans  &kp F1   &kp F2   &kp F3   &none   &trans
&trans  &kp LC(A)  &kp LC(C)  &trans  &kp LC(V)          &kp F9             &kp LA(TAB)        &kp LC(LA(DELETE))    &trans  &trans  &trans          &trans   &trans   &trans   &none   &none
>;
		};
		over {
			bindings = <
&trans  &trans     &trans        &trans       &trans                                                                        &trans                 &trans            &trans              &trans         &trans
&trans  &trans     &trans        &kp AT_SIGN  &trans      &trans                                                    &trans  &trans                 &trans            &trans              &trans         &trans
&trans  &trans     &kp GRAVE     &kp PERCENT  &kp TILDE   &trans                                                    &trans  &comment               &kp LEFT_BRACKET  &kp RIGHT_BRACKET   &delete_line   &trans
&trans  &kp PIPE   &kp SQT       &neq_short   &eq_short   &trans                                                    &trans  &kp LS(HOME)           &copy_line        &kp LS(END)         &kp AMPERSAND  &trans
&trans  &kp CARET  &kp LC(HOME)  &kp LC(END)  &kp DOLLAR  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &select_word_left      &delete_word      &select_word_right  &code_block    &trans
&trans  &trans     &trans        &trans       &trans              &trans  &trans  &trans    &trans  &trans  &trans          &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE   &kp GREATER_THAN    &trans         &trans
>;};
		magic {
			bindings = <
&trans      &trans           &trans           &trans           &trans                                                                                                  &trans  &trans  &trans  &trans  &trans
&to 0       &to 1            &to 2            &to 4            &to 5            &to 5                                                                           &to 6  &to 7   &to 9   &none   &none   &none
&none       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                 &none  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                 &none  &none   &none   &none   &none   &none
&sys_reset  &none            &none            &none            &none            &none            &none  &bootloader  &none           &none  &bootloader  &none  &none  &none   &none   &none   &none   &sys_reset
&bt_0       &bt_1            &bt_2            &bt_3            &bt BT_CLR                        &none  &none        &out OUT_USB    &none  &none        &none         &none   &none   &none   &none   &bt BT_CLR_ALL
>;
		};
	};
};
