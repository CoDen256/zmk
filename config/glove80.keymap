/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define Layer_Main 0
#define Layer_NAV 1
#define Layer_FUN 2
#define Layer_NUM 3
#define Layer_Magic 4

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

	behaviors {
		bt_0: bt_0 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_0";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_0>, <&bt BT_DISC 0>;
		};

		bt_1: bt_1 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_1";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_1>, <&bt BT_DISC 1>;
		};

		bt_2: bt_2 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_2";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_2>, <&bt BT_DISC 2>;
		};

		bt_3: bt_3 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_3";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_3>, <&bt BT_DISC 3>;
		};
	};

	macros {
		bt_select_0: bt_select_0 {
			label = "BT_SELECT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_select_1: bt_select_1 {
			label = "BT_SELECT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_select_2: bt_select_2 {
			label = "BT_SELECT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_select_3: bt_select_3 {
			label = "BT_SELECT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #else

	macros {
		bt_0: bt_0 {
			label = "BT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_1: bt_1 {
			label = "BT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_2: bt_2 {
			label = "BT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_3: bt_3 {
			label = "BT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #endif
};

&sk {
	release-after-ms = <900>;// release after 0.6s
	quick-release;// no double capitalization when rolling keys
};

&sl {
	ignore-modifiers;// allow chording sticky mods & layers

release-after-ms = <5000>;};

&lt {
	flavor = "balanced";
	tapping-term-ms = <200>;
	quick-tap-ms = <175>;
};


/ {
	behaviors {
		magic: magic {
			compatible = "zmk,behavior-hold-tap";
			label = "MAGIC_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			bindings = <&mo>, <&rgb_ug_status_macro>;
		};

		// num_word: num_word {
		//     compatible = "zmk,behavior-num-word";
		//     #binding-cells = <0>;
		//     layers = <Layer_NUM>; // to be specified in user config using "&num_word { layers = <xx>; };"
		//     continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR EQUAL>;
		//     ignore-numbers;
		// };

		// num_dance: num_dance {
		//     compatible = "zmk,behavior-tap-dance";
		//     #binding-cells = <0>;
		//     tapping-term-ms = <200>;
		//     bindings = <&num_word>, <&sl Layer_NUM>;
		// };

		// smart_num: smart_num {
		//     compatible = "zmk,behavior-hold-tap";
		//     #binding-cells = <2>;
		//     flavor = "balanced";
		//     tapping-term-ms = <200>;
		//     quick-tap-ms = <175>;
		//     bindings = <&mo>, <&num_dance>;
		// };


		lm: lm {
    compatible = "zmk,behavior-macro-two-param";
    wait-ms = <0>;
    tap-ms = <0>;
    #binding-cells = <2>;
    bindings = <&macro_param_1to1>,<&macro_press>,<&mo MACRO_PLACEHOLDER &macro_param_2to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_2to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER &macro_param_1to1>,<&macro_release>,<&mo MACRO_PLACEHOLDER>;
};

		hml: hml {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hmr: hmr {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hml_repeat: hml_repeat {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&key_repeat>;

			hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hmr_lpar_lt: hmr_lpar_lt {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&lpar_lt>;

			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hmr_rpar_gt: hmr_rpar_gt {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&rpar_gt>;

			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		// &mt { flavor = "tap-preferred"; tapping-term-ms = <220>; quick-tap-ms = <220>; hold-trigger-key-positions = <0>; };

		mt_home: mt_home {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&masked_home>, <&kp>;

			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <220>;
			hold-trigger-key-positions = <0>;
		};

		mt_end: mt_end {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&masked_end>, <&kp>;

			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <220>;
			hold-trigger-key-positions = <0>;
		};

		masked_home: masked_home {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp HOME>, <&kp HOME>;

			mods = <(MOD_LCTL)>;
		};

		masked_end: masked_end {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp END>, <&kp END>;

			mods = <(MOD_LCTL)>;
		};

		smart_shft: smart_shft {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&sk LSHFT>, <&caps_word>;

			mods = <(MOD_LSFT)>;
		};

		// &caps_word {
		// /delete-property/ ignore-modifiers;
		// };
		// smart_num: smart_num { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <200>; quick-tap-ms = <175>; bindings = <&mo>, <&num_dance>; };
		// num_dance: num_dance { compatible = "zmk,behavior-tap-dance"; #binding-cells = <0>; tapping-term-ms = <200>; bindings = <&num_word>, <&sl Layer_NUM>; };
		// smart_mouse: smart_mouse { compatible = "zmk,behavior-tri-state"; #binding-cells = <0>; bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>; ignored-key-positions = <26 24 28 29 30 31 32 41 42 43 59 60 61 72 73>; ignored-layers = <MOUSE>; };

		swapper: swapper {
			compatible = "zmk,behavior-tri-state";
			#binding-cells = <0>;
			bindings = <&kp TAB>;
			ignored-key-positions = <25>;
		};

		// sls: sls { compatible = "zmk,behavior-sticky-key"; #binding-cells = <1>; release-after-ms = <1000>; bindings = <&uc_shift>; ignore-modifiers; };
		// uc_shift: uc_shift { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <0>; tap-ms = <1>; bindings = <&macro_press &mo UC &kp LSHFT> , <&macro_pause_for_release> , <&macro_release &mo UC &kp LSHFT>; };

		comma_morph: comma_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp COMMA>, <&kp SEMICOLON>;
		};

		comma_inner_morph: comma_inner_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LCTL|MOD_RCTL)>;
			bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
		};

		dot_morph: dot_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp DOT>, <&kp COLON>;
		};

		dot_inner_morph: dot_inner_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LCTL|MOD_RCTL)>;
			bindings = <&kp COLON>, <&kp GREATER_THAN>;
		};

		qexcl: qexcl {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp QMARK>, <&kp EXCL>;
		};

		quote: quote {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp LS(SINGLE_QUOTE)>, <&kp SINGLE_QUOTE>;
		};

		lpar_lt: lpar_lt {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp LPAR>, <&kp LT>;
		};

		rpar_gt: rpar_gt {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp RPAR>, <&kp GT>;
		};

		lt_spc: lt_spc {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <200>;
			quick-tap-ms = <175>;
			bindings = <&mo>, <&spc_morph>;
		};

		spc_morph: spc_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp SPACE>, <&dot_spc>;
		};

		dot_spc: dot_spc {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <0>;
			tap-ms = <5>;
			bindings = <&kp DOT &kp SPACE &sk LSHFT>;
		};

		bs_del: bs_del {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp BSPC>, <&kp DEL>;

			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <MOD_RSFT>;
		};

		copy_cut: copy_cut {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LC(INS)>, <&kp LC(X)>;
		};

		win_sleep: win_sleep {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <500>;
			tap-ms = <50>;
			bindings = <&kp LG(X) &kp U &kp S>;
		};

		// Function arrow: ->

		func_arrow: function_arrow {
			compatible = "zmk,behavior-macro";
			label = "FUNCTION_ARROW";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp MINUS &kp LS(PERIOD)>;
		};

		and_short: and_short {
			compatible = "zmk,behavior-macro";
			label = "AND_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp LS(N7) &kp LS(N7)>;
		};

		or_short: or_short {
			compatible = "zmk,behavior-macro";
			label = "OR_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp LS(NON_US_BACKSLASH) &kp LS(NON_US_BACKSLASH)>;
		};

		neq_short: neq_short {
			compatible = "zmk,behavior-macro";
			label = "NEQ_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp RS(NUMBER_1) &kp EQUAL>;
		};

		eq_short: eq_short {
			compatible = "zmk,behavior-macro";
			label = "EQ_SHORT";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
			bindings = <&macro_tap>,<&kp EQUAL &kp EQUAL>;
		};

		select_word: select_word {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&select_word_right>, <&select_word_left>;

			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		eq_morph: eq_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LCTL|MOD_RCTL)>;
			bindings = <&neq_morph>, <&eq_short>;

			label = "EQ_MORPH";
		};

		neq_morph: neq_morph {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp EQUAL>, <&neq_short>;

			label = "NEQ_MORPH";
		};

		and_morph: and_morph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&and_short>, <&kp AMPERSAND>;
		label = "AND_MORPH";};

		or_morph: or_morph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&or_short>, <&kp PIPE>;
		label = "OR_MORPH";};

		grave_morpph: grave_morpph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&code_block>, <&kp GRAVE>;
		label = "GRAVE_MORPPH";};

		comment_morph: comment_morph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp HASH>, <&comment>;
		label = "COMMENT_MORPH";};

		caret_morph:caret_morph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp CARET>, <&kp TILDE>;
		label = "CARET_MORPH";};

		star_hash_morph: star_hash_morph {
			compatible = "zmk,behavior-mod-morph";

			#binding-cells = <0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			bindings = <&kp ASTERISK>, <&kp HASH>;
		label = "STAR_HASH_MORPH";};hml_lt:hml_lt {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&mo>, <&kp>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LT";};hmr_lt:hmr_lt {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&mo>, <&kp>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LT";};hml_lswit:hml_lswit {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&lswitcher>, <&kp>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LSWIT";};hmr_lswit:hmr_lswit {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LSWIT";
         bindings = <&lswitcher>, <&kp>;};hml_lnav: hml_lnav {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LNAV";
         bindings = <&lnav>, <&kp>;};hmr_lnav: hmr_lnav {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LNAV";
         bindings = <&lnav>, <&kp>;};hml_lfun: hml_lfun {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LFUN";
         bindings = <&lfun>, <&kp>;};Aumlaut:Aumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&alower>, <&Aupper>;
         label = "AUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};Oumlaut:Oumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&olower>, <&Oupper>;
         label = "OUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};Uumlaut:Uumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&ulower>, <&Uupper>;
         label = "UUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};C_key:C_key {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp C>, <&Crctrl>;
         label = "C_KEY";
         mods = <(MOD_RCTL)>;
         keep-mods = <(MOD_RCTL)>;};X_key:X_key {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp X>, <&Xlctrl>;
         label = "X_KEY";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};Z_key:Z_key {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp Z>, <&Zlctrl>;
         label = "Z_KEY";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};Ynomods:Ynomods {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         bindings = <&kp Y>, <&Ylctrl>;
         label = "YNOMODS";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};V_key:V_key {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp V>, <&Vlctrl>;
         label = "V_KEY";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};Crctrl:Crctrl {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp F13>, <&kp C>;
         label = "CRCTRL";
         mods = <(MOD_RSFT|MOD_RALT|MOD_RGUI|MOD_LALT|MOD_LSFT|MOD_LGUI|MOD_LCTL)>;
         keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RSFT|MOD_RALT|MOD_RGUI)>;};
Vlctrl:Vlctrl {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp F19>, <&kp V>;
         label = "VLCTRL";
         mods = <(MOD_RSFT|MOD_RALT|MOD_RGUI|MOD_LALT|MOD_LSFT|MOD_LGUI|MOD_RCTL)>;
         keep-mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RSFT|MOD_RALT|MOD_RGUI|MOD_RCTL)>;};Zlctrl:Zlctrl {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp F17>, <&kp Z>;
         label = "ZLCTRL";
         mods = <(MOD_RSFT|MOD_RALT|MOD_RGUI|MOD_LALT|MOD_LSFT|MOD_LGUI|MOD_RCTL)>;
         keep-mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RSFT|MOD_RALT|MOD_RGUI|MOD_RCTL)>;};Xlctrl:Xlctrl {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp F16>, <&kp X>;
         label = "XLCTRL";
         mods = <(MOD_RSFT|MOD_RALT|MOD_RGUI|MOD_LALT|MOD_LSFT|MOD_LGUI|MOD_RCTL)>;
         keep-mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;};
         
A_key:A_key {
      compatible = "zmk,behavior-hold-tap";
    
         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&kp>, <&Anomods>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "A_KEY";};Anomods:Anomods {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         bindings = <&Anomods2>, <&Arctrl>;
         label = "ANOMODS";
         mods = <(MOD_RCTL)>;
         keep-mods = <(MOD_RCTL)>;};Arctrl:Arctrl {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         bindings = <&kp F14>, <&kp A>;
         label = "ARCTRL";
         mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_LCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
         keep-mods = <(MOD_LCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_RALT|MOD_RSFT|MOD_RGUI)>;};Alctrl:Alctrl {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         bindings = <&kp C>, <&kp A>;
         label = "ALCTRL";
         mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
         keep-mods = <(MOD_LSFT|MOD_LGUI|MOD_LALT|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;};Anomods2: Anomods2 {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         bindings = <&kp A>, <&Alctrl>;
         label = "ANOMODS2";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};


         G_key:G_key {
             compatible = "zmk,behavior-hold-tap";
             #binding-cells = <2>;
             flavor = "balanced";
             tapping-term-ms = <280>;
             quick-tap-ms = <175>;
             require-prior-idle-ms = <350>;
             bindings = <&lnav>, <&Gnomods>;
             hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
             hold-trigger-on-release;
             label = "G_KEY";};

         Gnomods:Gnomods {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp G>, <&Glctrl>;
         label = "GNOMODS";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};

         Glctrl:Glctrl {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp X>, <&kp G>;
         label = "GLCTRL";
         mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
         keep-mods = <(MOD_RCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_RALT|MOD_RSFT|MOD_RGUI)>;};



         H_key:H_key {
             compatible = "zmk,behavior-hold-tap";
             #binding-cells = <2>;
             flavor = "balanced";
             tapping-term-ms = <280>;
             quick-tap-ms = <175>;
             require-prior-idle-ms = <350>;
             bindings = <&lswitcher>, <&Hnomods>;
             hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
             hold-trigger-on-release;
             label = "H_KEY";};

         Hnomods:Hnomods {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp H>, <&Hlctrl>;
         label = "HNOMODS";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};

         Hlctrl:Hlctrl {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp V>, <&kp H>;
         label = "HLCTRL";
         mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
         keep-mods = <(MOD_RCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_RALT|MOD_RSFT|MOD_RGUI)>;};



         I_key:I_key {
             compatible = "zmk,behavior-hold-tap";
             #binding-cells = <2>;
             flavor = "balanced";
             tapping-term-ms = <280>;
             quick-tap-ms = <175>;
             require-prior-idle-ms = <350>;
             bindings = <&kp>, <&Inomods>;
             hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
             hold-trigger-on-release;
             label = "I_KEY";};

         Inomods:Inomods {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp I>, <&Ilctrl>;
         label = "INOMODS";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};

         Ilctrl:Ilctrl {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp S>, <&kp I>;
         label = "ILCTRL";
         mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
         keep-mods = <(MOD_RCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_RALT|MOD_RSFT|MOD_RGUI)>;};

         



         U_key:U_key {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp U>, <&Ulctrl>;
         label = "U_KEY";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};

         Ulctrl:Ulctrl {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp Z>, <&kp U>;
         label = "ULCTRL";
         mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
         keep-mods = <(MOD_RCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_RALT|MOD_RSFT|MOD_RGUI)>;};





         K_key:K_key {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp K>, <&Klctrl>;
         label = "K_KEY";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};

         Klctrl:Klctrl {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp A>, <&kp K>;
         label = "KLCTRL";
         mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
         keep-mods = <(MOD_RCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_RALT|MOD_RSFT|MOD_RGUI)>;};





         Q_key:Q_key {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp Q>, <&Qlctrl>;
         label = "Q_KEY";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};

         Qlctrl:Qlctrl {
             compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&kp Y>, <&kp Q>;
         label = "QLCTRL";
         mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
         keep-mods = <(MOD_RCTL|MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_RALT|MOD_RSFT|MOD_RGUI)>;};Ylctrl: Ylctrl {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         bindings = <&kp F13>, <&kp Y>;
         label = "YLCTRL";
         mods = <(MOD_RSFT|MOD_RALT|MOD_RGUI|MOD_LALT|MOD_LSFT|MOD_LGUI|MOD_RCTL)>;
         keep-mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;};B_key:B_key {
      compatible = "zmk,behavior-hold-tap";
    
         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&lnav>, <&Ynomods>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "B_KEY";};Bnomods: Bnomods {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         bindings = <&kp B>, <&Blctrl>;
         label = "BNOMODS";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};Blctrl: Blctrl {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         bindings = <&kp F13>, <&kp B>;
         label = "BLCTRL";
         mods = <(MOD_RSFT|MOD_RALT|MOD_RGUI|MOD_LALT|MOD_LSFT|MOD_LGUI|MOD_RCTL)>;
         keep-mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;};Y_key: Y_key {
      compatible = "zmk,behavior-hold-tap";
    
         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&mo>, <&Ynomods>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;};

		select_word_right: select_word_right {
			compatible = "zmk,behavior-macro";
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
		};

		select_word_left: select_word_left {
			compatible = "zmk,behavior-macro";
			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
		};

		code_block: code_block {
			compatible = "zmk,behavior-macro";

			label = "CODE_BLOCK";
			#binding-cells = <0>;
			tap-ms = <0>;
			wait-ms = <0>;
		bindings = <&macro_tap>,<&kp GRAVE &kp GRAVE &kp GRAVE>;};comment: comment {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp SLASH &kp SLASH>;
		label = "COMMENT";};

		duplicate_line: duplicate_line {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp RIGHT &kp ENTER &kp LC(V)>;
		label = "DUPLICATE_LINE";};

		kp_to:kp_to {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;
		label = "KP_TO";};

		kp_tog:kp_tog {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &tog MACRO_PLACEHOLDER>;
		label = "KP_TOG";};

		kp_sl: kp_sl {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>;
		label = "KP_SL";};

		select_line: select_line {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp HOME &kp LS(END)>;
		label = "SELECT_LINE";};

		delete_word: delete_word {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&select_word &kp BACKSPACE>;
		label = "DELETE_WORD";};

		delete_line: delete_line {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&select_line &kp BACKSPACE &kp BACKSPACE>;
		label = "DELETE_LINE";};

		copy_line: copy_line {
			compatible = "zmk,behavior-macro";

			wait-ms = <0>;
			tap-ms = <100>;
			#binding-cells = <0>;
			bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp LC(RIGHT)>;
		label = "COPY_LINE";};

		trans_tog: trans_tog {
			compatible = "zmk,behavior-macro-one-param";

			#binding-cells = <1>;
			bindings = <&trans &macro_param_1to1 &tog MACRO_PLACEHOLDER>;
		label = "TRANS_TOG";};

		trans_to: trans_to {
			compatible = "zmk,behavior-macro-one-param";

			#binding-cells = <1>;
			bindings = <&trans &macro_param_1to1 &to MACRO_PLACEHOLDER>;
		};cut_line: cut_line {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&select_line &kp K_CUT &kp DELETE>;
         label = "CUT_LINE";};move_down: move_down {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&cut_line &kp DOWN &kp K_PASTE>;
         label = "MOVE_DOWN";};move_up: move_up {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&cut_line &kp UP_ARROW &kp K_PASTE>;
         label = "MOVE_UP";};

         lnav: lnav {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 5 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 5>,<&macro_press>;
         label = "LNAV";};lfun: lfun {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 4 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 4>,<&macro_press>;
         label = "LFUN";};lswitcher: lswitcher {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 6 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 6>,<&macro_press>;
         label = "LSWITCHER";};alower:alower {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_3 &kp KP_N2>,<&macro_release>,<&kp LALT>;
         label = "Alower";};Aupper:Aupper {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_4 &kp KP_NUMBER_2>,<&macro_release>,<&kp LALT>;
         label = "Aupper";};olower:olower {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_4 &kp KP_NUMBER_8>,<&macro_release>,<&kp LALT>;
         label = "OLOWER";};Oupper:Oupper {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_5 &kp KP_NUMBER_3>,<&macro_release>,<&kp LALT>;
         label = "OUPPER";};ulower:ulower {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_2 &kp KP_NUMBER_9>,<&macro_release>,<&kp LALT>;
         label = "ULOWER";};Uupper:Uupper {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_5 &kp KP_NUMBER_4>,<&macro_release>,<&kp LALT>;
         label = "UUPPER";};eszet:eszet {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_N2 &kp KP_NUMBER_3>,<&macro_release>,<&kp LALT>;
         label = "eszet";};i_ukr: i_ukr {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_3 &kp KP_N2>,<&macro_release>,<&kp LALT>;
         label = "I_UKR";};ii_ukr: ii_ukr {
        compatible = "zmk,behavior-macro";

         #binding-cells = <0>;
         bindings = <&macro_press>,<&kp LEFT_ALT>,<&macro_tap>,<&kp KP_NUMBER_1 &kp KP_NUMBER_3 &kp KP_N2>,<&macro_release>,<&kp LALT>;
         label = "II_UKR";};paren: paren {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
         label = "PAREN";};brackets: brackets {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
         label = "BRACKETS";};curly: curly {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_ARROW>;
         label = "CURLY";};angle: angle {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp LESS_THAN &kp GREATER_THAN &kp LEFT_ARROW>;
         label = "ANGLE";};backslash: backslash {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp BACKSLASH &kp BACKSLASH>;
         label = "BACKSLASH";};slash: slash {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <0>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp SLASH &kp SLASH>;
         label = "SLASH";};
	};S_key: S_key {
      compatible = "zmk,behavior-hold-tap";
    
         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&kp>, <&kp>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "S_KEY";};Snomods: Snomods {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         bindings = <&kp S>, <&Ylctrl>;
         label = "SNOMODS";
         mods = <(MOD_LCTL)>;
         keep-mods = <(MOD_LCTL)>;};Slctrl: Slctrl {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         bindings = <&kp F18>, <&kp S>;
         label = "SLCTRL";
         mods = <(MOD_RSFT|MOD_RALT|MOD_RGUI|MOD_LALT|MOD_LSFT|MOD_LGUI|MOD_RCTL)>;
         keep-mods = <(MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;};
	//
	// Glove80 key positions index for positional hold-tap
	// - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
	// - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
	//
	// |------------------------|------------------------|
	// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
	// |                        |                        |
	// |  0  1  2  3  4         |          5  6  7  8  9 |
	// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
	// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
	// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
	// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
	// | 64 65 66 67 68         |         75 76 77 78 79 |
	// |                69 52   |   57 74                |
	// |                 70 53  |  56 73                 |
	// |                  71 54 | 55 72                  |
	// |------------------------|------------------------|
	//

	combos {
		compatible = "zmk,combos";

		// combo_mouse { timeout-ms = <18>; bindings = <&smart_mouse>; key-possitions = <24 26>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };


		RT {
			bindings = <&kp COMMA>;
			key-positions = <41 42>;
		};
		RE {
			bindings = <&kp SEMI>;
			key-positions = <42 43>;
		};
		IN {
			bindings = <&kp DOT>;
			key-positions = <37 38>;
		};

		AI {
			bindings = <&kp COLON>;
			key-positions = <37 36>;

		};

		MD {
			bindings = <&curly>;
			key-positions = <59 60>;
		};

		DY {
			bindings = <&brackets>;
			key-positions = <60 61>;
		};

		PU {
			bindings = <&paren>;
			key-positions = <49 50>;
		};

		FU {
         bindings = <&angle>;
         key-positions = <49 48>;};

		LV {
         bindings = <&kp SINGLE_QUOTE>;
         key-positions = <30 29>;};CH {
         bindings = <&or_short>;
         key-positions = <25 26>;};
		BL {
         bindings = <&kp DOUBLE_QUOTES>;
         key-positions = <31 30>;};
		HG {
			bindings = <&and_short>;
			key-positions = <25 24>;
		};

		MR {
			bindings = <&func_arrow>;
			key-positions = <59 42>;
		};

		TD {
			bindings = <&none>;
			key-positions = <41 60>;
		};

		RY {
			bindings = <&kp AT>;
			key-positions = <42 61>;
		};

		DE {
			bindings = <&none>;
			key-positions = <60 43>;
		};


		TE {
			bindings = <&kp QUESTION>;
		key-positions = <41 43>;};TL {
			bindings = <&kp GRAVE>;
		key-positions = <41 30>;};EL {
			bindings = <&code_block>;
		key-positions = <30 43>;};VR {
			bindings = <&kp CARET>;
		key-positions = <29 42>;};LE {
			bindings = <&kp DOLLAR>;
		key-positions = <42 31>;};IP {
			bindings = <&kp EQUAL>;
		key-positions = <37 50>;};UN {
			bindings = <&kp ASTERISK>;
		key-positions = <38 49>;};UA {
			bindings = <&kp PLUS>;
		key-positions = <49 36>;};FI {
			bindings = <&neq_short>;
		key-positions = <48 37>;};AN {
			bindings = <&kp EXCL>;
		key-positions = <36 38>;};NH {
			bindings = <&kp MINUS>;
		key-positions = <38 25>;};IC {
			bindings = <&eq_short>;
		key-positions = <37 26>;};

		GI {
			bindings = <&backslash>;
		key-positions = <37 24>;};

		AH {
			bindings = <&kp SLASH>;
		key-positions = <36 25>;};

		MY {
			bindings = <&none>;
		key-positions = <59 61>;};

		FP {
			bindings = <&kp UNDERSCORE>;
		key-positions = <48 50>;};

		VB {
			bindings = <&kp TILDE>;
		key-positions = <29 31>;};

		CG {
			bindings = <&kp HASH>;
		key-positions = <26 24>;};

		VE {
			bindings = <&none>;
		key-positions = <29 43>;};

		TB {
			bindings = <&none>;
		key-positions = <31 41>;};YT {
			bindings = <&none>;
		key-positions = <41 61>;};ME {
			bindings = <&none>;
		key-positions = <59 43>;};




		NG {
			bindings = <&kp PERCENT>;
		key-positions = <38 24>;};

		AC {
			bindings = <&slash>;
		key-positions = <36 26>;};


		PA {
			bindings = <&none>;
		key-positions = <50 36>;};

		FN {
			bindings = <&none>;
		key-positions = <48 38>;};

		SE {
			bindings = <&none>;
		key-positions = <44 43>;};


		ST {
			bindings = <&none>;
		key-positions = <44 41>;};
		OA {
			bindings = <&none>;
		key-positions = <36 35>;};

		        		ON {
			bindings = <&none>;
		key-positions = <35 38>;};
		MRIGHT {
			bindings = <&delete_word>;
		key-positions = <59 76>;};

		DLEFT {
			bindings = <&select_word_right>;
		key-positions = <75 60>;};

		IRIGHT {
			bindings = <&select_word_left>;
		key-positions = <49 68>;};

		PLEFT {
			bindings = <&select_word>;
		key-positions = <67 50>;};

		R_MIDDLEL {
			bindings = <&none>;
		key-positions = <76 75>;};

		R_MIDDLER {
			bindings = <&none>;
		key-positions = <77 76>;};

		L_MIDDLER {
			bindings = <&none>;
		key-positions = <68 67>;};

		L_MIDDLEL {
			bindings = <&none>;
		key-positions = <67 66>;};NT {
         bindings = <&none>;
         key-positions = <41 38>;};IR {
         bindings = <&none>;
         key-positions = <37 42>;};PM {
         bindings = <&select_line>;
         key-positions = <50 59>;};UD {
         bindings = <&delete_line>;
         key-positions = <49 60>;};FY {
         bindings = <&duplicate_line>;
         key-positions = <48 61>;};CK {
         bindings = <&none>;
         key-positions = <26 13>;};V8 {
         bindings = <&none>;
         key-positions = <29 18>;};



		//  combo_grk { timeout-ms = <18>; bindings = <&sl UC>; key-fpositions = <29 31>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };
		// combo_cpgrk { timeout-ms = <18>; bindings = <&sls 0>; keyfdgdf-positions = <29 30 31>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };
	};
};

/* Automatically generated macro definitions */

/ {
	macros {
	};
};

/* Automatically generated keymap */

/ {

behaviors {};


behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};
keymap {
		compatible = "zmk,keymap";

		main {
			bindings = <
&kp F1             &kp F2                     &kp F3             &kp F4             &kp F5                                                                                                             &kp F6        &kp F7        &kp F8                 &kp F9                &kp F10
&kp C_VOLUME_DOWN  &kp C_VOLUME_UP            &none              &K_key             &none         &kp LG(F10)                                                                       &kp_tog LG(F11) 2  &kp LG(F12)   &none         &none                  &none                 &none
&kp C_MUTE         &none                      &G_key LCTRL 0     &H_key LEFT_ALT 0  &C_key        &kp W                                                                             &none              &V_key        &kp L         &hmr_lnav RIGHT_ALT B  &none                 &none
&kp LEFT_WIN       &hml LG(LA(LEFT_SHIFT)) O  &A_key LEFT_ALT A  &I_key LSHFT 0     &hml LCTRL N  &kp F9                                                                            &none              &hmr RCTRL T  &hmr RSHFT R  &hmr RIGHT_ALT E       &hml RG(LA(RSHFT)) S  &kp RMETA
&mo 4              &kp J                      &hml_lt 5 F        &U_key             &kp P         &none        &kp BACKSPACE  &tog 4  &magic 8 0    &magic 8 0  &tog 5  &kp DELETE  &none              &hmr_lt 3 M   &kp D         &Y_key 5 0             &X_key                &none
&kp LG(L)          &none                      &Q_key             &kp ESCAPE         &kp ENTER                  &kp SPACE      &sl 1   &none         &none       &mo 3   &sk LSHFT                      &kp TAB       &kp UP_ARROW  &Z_key                 &none                 &none
>;};
de {
         bindings = <
&trans  &trans    &trans    &trans    &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans    &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans    &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &Oumlaut  &Aumlaut  &trans    &trans  &trans                                                    &trans  &trans  &trans  &trans  &eszet  &trans
&trans  &trans    &trans    &Uumlaut  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans    &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
cyrillic {
         bindings = <
&trans  &trans    &trans            &trans    &trans                                                                                    &trans             &trans  &trans     &trans   &trans
&trans  &trans    &kp LEFT_BRACKET  &kp R     &kp X   &kp_tog LG(F10) 2                                                    &kp LG(F11)  &kp_tog LG(F12) 2  &trans  &kp M      &trans   &trans
&trans  &kp Z     &kp U             &kp LBKT  &kp W   &kp O                                                                &trans       &kp D              &kp K   &kp COMMA  &kp SQT  &trans
&trans  &kp J     &kp F             &kp B     &kp Y   &trans                                                               &trans       &kp N              &kp H   &kp T      &kp C    &trans
&trans  &kp SEMI  &kp A             &kp E     &kp G   &trans             &trans  &trans  &trans    &trans  &trans  &trans  &trans       &kp V              &kp L   &kp Q      &kp I    &trans
&trans  &none     &kp DOT           &trans    &trans                     &trans  &trans  &trans    &trans  &trans  &trans               &trans             &trans  &kp P      &none    &trans
>;};
num {
         bindings = <
&trans  &trans  &trans        &trans        &trans                                                                          &trans           &trans                &trans                           &trans   &trans
&trans  &trans  &none         &none         &trans        &trans                                                    &trans  &trans           &trans                &trans                           &trans   &trans
&trans  &trans  &kp N7        &kp N8        &kp N9        &trans                                                    &trans  &kp PERCENT      &kp ASTERISK          &kp SLASH                        &none    &trans
&trans  &kp N0  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans                                                    &trans  &hmr LCTRL LPAR  &hmr LSHIFT KP_EQUAL  &hmr LEFT_ALT RIGHT_PARENTHESIS  &kp DOT  &trans
&trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp PLUS         &kp MINUS             &kp COMMA                        &trans   &trans
&trans  &trans  &trans        &trans        &trans                &trans  &trans  &trans    &trans  &trans  &trans          &trans           &trans                &trans                           &trans   &trans
>;};
fun {
			bindings = <
&trans  &trans  &trans     &trans     &trans                                                                                                         &trans     &trans     &trans         &trans  &trans
&trans  &trans  &trans     &trans     &trans  &trans                                                                                         &trans  &kp F10    &kp F11    &kp F12        &trans  &trans
&none   &none   &kp LC(Y)  &kp LC(Z)  &none   &none                                                                                          &trans  &kp F7     &kp F8     &kp F9         &trans  &trans
&none   &none   &kp LC(X)  &kp LC(V)  &none   &none                                                                                          &trans  &kp LCTRL  &kp RSHFT  &kp RIGHT_ALT  &trans  &trans
&trans  &none   &kp LC(C)  &kp LC(S)  &none   &none   &kp LC(LA(DELETE))  &kp LG(LC(LS(A)))  &kp LG(LS(LC(Q)))    &trans  &trans  &kp LG(X)  &trans  &kp F1     &kp F2     &kp F3         &none   &trans
&trans  &none   &kp LC(F)  &kp LC(A)  &none           &kp F9              &kp LS(F6)         &none                &none   &none   &kp LG(B)          &kp F4     &kp F5     &kp F6         &none   &none
>;
		};
nav {
			bindings = <
&trans  &trans          &trans  &trans          &trans                                                                             &trans     &trans           &trans  &trans  &trans
&trans  &trans          &trans  &kp BACKSPACE   &kp DELETE       &trans                                                    &trans  &trans     &trans           &trans  &trans  &trans
&trans  &trans          &none   &kp HOME        &kp END          &trans                                                    &trans  &kp LCTRL  &kp RIGHT_SHIFT  &none   &none   &trans
&trans  &kp LEFT_SHIFT  &none   &kp LEFT_ARROW  &kp RIGHT_ARROW  &trans                                                    &trans  &kp RCTRL  &kp LEFT_SHIFT   &none   &none   &trans
&trans  &kp LCTRL       &none   &kp UP_ARROW    &kp DOWN         &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp LCTRL  &kp RIGHT_SHIFT  &none   &none   &trans
&trans  &trans          &trans  &kp PG_UP       &kp PAGE_DOWN            &trans  &trans  &trans    &trans  &trans  &trans          &none      &none            &none   &trans  &trans
>;};
switcher {
         bindings = <
&trans  &trans  &trans       &trans  &trans                                                                        &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F4       &trans  &kp ESCAPE  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(TAB)  &none   &kp TAB     &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans      &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans      &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans              &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
qwerty {
         bindings = <
&kp F1     &kp F2    &kp F3   &kp F4    &kp F5                                                                                       &kp F6  &kp F7     &kp F8    &kp F9    &kp F10
&kp EQUAL  &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                    &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q     &kp W    &kp E     &kp R      &kp T                                                                     &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC    &kp A     &kp S    &kp D     &kp F      &kp G                                                                     &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp APOS
&kp GRAVE  &kp Z     &kp X    &kp C     &kp V      &kp B   &kp LSHFT  &kp LCTRL  &trans      &trans    &kp LCTRL  &kp LSHFT  &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp PG_UP
&trans     &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp SPACE  &kp ENTER  &kp LALT    &kp RALT  &kp DEL    &kp BSPC           &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp PG_DN
>;};
magic {
			bindings = <
&trans      &trans           &trans           &trans           &trans                                                                                                  &trans  &trans  &trans  &trans  &trans
&to 0       &to 2            &to 3            &to 4            &to 5            &to 6                                                                           &to 7  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                 &none  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                 &none  &none   &none   &none   &none   &none
&sys_reset  &none            &none            &none            &none            &none            &bt_2  &bootloader  &none           &none  &bootloader  &none  &none  &none   &none   &none   &none   &sys_reset
&none       &none            &none            &none            &bt BT_CLR                        &bt_0  &bt_1        &out OUT_USB    &none  &none        &none         &none   &none   &none   &none   &bt BT_CLR_ALL
>;
		};mouse {
         bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &none   &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
	};
};
