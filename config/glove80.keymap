/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define Layer_Main 0
#define Layer_NAV 1
#define Layer_FUN 2
#define Layer_NUM 3
#define Layer_Magic 4

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

	behaviors {
		bt_0: bt_0 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_0";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_0>, <&bt BT_DISC 0>;
		};

		bt_1: bt_1 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_1";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_1>, <&bt BT_DISC 1>;
		};

		bt_2: bt_2 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_2";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_2>, <&bt BT_DISC 2>;
		};

		bt_3: bt_3 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_3";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_3>, <&bt BT_DISC 3>;
		};
	};

	macros {
		bt_select_0: bt_select_0 {
			label = "BT_SELECT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_select_1: bt_select_1 {
			label = "BT_SELECT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_select_2: bt_select_2 {
			label = "BT_SELECT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_select_3: bt_select_3 {
			label = "BT_SELECT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #else

	macros {
		bt_0: bt_0 {
			label = "BT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_1: bt_1 {
			label = "BT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_2: bt_2 {
			label = "BT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_3: bt_3 {
			label = "BT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #endif
};

&sk {
	release-after-ms = <900>;// release after 0.6s
	quick-release;// no double capitalization when rolling keys
};

&sl {
	ignore-modifiers;// allow chording sticky mods & layers

release-after-ms = <5000>;};

&lt {
	flavor = "balanced";
	tapping-term-ms = <200>;
	quick-tap-ms = <175>;
};


/ {
	behaviors {
		magic: magic {
			compatible = "zmk,behavior-hold-tap";
			label = "MAGIC_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			bindings = <&mo>, <&rgb_ug_status_macro>;
		};

		lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings = <&macro_param_1to1>,<&macro_press>,<&mo MACRO_PLACEHOLDER &macro_param_2to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_2to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER &macro_param_1to1>,<&macro_release>,<&mo MACRO_PLACEHOLDER>;
        };

		hml: hml {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <270>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hmr: hmr {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hlctrl:hlctrl {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;

			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <220>;
			hold-trigger-key-positions = <0>;
		};


		masked_home: masked_home {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp HOME>, <&hlctrl LC(HOME) HOME>;
			mods = <(MOD_LCTL)>;
		};

		masked_end: masked_end {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp END>, <&hlctrl LC(END) END>;
			mods = <(MOD_LCTL)>;
		};

		swapper: swapper {
			compatible = "zmk,behavior-tri-state";
			#binding-cells = <0>;
			bindings = <&kp TAB>;
			ignored-key-positions = <25>;
		};

		copy_cut: copy_cut {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LC(INS)>, <&kp LC(X)>;
		};


/*<macros-start>*/

        ojkyyowsaa: ojkyyowsaa { label = "OJKYYOWSAA"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp G>;
        };

        nydkhdcseh: nydkhdcseh { label = "NYDKHDCSEH"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp H>;
        };

        fciqnosuqj: fciqnosuqj { label = "FCIQNOSUQJ"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp LEFT_ALT>;
        };

        ivdkrdkbpz: ivdkrdkbpz { label = "IVDKRDKBPZ"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp A>;
        };

        aqhhcxgktj: aqhhcxgktj { label = "AQHHCXGKTJ"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp LSHIFT>;
        };

        gqrhddjmjw: gqrhddjmjw { label = "GQRHDDJMJW"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp I>;
        };

        spuyjeeker: spuyjeeker { label = "SPUYJEEKER"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp LCTRL>;
        };

        jfbhnmdooe: jfbhnmdooe { label = "JFBHNMDOOE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp N>;
        };
/*<macros-end>*/


        hml_lt:hml_lt {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&mo>, <&kp>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LT";};

         hmr_lt:hmr_lt {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&mo>, <&kp>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LT";};

         hml_lswit:hml_lswit {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&lswitcher>, <&kp>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LSWIT";};

         hmr_lswit:hmr_lswit {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LSWIT";
         bindings = <&lswitcher>, <&kp>;};

         hml_lnav: hml_lnav {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LNAV";
         bindings = <&lnav>, <&kp>;};

         hmr_lnav: hmr_lnav {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LNAV";
         bindings = <&lnav>, <&kp>;};

         hml_lfun: hml_lfun {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LFUN";
         bindings = <&lfun>, <&kp>;};

         Aumlaut:Aumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&alower>, <&Aupper>;
         label = "AUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};

         Oumlaut:Oumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&olower>, <&Oupper>;
         label = "OUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};

         Uumlaut:Uumlaut {
      compatible = "zmk,behavior-mod-morph";

         #binding-cells = <0>;
         bindings = <&ulower>, <&Uupper>;
         label = "UUMLAUT";
         mods = <(MOD_LSFT|MOD_RSFT)>;};

/*<mods-start>*/

        K_key:K_key { label = "K_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp K>, <&K_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        K_key_rshift_sink:K_key_rshift_sink { label = "K_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F1)>, <&kp K>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        G_key:G_key { label = "G_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&G_key_lshift_link>, <&G_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        G_key_lshift_link:G_key_lshift_link { label = "G_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&qjgcvgrzlu 0 0>, <&G_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        G_key_lshift_sink:G_key_lshift_sink { label = "G_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(X)>, <&qjgcvgrzlu 0 0>;
            mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        G_key_rshift_sink:G_key_rshift_sink { label = "G_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F2)>, <&qjgcvgrzlu 0 0>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        H_key:H_key { label = "H_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&mtfidyxjmx 0 0>, <&H_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        H_key_rshift_sink:H_key_rshift_sink { label = "H_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F3)>, <&mtfidyxjmx 0 0>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        C_key:C_key { label = "C_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&C_key_rshift_link>, <&C_key_rctrl_sink>;
            mods = <(MOD_RCTL)>;
            
        };

        C_key_lshift_link:C_key_lshift_link { label = "C_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp C>, <&C_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        C_key_rshift_link:C_key_rshift_link { label = "C_KEY_RSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&C_key_lshift_link>, <&C_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        C_key_lshift_sink:C_key_lshift_sink { label = "C_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp C>;
            mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        C_key_rshift_sink:C_key_rshift_sink { label = "C_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F4)>, <&kp C>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        C_key_rctrl_sink:C_key_rctrl_sink { label = "C_KEY_RCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RC(F4)>, <&kp C>;
            mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_LALT)>;
        };

        W_key:W_key { label = "W_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&W_key_lshift_link>, <&W_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        W_key_lshift_link:W_key_lshift_link { label = "W_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp W>, <&W_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        W_key_lshift_sink:W_key_lshift_sink { label = "W_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(A)>, <&kp W>;
            mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        W_key_rshift_sink:W_key_rshift_sink { label = "W_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F5)>, <&kp W>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        O_key:O_key { label = "O_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&O_key_lshift_link>, <&O_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        O_key_lshift_link:O_key_lshift_link { label = "O_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp O>, <&O_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        O_key_lshift_sink:O_key_lshift_sink { label = "O_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F6)>, <&kp O>;
            mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        O_key_rshift_sink:O_key_rshift_sink { label = "O_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F6)>, <&kp O>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        A_key:A_key { label = "A_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&A_key_lctrl_link>, <&A_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        A_key_lshift_link:A_key_lshift_link { label = "A_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&hzaenniazj 0 0>, <&A_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        A_key_rctrl_link:A_key_rctrl_link { label = "A_KEY_RCTRL_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&A_key_lshift_link>, <&A_key_rctrl_sink>;
            mods = <(MOD_RCTL)>;
            
        };

        A_key_lctrl_link:A_key_lctrl_link { label = "A_KEY_LCTRL_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&A_key_rctrl_link>, <&A_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        A_key_lshift_sink:A_key_lshift_sink { label = "A_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&hzaenniazj 0 0>;
            mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        A_key_rctrl_sink:A_key_rctrl_sink { label = "A_KEY_RCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RC(F7)>, <&hzaenniazj 0 0>;
            mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_LALT)>;
        };

        A_key_lctrl_sink:A_key_lctrl_sink { label = "A_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F7)>, <&hzaenniazj 0 0>;
            mods = <(MOD_LGUI|MOD_RSFT|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        A_key_rshift_sink:A_key_rshift_sink { label = "A_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F7)>, <&hzaenniazj 0 0>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        I_key:I_key { label = "I_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&I_key_lshift_link>, <&I_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        I_key_lshift_link:I_key_lshift_link { label = "I_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&dpngoruxgd 0 0>, <&I_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        I_key_lshift_sink:I_key_lshift_sink { label = "I_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&dpngoruxgd 0 0>;
            mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        I_key_rshift_sink:I_key_rshift_sink { label = "I_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F8)>, <&dpngoruxgd 0 0>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        N_key:N_key { label = "N_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&N_key_lshift_link>, <&N_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        N_key_lshift_link:N_key_lshift_link { label = "N_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&hgujdqiwfc 0 0>, <&N_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        N_key_lshift_sink:N_key_lshift_sink { label = "N_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(S)>, <&hgujdqiwfc 0 0>;
            mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_RSFT|MOD_LCTL|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        N_key_rshift_sink:N_key_rshift_sink { label = "N_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F9)>, <&hgujdqiwfc 0 0>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };

        J_key:J_key { label = "J_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp J>, <&J_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        J_key_rshift_sink:J_key_rshift_sink { label = "J_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F10)>, <&kp J>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_LALT)>;
        };
/*<mods-end>*/
		kp_to:kp_to {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;
		label = "KP_TO";};

		kp_tog:kp_tog {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &tog MACRO_PLACEHOLDER>;
		label = "KP_TOG";};

		kp_sl: kp_sl {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>;
		label = "KP_SL";};

         lnav: lnav {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 4 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 4>,<&macro_press>;
         label = "LNAV";};

         lfun: lfun {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 4 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 4>,<&macro_press>;
         label = "LFUN";};

         lswitcher: lswitcher {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 6 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 6>,<&macro_press>;
         label = "LSWITCHER";};
    };

	//
	// Glove80 key positions index for positional hold-tap
	// - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
	// - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
	//
	// |------------------------|------------------------|
	// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
	// |                        |                        |
	// |  0  1  2  3  4         |          5  6  7  8  9 |
	// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
	// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
	// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
	// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
	// | 64 65 66 67 68         |         75 76 77 78 79 |
	// |                69 52   |   57 74                |
	// |                 70 53  |  56 73                 |
	// |                  71 54 | 55 72                  |
	// |------------------------|------------------------|
	//

	combos {
		compatible = "zmk,combos";

		// combo_mouse { timeout-ms = <18>; bindings = <&smart_mouse>; key-possitions = <24 26>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };

/*<combos-start>*/

/*<combos-end>*/

};

};

/* Automatically generated macro definitions */

/ {
	macros {
	};
};

/* Automatically generated keymap */

/ {

behaviors {};


behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};
keymap {
		compatible = "zmk,keymap";

		main {
			bindings = <
&kp F1             &kp F2           &kp F3             &kp F4                 &kp F5                                                                                                        &kp F6          &kp F7                     &kp F8              &kp F9      &kp F10
&kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &key_repeat        &K_key                 &kp F9          &kp LG(F10)                                                                      &kp LG(F11)  &kp LG(F12)     &key_repeat                &key_repeat         &none       &none
&kp C_MUTE         &kp CARET        &G_key LCTRL 0     &H_key LEFT_ALT 0      &C_key          &W_key                                                                           &none        &V_key          &L_key                     &B_key RIGHT_ALT 0  &kp DOLLAR  &none
&kp LEFT_WIN       &O_key           &A_key LEFT_ALT 0  &I_key LSHFT 0         &N_key LCTRL 0  &kp ESCAPE                                                                       &kp DELETE   &T_key RCTRL 0  &R_key RSHFT 0             &E_key RIGHT_ALT 0  &S_key      &kp RMETA
&mo 5              &J_key           &F_key 4 0         &U_key LS(LA(LGUI)) 0  &P_key          &none        &kp BACKSPACE  &mo 3  &magic 9 0    &magic 9 0  &tog 3  &kp DELETE  &none        &M_key 3 0      &D_key RS(RA(LEFT_GUI)) 0  &Y_key 4 0          &X_key      &none
&reloadkeymap      &kp AT           &Q_key             &kp TAB                &kp ENTER                    &kp SPACE      &sl 2  &none         &tog 1      &tog 8  &sl 1                    &kp ENTER       &kp TAB                    &Z_key              &kp TILDE   &none
>;};

		main_upper {
			bindings = <
&trans  &trans     &trans     &trans     &trans                                                                              &trans     &trans     &trans     &trans     &trans
&trans  &trans     &trans     &kp LS(K)  &trans     &trans                                                           &trans  &trans     &trans     &trans     &trans     &trans
&trans  &trans     &kp LS(G)  &kp LS(H)  &kp LS(C)  &kp LS(W)                                                        &trans  &kp LS(V)  &kp LS(L)  &kp LS(B)  &trans     &trans
&trans  &kp LS(O)  &kp LS(A)  &kp LS(I)  &kp LS(N)  &trans                                                           &trans  &kp LS(T)  &kp LS(R)  &kp LS(E)  &kp LS(S)  &trans
&trans  &kp LS(J)  &kp LS(F)  &kp LS(U)  &kp LS(P)  &trans     &trans  &trans      &trans    &trans  &trans  &trans  &trans  &kp LS(M)  &kp LS(D)  &kp LS(Y)  &kp LS(X)  &trans
&tog 1  &trans     &kp LS(Q)  &trans     &trans                &trans  &caps_word  &trans    &trans  &trans  &tog 1          &trans     &trans     &kp LS(Z)  &trans     &tog 1
>;};
de {
         bindings = <
&trans  &trans    &trans    &trans    &trans                                                                       &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans    &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &trans    &trans    &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &Oumlaut  &Aumlaut  &trans    &trans  &trans                                                       &trans  &trans  &trans  &trans  &eszet  &trans
&trans  &trans    &trans    &Uumlaut  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans
&to 2   &trans    &trans    &trans    &trans          &trans  &trans  &trans    &trans  &trans  &sk LSHFT          &trans  &trans  &trans  &trans  &to 2
>;};
num {
         bindings = <
&trans  &trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9                                                                    &trans           &trans                &trans                           &trans   &trans
&trans  &trans           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans                                                    &trans  &trans           &trans                &trans                           &trans   &trans
&trans  &trans           &kp N7           &kp N8           &kp N9           &trans                                                    &trans  &kp PERCENT      &kp ASTERISK          &kp SLASH                        &none    &trans
&trans  &kp NUMBER_0     &kp N4           &kp N5           &kp N6           &trans                                                    &trans  &hmr LCTRL LPAR  &hmr LSHIFT KP_EQUAL  &hmr LEFT_ALT RIGHT_PARENTHESIS  &kp DOT  &trans
&trans  &kp KP_NUMBER_0  &kp N1           &kp N2           &kp NUMBER_3     &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp PLUS         &kp MINUS             &kp COMMA                        &trans   &trans
&to 3   &trans           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3          &trans  &trans  &trans    &trans  &trans  &trans          &trans           &trans                &trans                           &trans   &to 3
>;};
nav {
			bindings = <
&trans  &trans          &trans                &trans          &trans                                                                                            &trans     &trans           &trans  &trans  &trans
&trans  &trans          &trans                &kp BACKSPACE   &kp DELETE       &trans                                                                   &trans  &trans     &trans           &trans  &trans  &trans
&trans  &trans          &none                 &masked_home    &masked_end      &trans                                                                   &trans  &kp LCTRL  &kp RIGHT_SHIFT  &none   &none   &trans
&trans  &kp LEFT_SHIFT  &move_selection_left  &kp LEFT_ARROW  &kp RIGHT_ARROW  &move_selection_right                                                    &trans  &kp RCTRL  &kp LEFT_SHIFT   &none   &none   &trans
&trans  &kp LCTRL       &none                 &kp UP_ARROW    &kp DOWN         &trans                 &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp LCTRL  &kp RIGHT_SHIFT  &none   &none   &trans
&tog 4  &trans          &trans                &kp PG_UP       &kp PAGE_DOWN                           &trans  &trans  &trans    &trans  &trans  &trans          &none      &none            &none   &trans  &to 4
>;};
fun {
			bindings = <
&trans  &trans  &trans     &trans     &trans                                                                                                         &trans     &trans     &trans         &trans  &trans
&trans  &trans  &trans     &trans     &trans  &trans                                                                                         &trans  &kp F10    &kp F11    &kp F12        &trans  &trans
&none   &none   &kp LC(Y)  &kp LC(Z)  &none   &none                                                                                          &trans  &kp F7     &kp F8     &kp F9         &trans  &trans
&none   &none   &kp LC(X)  &kp LC(V)  &none   &none                                                                                          &trans  &kp LCTRL  &kp RSHFT  &kp RIGHT_ALT  &trans  &trans
&trans  &none   &kp LC(C)  &kp LC(S)  &none   &none   &kp LC(LA(DELETE))  &kp LG(LC(LS(A)))  &kp LG(LS(LC(Q)))    &trans  &trans  &kp LG(X)  &trans  &kp F1     &kp F2     &kp F3         &none   &trans
&trans  &none   &kp LC(F)  &kp LC(A)  &none           &kp F9              &kp LS(F6)         &none                &none   &none   &kp LG(B)          &kp F4     &kp F5     &kp F6         &none   &none
>;
		};
switcher {
         bindings = <
&trans  &trans  &trans       &trans  &trans                                                                        &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F4       &trans  &kp ESCAPE  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(TAB)  &none   &kp TAB     &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F4  &sc_tab      &trans  &c_tab      &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans      &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans              &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
qwerty {
         bindings = <
&kp F1     &kp F2    &kp F3   &kp F4    &kp F5                                                                                       &kp F6  &kp F7     &kp F8    &kp F9    &kp F10
&kp EQUAL  &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                    &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q     &kp W    &kp E     &kp R      &kp T                                                                     &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC    &kp A     &kp S    &kp D     &kp F      &kp G                                                                     &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp APOS
&kp GRAVE  &kp Z     &kp X    &kp C     &kp V      &kp B   &kp LSHFT  &kp LCTRL  &trans      &trans    &kp LCTRL  &kp LSHFT  &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp PG_UP
&trans     &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp SPACE  &kp ENTER  &kp LALT    &kp RALT  &kp DEL    &kp BSPC           &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp PG_DN
>;};
mouse {
         bindings = <
&trans  &trans  &trans  &trans   &trans                                                                     &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans   &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F17  &kp F18  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F13  &kp F14  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F15  &kp F16  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F19  &kp F20          &trans  &trans  &trans    &trans  &tog 8  &trans          &trans  &trans  &trans  &trans  &trans
>;};
magic {
			bindings = <
&trans      &trans           &trans           &trans           &trans                                                                                                  &trans  &trans  &trans  &trans  &trans
&to 0       &to 0            &to 2            &to 4            &to 3            &to 5                                                                           &to 6  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                 &none  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                 &none  &none   &none   &none   &none   &none
&sys_reset  &none            &none            &none            &none            &none            &bt_2  &bootloader  &none           &none  &bootloader  &none  &none  &none   &none   &none   &none   &sys_reset
&none       &none            &none            &none            &bt BT_CLR                        &bt_0  &bt_1        &out OUT_USB    &none  &none        &none         &none   &none   &none   &none   &bt BT_CLR_ALL
>;
		};type {
         bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
	};
};
