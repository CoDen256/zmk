/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define Layer_Main 0
#define Layer_NAV 1
#define Layer_FUN 2
#define Layer_NUM 3
#define Layer_Magic 4

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };

        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };

        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };

    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #else

    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #endif
};

&sk {
    release-after-ms = <900>;// release after 0.6s
    quick-release;// no double capitalization when rolling keys
};

&sl {
    ignore-modifiers;// allow chording sticky mods & layers

         release-after-ms = <5000>;};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};


/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // num_word: num_word {
        //     compatible = "zmk,behavior-num-word";
        //     #binding-cells = <0>;
        //     layers = <Layer_NUM>; // to be specified in user config using "&num_word { layers = <xx>; };"
        //     continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR EQUAL>;
        //     ignore-numbers;
        // };

        // num_dance: num_dance {
        //     compatible = "zmk,behavior-tap-dance";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&num_word>, <&sl Layer_NUM>;
        // };

        // smart_num: smart_num {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <175>;
        //     bindings = <&mo>, <&num_dance>;
        // };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <350>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <350>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
            hold-trigger-on-release;
        };

        hml_repeat: hml_repeat {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <350>;
            bindings = <&kp>, <&key_repeat>;

            hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
            hold-trigger-on-release;
        };

        hmr_lpar_lt: hmr_lpar_lt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <350>;
            bindings = <&kp>, <&lpar_lt>;

            hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
            hold-trigger-on-release;
        };

        hmr_rpar_gt: hmr_rpar_gt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <350>;
            bindings = <&kp>, <&rpar_gt>;

            hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
            hold-trigger-on-release;
        };

        // &mt { flavor = "tap-preferred"; tapping-term-ms = <220>; quick-tap-ms = <220>; hold-trigger-key-positions = <0>; };

        mt_home: mt_home {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&masked_home>, <&kp>;

            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            hold-trigger-key-positions = <0>;
        };

        mt_end: mt_end {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&masked_end>, <&kp>;

            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            hold-trigger-key-positions = <0>;
        };

        masked_home: masked_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp HOME>;

            mods = <(MOD_LCTL)>;
        };

        masked_end: masked_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp END>;

            mods = <(MOD_LCTL)>;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        // &caps_word {
        // /delete-property/ ignore-modifiers;
        // };
        // smart_num: smart_num { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; flavor = "balanced"; tapping-term-ms = <200>; quick-tap-ms = <175>; bindings = <&mo>, <&num_dance>; };
        // num_dance: num_dance { compatible = "zmk,behavior-tap-dance"; #binding-cells = <0>; tapping-term-ms = <200>; bindings = <&num_word>, <&sl Layer_NUM>; };
        // smart_mouse: smart_mouse { compatible = "zmk,behavior-tri-state"; #binding-cells = <0>; bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>; ignored-key-positions = <26 24 28 29 30 31 32 41 42 43 59 60 61 72 73>; ignored-layers = <MOUSE>; };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kp TAB>;
            ignored-key-positions = <25>;
        };

        // sls: sls { compatible = "zmk,behavior-sticky-key"; #binding-cells = <1>; release-after-ms = <1000>; bindings = <&uc_shift>; ignore-modifiers; };
        // uc_shift: uc_shift { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <0>; tap-ms = <1>; bindings = <&macro_press &mo UC &kp LSHFT> , <&macro_pause_for_release> , <&macro_release &mo UC &kp LSHFT>; };

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };

        comma_inner_morph: comma_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
            bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp DOT>, <&kp COLON>;
        };

        dot_inner_morph: dot_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
            bindings = <&kp COLON>, <&kp GREATER_THAN>;
        };

        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp QMARK>, <&kp EXCL>;
        };

        quote: quote {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LS(SINGLE_QUOTE)>, <&kp SINGLE_QUOTE>;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LPAR>, <&kp LT>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp RPAR>, <&kp GT>;
        };

        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&spc_morph>;
        };

        spc_morph: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp SPACE>, <&dot_spc>;
        };

        dot_spc: dot_spc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
        };

        bs_del: bs_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <MOD_RSFT>;
        };

        copy_cut: copy_cut {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(INS)>, <&kp LC(X)>;
        };

        win_sleep: win_sleep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <500>;
            tap-ms = <50>;
            bindings = <&kp LG(X) &kp U &kp S>;
        };

        // Function arrow: ->

        func_arrow: function_arrow {
            compatible = "zmk,behavior-macro";
            label = "FUNCTION_ARROW";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap>,<&kp MINUS &kp GREATER_THAN>;
        };

        and_short: and_short {
            compatible = "zmk,behavior-macro";
            label = "AND_SHORT";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap>,<&kp AMPERSAND &kp AMPERSAND>;
        };

        or_short: or_short {
            compatible = "zmk,behavior-macro";
            label = "OR_SHORT";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap>,<&kp PIPE &kp PIPE>;
        };

        neq_short: neq_short {
            compatible = "zmk,behavior-macro";
            label = "NEQ_SHORT";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap>,<&kp EXCLAMATION &kp EQUAL>;
        };

        eq_short: eq_short {
            compatible = "zmk,behavior-macro";
            label = "EQ_SHORT";
            #binding-cells = <0>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_tap>,<&kp EQUAL &kp EQUAL>;
        };

        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_word_right>, <&select_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        eq_morph: eq_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
            bindings = <&neq_morph>, <&eq_short>;

            label = "EQ_MORPH";
        };

        neq_morph: neq_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp EQUAL>, <&neq_short>;

            label = "NEQ_MORPH";
        };and_morph: and_morph {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         mods = <(MOD_LSFT|MOD_RSFT)>;
         bindings = <&and_short>, <&kp AMPERSAND>;
         label = "AND_MORPH";};or_morph: or_morph {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         mods = <(MOD_LSFT|MOD_RSFT)>;
         bindings = <&or_short>, <&kp PIPE>;
         label = "OR_MORPH";};grave_morpph: grave_morpph {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         mods = <(MOD_LSFT|MOD_RSFT)>;
         bindings = <&code_block>, <&kp GRAVE>;
         label = "GRAVE_MORPPH";};comment_morph: comment_morph {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         mods = <(MOD_LSFT|MOD_RSFT)>;
         bindings = <&kp HASH>, <&comment>;
         label = "COMMENT_MORPH";};caret_morph:caret_morph {
      compatible = "zmk,behavior-mod-morph";
    
         #binding-cells = <0>;
         mods = <(MOD_LSFT|MOD_RSFT)>;
         bindings = <&kp CARET>, <&kp TILDE>;
         label = "CARET_MORPH";};

        select_word_right: select_word_right {
            compatible = "zmk,behavior-macro";
            wait-ms = <100>;
            tap-ms = <100>;
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
        };

        select_word_left: select_word_left {
            compatible = "zmk,behavior-macro";
            wait-ms = <100>;
            tap-ms = <100>;
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
        };code_block: code_block {
        compatible = "zmk,behavior-macro";
      
         label = "CODE_BLOCK";
         #binding-cells = <0>;
         tap-ms = <0>;
         wait-ms = <0>;
         bindings = <&macro_tap>,<&kp GRAVE &kp GRAVE &kp GRAVE>;};comment: comment {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <100>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp SLASH &kp SLASH>;
         label = "COMMENT";};duplicate_line: duplicate_line {
        compatible = "zmk,behavior-macro";
      
         wait-ms = <100>;
         tap-ms = <100>;
         #binding-cells = <0>;
         bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp RIGHT &kp ENTER &kp LC(V)>;
         label = "DUPLICATE_LINE";};kp_to:new_macro {
        compatible = "zmk,behavior-macro-two-param";
      
         #binding-cells = <2>;
         bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;
         label = "NEW_MACRO";};kp_tog:kp_to {
        compatible = "zmk,behavior-macro-two-param";
      
         #binding-cells = <2>;
         bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &tog MACRO_PLACEHOLDER>;
         label = "KP_TO";};kp_sl: kp_sl {
        compatible = "zmk,behavior-macro-two-param";
      
         #binding-cells = <2>;
         bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>;
         label = "KP_SL";};
    };

    //
    // Glove80 key positions index for positional hold-tap
    // - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
    // - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
    //
    // |------------------------|------------------------|
    // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
    // |                        |                        |
    // |  0  1  2  3  4         |          5  6  7  8  9 |
    // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
    // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
    // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
    // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
    // | 64 65 66 67 68         |         75 76 77 78 79 |
    // |                69 52   |   57 74                |
    // |                 70 53  |  56 73                 |
    // |                  71 54 | 55 72                  |
    // |------------------------|------------------------|
    //

    combos {
        compatible = "zmk,combos";

        // combo_mouse { timeout-ms = <18>; bindings = <&smart_mouse>; key-positions = <24 26>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };

        RT_COMBO {
            bindings = <&kp ESCAPE>;
            key-positions = <41 42>;
        };

        IN_COMBO {
            bindings = <&mo 4>;
            key-positions = <38 37>;
        };

        MD {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <59 60>;
        };

        DY {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <60 61>;
        };

        PU_COMBO {
            bindings = <&quote>;
            key-positions = <49 50>;
        };

        RM_COMBO {
            bindings = <&kp SLASH>;
            key-positions = <59 42>;
        };

        PI {
            bindings = <&kp ASTERISK>;
            key-positions = <50 37>;
        };

        FU {
            bindings = <&eq_morph>;
            key-positions = <49 48>;
        };

        VL {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <29 30>;
        };

        LB {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <30 31>;
        };


        RE {
            bindings = <&mo 1>;
            key-positions = <42 43>;
        };YR {
         bindings = <&kp NON_US_BACKSLASH>;
         key-positions = <61 42>;};GH {
         bindings = <&kp LESS_THAN>;
         key-positions = <24 25>;};CH {
         bindings = <&kp GREATER_THAN>;
         key-positions = <25 26>;};IC {
         bindings = <&kp MINUS>;
         key-positions = <26 37>;};FI {
         bindings = <&kp PLUS>;
         key-positions = <48 37>;};NH {
         bindings = <&func_arrow>;
         key-positions = <38 25>;};VR {
         bindings = <&and_morph>;
         key-positions = <42 29>;};TL {
         bindings = <&or_morph>;
         key-positions = <41 30>;};LE {
         bindings = <&grave_morpph>;
         key-positions = <30 43>;};AH {
         bindings = <&comment_morph>;
         key-positions = <36 25>;};MR {
         bindings = <&kp UNDER>;
         key-positions = <41 60>;};GI {
         bindings = <&kp PERCENT>;
         key-positions = <24 37>;};

        //  combo_grk { timeout-ms = <18>; bindings = <&sl UC>; key-positions = <29 31>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };
        // combo_cpgrk { timeout-ms = <18>; bindings = <&sls 0>; key-positions = <29 30 31>; layers = <Layer_Main Layer_NAV Layer_NUM>; require-prior-idle-ms = <150>; };
    };
};

/* Automatically generated macro definitions */

/ {
    macros {
    };
};

/* Automatically generated keymap */

/ {
    
behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};

behaviors {};
keymap {
        compatible = "zmk,keymap";

magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none  &none  &none  &none  &bt BT_CLR_ALL
&to 0        &to 4            &to 2            &to 4            &to 4            &to 4                                                               &to 1  &to 1  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none  &none
>;
        };
vim_search {
         bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans          &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans          &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans          &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans          &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &kp_to ENTER 2  &trans  &trans  &trans  &trans
>;};
vim {
         bindings = <
&trans      &trans  &trans        &trans  &trans                                                                                                               &trans                &trans        &trans             &trans      &trans
&trans      &trans  &kp ASTERISK  &kp U   &kp HASH      &trans                                                                                 &trans          &kp LEFT_PARENTHESIS  &kp PERCENT   &kp DOUBLE_QUOTES  &trans      &trans
&trans      &kp X   &kp G         &kp D   &kp C         &kp R                                                                                  &kp LEFT_BRACE  &kp V                 &kp_to O 1    &kp_to A 1         &to 1       &trans
&kp PERIOD  &kp J   &kp K         &kp H   &kp L         &kp Z                                                                                  &kp SQT         &kp B                 &kp W         &kp E              &kp_to I 1  &comma_morph
&trans      &kp N   &kp D         &kp Y   &kp P         &kp M   &kp_to SLASH 1  &trans        &trans    &trans  &trans     &kp_to LS(SLASH) 1  &trans          &kp N0                &kp DOLLAR    &kp_sl T 0         &kp_sl F 0  &none
&trans      &kp N9  &kp N7        &kp N5  &kp NUMBER_3          &kp LEFT_SHIFT  &kp NUMBER_1  &trans    &trans  &kp COLON  &kp LCTRL                           &kp NUMBER_2          &kp NUMBER_4  &kp NUMBER_6       &kp N8      &none
>;};
nav {
            bindings = <
&kp F1  &kp F2           &kp F3          &kp F4              &kp F5                                                                                                        &kp F6          &kp F7  &kp F8            &kp F9        &kp F10
&none   &kp N1           &kp LC(A)       &kp LC(Z)           &kp LC(Y)            &kp N5                                                                           &kp N6  &kp N7          &kp N8  &kp N9            &kp N0        &none
&none   &none            &none           &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &select_word                                                                     &none   &none           &none   &none             &trans        &none
&none   &kp UP_ARROW     &kp DOWN_ARROW  &kp LEFT_ARROW      &kp RIGHT            &none                                                                            &none   &none           &none   &none             &none         &none
&none   &kp PG_UP        &kp PAGE_DOWN   &kp HOME            &kp END              &trans        &to 1         &none   &magic 1 0    &magic 1 0  &none  &none       &none   &none           &none   &none             &none         &none
&none   &duplicate_line  &kp LC(X)       &kp LC(C)           &kp LC(V)                          &kp LEFT_ALT  &trans  &none         &none       &none  &kp ESCAPE          &kp LEFT_SHIFT  &none   &kp LEFT_CONTROL  &kp LEFT_GUI  &none
>;
        };
fun {
            bindings = <
&kp F1     &kp F2     &kp F3        &kp F4         &kp F5                                                                                                        &kp F6           &kp F7       &kp F8     &kp F9     &kp F10
&kp EQUAL  &kp N1     &kp N2        &kp NUMBER_3   &kp N4         &kp N5                                                                        &kp N6           &kp N7           &kp N8       &kp N9     &kp N0     &kp MINUS
&kp TAB    &kp F12    &kp F7        &kp F8         &kp F9         &trans                                                                        &kp LC(F6)       &kp LC(LS(ESC))  &kp LA(TAB)  &kp F9     &none      &kp BACKSLASH
&kp ESC    &kp LC(Y)  &hml LALT F4  &hml LSHFT F5  &hml LCTRL F6  &trans                                                                        &kp LC(LA(DEL))  &kp LC(S)        &kp LC(C)    &kp LC(V)  &kp LC(X)  &kp F1
&kp F2     &kp LC(Z)  &kp LC(X)     &none          &kp LC(S)      &none   &kp LG(LC(LS(A)))  &kp LG(LC(LS(Q)))  &none    &trans  &trans  &none  &none            &kp LC(Z)        &kp F9       &kp LC(A)  &kp LC(F)  &to 1
&trans     &kp LC(A)  &kp LC(C)     &none          &kp LC(V)              &kp B              &kp DOWN           &none    &none   &none   &none                   &kp LC(Y)        &none        &none      &none      &none
>;
        };
num {
            bindings = <
&kp F1     &kp F2        &kp F3        &kp F4         &kp F5                                                                        &kp F6  &kp F7    &kp F8  &kp F9  &kp F10
&kp EQUAL  &kp N1        &kp ASTERISK  &kp BSLH       &kp PERCENT    &kp N5                                                 &kp N6  &kp N7  &kp N8    &kp N9  &kp N0  &kp MINUS
&kp TAB    &trans        &kp N7        &kp N8         &kp N9         &trans                                                 &trans  &trans  &trans    &trans  &trans  &kp BACKSLASH
&kp ESC    &hml LGUI N0  &hml LALT N4  &hml LSHFT N5  &hml LCTRL N6  &trans                                                 &trans  &trans  &trans    &trans  &trans  &none
&none      &trans        &kp N1        &kp N2         &kp N3         &trans  &none  &none   &none    &none  &none   &none   &trans  &trans  &trans    &trans  &trans  &none
&none      &none         &kp PLUS      &kp MINUS      &kp EQUAL              &to 1  &trans  &none    &none  &trans  &trans          &none   &kp DOWN  &none   &none   &none
>;
        };
main {
         bindings = <
&kp F1      &kp F2       &kp F3       &kp F4        &kp F5                                                                                                      &kp F6        &none          &kp C_MUTE   &kp C_VOL_DN  &kp C_VOLUME_UP
&none       &kp N1       &kp N2       &kp K         &kp N4        &kp N5                                                                            &kp N6      &kp N7        &kp_tog ESC 2  &kp N9       &kp N0        &kp MINUS
&none       &none        &kp G        &kp H         &kp C         &kp W                                                                             &qexcl      &kp V         &kp L          &kp B        &none         &none
&dot_morph  &hml LGUI O  &hml LALT A  &hml LSHFT I  &hml LCTRL N  &caret_morph                                                                      &kp DOLLAR  &hmr LCTRL T  &hmr RSHFT R   &hmr LALT E  &hmr LGUI S   &comma_morph
&none       &kp J        &kp F        &kp U         &kp P         &none         &smart_shft  &none  &magic 3 0    &magic 3 0  &none  &none          &trans      &kp M         &kp D          &kp Y        &kp X         &none
&none       &none        &kp Q        &mo 4         &kp TAB                     &kp SPACE    &none  &none         &win_sleep  &none  &kp BACKSPACE              &kp RET       &tog 4         &kp Z        &none         &none
>;};
browser {
         bindings = <
&trans  &trans  &trans  &trans           &trans                                                                         &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans           &trans       &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans           &trans       &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp LC(LS(TAB))  &kp LC(TAB)  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans           &trans       &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans           &trans               &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
    };
};
