/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define Layer_Main 0
#define Layer_NAV 1
#define Layer_FUN 2
#define Layer_NUM 3
#define Layer_Magic 4

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

	behaviors {
		bt_0: bt_0 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_0";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_0>, <&bt BT_DISC 0>;
		};

		bt_1: bt_1 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_1";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_1>, <&bt BT_DISC 1>;
		};

		bt_2: bt_2 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_2";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_2>, <&bt BT_DISC 2>;
		};

		bt_3: bt_3 {
			compatible = "zmk,behavior-tap-dance";
			label = "BT_3";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&bt_select_3>, <&bt BT_DISC 3>;
		};
	};

	macros {
		bt_select_0: bt_select_0 {
			label = "BT_SELECT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_select_1: bt_select_1 {
			label = "BT_SELECT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_select_2: bt_select_2 {
			label = "BT_SELECT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_select_3: bt_select_3 {
			label = "BT_SELECT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #else

	macros {
		bt_0: bt_0 {
			label = "BT_0";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 0>;
		};

		bt_1: bt_1 {
			label = "BT_1";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 1>;
		};

		bt_2: bt_2 {
			label = "BT_2";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 2>;
		};

		bt_3: bt_3 {
			label = "BT_3";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&out OUT_BLE &bt BT_SEL 3>;
		};
	};

    #endif
};

&sk {
	release-after-ms = <900>;// release after 0.6s
	quick-release;// no double capitalization when rolling keys
};

&sl {
	ignore-modifiers;// allow chording sticky mods & layers

release-after-ms = <5000>;};

&lt {
	flavor = "balanced";
	tapping-term-ms = <200>;
	quick-tap-ms = <175>;
};


/ {
	behaviors {
		magic: magic {
			compatible = "zmk,behavior-hold-tap";
			label = "MAGIC_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			bindings = <&mo>, <&rgb_ug_status_macro>;
		};

		lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings = <&macro_param_1to1>,<&macro_press>,<&mo MACRO_PLACEHOLDER &macro_param_2to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_2to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER &macro_param_1to1>,<&macro_release>,<&mo MACRO_PLACEHOLDER>;
        };

		hml: hml {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <270>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hmr: hmr {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <350>;
			bindings = <&kp>, <&kp>;

			hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
			hold-trigger-on-release;
		};

		hlctrl:hlctrl {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;

			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <220>;
			hold-trigger-key-positions = <0>;
		};


		masked_home: masked_home {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp HOME>, <&hlctrl LC(HOME) HOME>;
			mods = <(MOD_LCTL)>;
		};

		masked_end: masked_end {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp END>, <&hlctrl LC(END) END>;
			mods = <(MOD_LCTL)>;
		};

		swapper: swapper {
			compatible = "zmk,behavior-tri-state";
			#binding-cells = <0>;
			bindings = <&kp TAB>;
			ignored-key-positions = <25>;
		};

		copy_cut: copy_cut {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LC(INS)>, <&kp LC(X)>;
		};


/*<macros-start>*/

        reloadkeymap: reloadkeymap { label = "RELOADKEYMAP"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp LA(K) &kp TAB &kp TAB &kp SPACE &kp SPACE>;
        };

        mleft: mleft { label = "MLEFT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp F13>;
        };

        mright: mright { label = "MRIGHT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp F14>;
        };

        mup: mup { label = "MUP"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp F15>;
        };

        mdown: mdown { label = "MDOWN"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp F16>;
        };

        mlclick: mlclick { label = "MLCLICK"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp F17>;
        };

        mrclick: mrclick { label = "MRCLICK"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp F18>;
        };

        mscrollup: mscrollup { label = "MSCROLLUP"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp F19>;
        };

        mscrolldown: mscrolldown { label = "MSCROLLDOWN"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp F20>;
        };

        cut_line: cut_line { label = "CUT_LINE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&select_line &kp K_CUT &kp DELETE>;
        };

        move_down: move_down { label = "MOVE_DOWN"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&cut_line &kp DOWN &kp K_PASTE>;
        };

        move_up: move_up { label = "MOVE_UP"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&cut_line &kp UP_ARROW &kp K_PASTE>;
        };

        select_word: select_word { label = "SELECT_WORD"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&select_word_right>, <&select_word_left>;
        };

        select_line: select_line { label = "SELECT_LINE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp HOME &kp LS(END)>;
        };

        delete_word: delete_word { label = "DELETE_WORD"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&select_word &kp BACKSPACE>;
        };

        delete_line: delete_line { label = "DELETE_LINE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&select_line &kp BACKSPACE &kp BACKSPACE>;
        };

        copy_line: copy_line { label = "COPY_LINE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp LC(RIGHT)>;
        };

        select_word_right: select_word_right { label = "SELECT_WORD_RIGHT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
        };

        select_word_left: select_word_left { label = "SELECT_WORD_LEFT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
        };

        duplicate_line: duplicate_line { label = "DUPLICATE_LINE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp RIGHT &kp ENTER &kp LC(V)>;
        };

        move_selection_right: move_selection_right { label = "MOVE_SELECTION_RIGHT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp LC(X) &kp RIGHT &kp LA(LC(V))>;
        };

        move_selection_left: move_selection_left { label = "MOVE_SELECTION_LEFT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp LC(X) &kp LEFT &kp LA(LC(V))>;
        };

        G3_key: G3_key { label = "G3_KEY"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&none>;
        };

        C5_key: C5_key { label = "C5_KEY"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp F9>;
        };

        CS_key: CS_key { label = "CS_KEY"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp LG(F10)>;
        };

        GG_key: GG_key { label = "GG_KEY"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp CARET>;
        };

        ampersand_ampersand: ampersand_ampersand { label = "AMPERSAND_AMPERSAND"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp AMPERSAND>, <&kp AMPERSAND>;
        };

        kp_amp: kp_amp { label = "KP_AMP"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp AMPERSAND>;
        };

        pipe_pipe: pipe_pipe { label = "PIPE_PIPE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp PIPE>, <&kp PIPE>;
        };

        kp_pipe: kp_pipe { label = "KP_PIPE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp PIPE>;
        };

        backslash_backslash: backslash_backslash { label = "BACKSLASH_BACKSLASH"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp BACKSLASH>, <&kp BACKSLASH>;
        };

        kp_bac: kp_bac { label = "KP_BAC"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp BACKSLASH>;
        };

        slash_slash: slash_slash { label = "SLASH_SLASH"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp SLASH>, <&kp SLASH>;
        };

        kp_slash: kp_slash { label = "KP_SLASH"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp SLASH>;
        };

        equal_equal: equal_equal { label = "EQUAL_EQUAL"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp EQUAL>, <&kp EQUAL>;
        };

        colon_space: colon_space { label = "COLON_SPACE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp COLON>, <&kp SPACE>;
        };

        kp_colon: kp_colon { label = "KP_COLON"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp COLON>;
        };

        exc_equal: exc_equal { label = "EXC_EQUAL"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp EXCLAMATION>, <&kp EQUAL>;
        };

        less_than_gre_tha_left_arrow: less_than_gre_tha_left_arrow { label = "LESS_THAN_GRE_THA_LEFT_ARROW"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp LESS_THAN>, <&kp GREATER_THAN>, <&kp LEFT_ARROW>;
        };

        kp_les_tha: kp_les_tha { label = "KP_LES_THA"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp LESS_THAN>;
        };

        lef_par_rig_par_left_arrow: lef_par_rig_par_left_arrow { label = "LEF_PAR_RIG_PAR_LEFT_ARROW"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>, <&kp LEFT_ARROW>;
        };

        kp_lef_par: kp_lef_par { label = "KP_LEF_PAR"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp LEFT_PARENTHESIS>;
        };

        grave_grave_grave: grave_grave_grave { label = "GRAVE_GRAVE_GRAVE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp GRAVE>, <&kp GRAVE>, <&kp GRAVE>;
        };

        kp_grave: kp_grave { label = "KP_GRAVE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp GRAVE>;
        };

        comma_space: comma_space { label = "COMMA_SPACE"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp COMMA>, <&kp SPACE>;
        };

        kp_comma: kp_comma { label = "KP_COMMA"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp COMMA>;
        };

        semicolon_enter: semicolon_enter { label = "SEMICOLON_ENTER"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp SEMICOLON>, <&kp ENTER>;
        };

        kp_sem: kp_sem { label = "KP_SEM"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp SEMICOLON>;
        };

        minus_gre_tha: minus_gre_tha { label = "MINUS_GRE_THA"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp MINUS>, <&kp GREATER_THAN>;
        };

        left_brace_rig_bra_left_arrow: left_brace_rig_bra_left_arrow { label = "LEFT_BRACE_RIG_BRA_LEFT_ARROW"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>, <&kp LEFT_ARROW>;
        };

        kp_lef_bra: kp_lef_bra { label = "KP_LEF_BRA"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp LEFT_BRACKET>;
        };

        lef_bra_rig_bra_left_arrow: lef_bra_rig_bra_left_arrow { label = "LEF_BRA_RIG_BRA_LEFT_ARROW"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_tap>, <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>, <&kp LEFT_ARROW>;
        };

        press_kp_lef_alt_0_2_1_4_kp_lalt: press_kp_lef_alt_0_2_1_4_kp_lalt { label = "PRESS_KP_LEF_ALT_0_2_1_4_KP_LALT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LEFT_ALT>, <&macro_tap>, <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_1 &kp KP_NUMBER_4>, <&macro_release>, <&kp LALT>;
        };

        press_kp_lef_alt_0_2_4_6_kp_lalt: press_kp_lef_alt_0_2_4_6_kp_lalt { label = "PRESS_KP_LEF_ALT_0_2_4_6_KP_LALT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LEFT_ALT>, <&macro_tap>, <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_4 &kp KP_NUMBER_6>, <&macro_release>, <&kp LALT>;
        };

        press_kp_lef_alt_0_1_9_6_kp_lalt: press_kp_lef_alt_0_1_9_6_kp_lalt { label = "PRESS_KP_LEF_ALT_0_1_9_6_KP_LALT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LEFT_ALT>, <&macro_tap>, <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_9 &kp KP_NUMBER_6>, <&macro_release>, <&kp LALT>;
        };

        press_kp_lef_alt_0_2_2_8_kp_lalt: press_kp_lef_alt_0_2_2_8_kp_lalt { label = "PRESS_KP_LEF_ALT_0_2_2_8_KP_LALT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LEFT_ALT>, <&macro_tap>, <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_2 &kp KP_NUMBER_8>, <&macro_release>, <&kp LALT>;
        };

        press_kp_lef_alt_0_2_2_0_kp_lalt: press_kp_lef_alt_0_2_2_0_kp_lalt { label = "PRESS_KP_LEF_ALT_0_2_2_0_KP_LALT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LEFT_ALT>, <&macro_tap>, <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_2 &kp KP_NUMBER_0>, <&macro_release>, <&kp LALT>;
        };

        press_kp_lef_alt_0_2_5_2_kp_lalt: press_kp_lef_alt_0_2_5_2_kp_lalt { label = "PRESS_KP_LEF_ALT_0_2_5_2_KP_LALT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LEFT_ALT>, <&macro_tap>, <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_5 &kp KP_NUMBER_2>, <&macro_release>, <&kp LALT>;
        };

        press_kp_lef_alt_0_7_8_3_8_kp_lalt: press_kp_lef_alt_0_7_8_3_8_kp_lalt { label = "PRESS_KP_LEF_ALT_0_7_8_3_8_KP_LALT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LEFT_ALT>, <&macro_tap>, <&kp KP_NUMBER_0 &kp KP_NUMBER_7 &kp KP_NUMBER_8 &kp KP_NUMBER_3 &kp KP_NUMBER_8>, <&macro_release>, <&kp LALT>;
        };

        press_kp_lef_alt_0_2_2_3_kp_lalt: press_kp_lef_alt_0_2_2_3_kp_lalt { label = "PRESS_KP_LEF_ALT_0_2_2_3_KP_LALT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LEFT_ALT>, <&macro_tap>, <&kp KP_NUMBER_0 &kp KP_NUMBER_2 &kp KP_NUMBER_2 &kp KP_NUMBER_3>, <&macro_release>, <&kp LALT>;
        };

        press_lnav_lctrl_lnav_lctrl: press_lnav_lctrl_lnav_lctrl { label = "PRESS_LNAV_LCTRL_LNAV_LCTRL"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&lnav LCTRL>, <&macro_pause_for_release>, <&macro_release>, <&lnav LCTRL>;
        };

        kp_g: kp_g { label = "KP_G"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp G>;
        };

        press_lsw_lal_lsw_lal: press_lsw_lal_lsw_lal { label = "PRESS_LSW_LAL_LSW_LAL"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&lswitcher LALT>, <&macro_pause_for_release>, <&macro_release>, <&lswitcher LALT>;
        };

        kp_h: kp_h { label = "KP_H"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp H>;
        };

        press_kp_lalt_kp_lalt: press_kp_lalt_kp_lalt { label = "PRESS_KP_LALT_KP_LALT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LALT>, <&macro_pause_for_release>, <&macro_release>, <&kp LALT>;
        };

        kp_a: kp_a { label = "KP_A"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp A>;
        };

        press_kp_lshift_kp_lshift: press_kp_lshift_kp_lshift { label = "PRESS_KP_LSHIFT_KP_LSHIFT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LSHIFT>, <&macro_pause_for_release>, <&macro_release>, <&kp LSHIFT>;
        };

        kp_i: kp_i { label = "KP_I"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp I>;
        };

        press_kp_lctrl_kp_lctrl: press_kp_lctrl_kp_lctrl { label = "PRESS_KP_LCTRL_KP_LCTRL"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LCTRL>, <&macro_pause_for_release>, <&macro_release>, <&kp LCTRL>;
        };

        kp_n: kp_n { label = "KP_N"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp N>;
        };

        press_mo_4_mo_4: press_mo_4_mo_4 { label = "PRESS_MO_4_MO_4"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&mo 4>, <&macro_pause_for_release>, <&macro_release>, <&mo 4>;
        };

        kp_f: kp_f { label = "KP_F"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp F>;
        };

        press_kp_lgui_kp_lgui: press_kp_lgui_kp_lgui { label = "PRESS_KP_LGUI_KP_LGUI"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp LS(LA(LGUI))>, <&macro_pause_for_release>, <&macro_release>, <&kp LS(LA(LGUI))>;
        };

        kp_u: kp_u { label = "KP_U"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp U>;
        };

        press_lnav_ralt_lnav_ralt: press_lnav_ralt_lnav_ralt { label = "PRESS_LNAV_RALT_LNAV_RALT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&lnav RALT>, <&macro_pause_for_release>, <&macro_release>, <&lnav RALT>;
        };

        kp_b: kp_b { label = "KP_B"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp B>;
        };

        press_kp_rctrl_kp_rctrl: press_kp_rctrl_kp_rctrl { label = "PRESS_KP_RCTRL_KP_RCTRL"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp RCTRL>, <&macro_pause_for_release>, <&macro_release>, <&kp RCTRL>;
        };

        kp_t: kp_t { label = "KP_T"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp T>;
        };

        press_kp_rshift_kp_rshift: press_kp_rshift_kp_rshift { label = "PRESS_KP_RSHIFT_KP_RSHIFT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp RSHIFT>, <&macro_pause_for_release>, <&macro_release>, <&kp RSHIFT>;
        };

        kp_r: kp_r { label = "KP_R"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp R>;
        };

        press_kp_ralt_kp_ralt: press_kp_ralt_kp_ralt { label = "PRESS_KP_RALT_KP_RALT"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp RALT>, <&macro_pause_for_release>, <&macro_release>, <&kp RALT>;
        };

        kp_e: kp_e { label = "KP_E"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp E>;
        };

        press_mo_3_mo_3: press_mo_3_mo_3 { label = "PRESS_MO_3_MO_3"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&mo 3>, <&macro_pause_for_release>, <&macro_release>, <&mo 3>;
        };

        kp_m: kp_m { label = "KP_M"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp M>;
        };

        press_kp_rgui_kp_rgui: press_kp_rgui_kp_rgui { label = "PRESS_KP_RGUI_KP_RGUI"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&macro_press>, <&kp RS(RA(RGUI))>, <&macro_pause_for_release>, <&macro_release>, <&kp RS(RA(RGUI))>;
        };

        kp_d: kp_d { label = "KP_D"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp D>;
        };

        kp_y: kp_y { label = "KP_Y"; #binding-cells = <0>; compatible = "zmk,behavior-macro"; 
            
            bindings = <&kp Y>;
        };
/*<macros-end>*/


        hml_lt:hml_lt {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&mo>, <&kp>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LT";};

         hmr_lt:hmr_lt {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&mo>, <&kp>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LT";};

         hml_lswit:hml_lswit {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         bindings = <&lswitcher>, <&kp>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LSWIT";};

         hmr_lswit:hmr_lswit {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LSWIT";
         bindings = <&lswitcher>, <&kp>;};

         hml_lnav: hml_lnav {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LNAV";
         bindings = <&lnav>, <&kp>;};

         hmr_lnav: hmr_lnav {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <27 26 25 24 23 39 38 37 36 35 51 50 49 48 47 68 67 66 65 64 15 14 13 12 11 10 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HMR_LNAV";
         bindings = <&lnav>, <&kp>;};

         hml_lfun: hml_lfun {
      compatible = "zmk,behavior-hold-tap";

         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <350>;
         hold-trigger-key-positions = <28 29 30 31 32 40 41 42 43 44 58 59 60 61 62 75 76 77 78 79 69 70 71 72 73 74>;
         hold-trigger-on-release;
         label = "HML_LFUN";
         bindings = <&lfun>, <&kp>;};


/*<mods-start>*/

        GH_delegate:GH_delegate { label = "GH_DELEGATE"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <90>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&ampersand_ampersand>, <&kp_amp>;
        };

        HC_delegate:HC_delegate { label = "HC_DELEGATE"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <90>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&pipe_pipe>, <&kp_pipe>;
        };

        GI_delegate:GI_delegate { label = "GI_DELEGATE"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <90>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&backslash_backslash>, <&kp_bac>;
        };

        HA_delegate:HA_delegate { label = "HA_DELEGATE"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <120>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&slash_slash>, <&kp_slash>;
        };

        AI_delegate:AI_delegate { label = "AI_DELEGATE"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <90>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&colon_space>, <&kp_colon>;
        };

        FU_delegate_hold_tap:FU_delegate_hold_tap { label = "FU_DELEGATE_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&less_than_gre_tha_left_arrow>, <&kp_les_tha>;
        };

        PU_delegate_hold_tap:PU_delegate_hold_tap { label = "PU_DELEGATE_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&lef_par_rig_par_left_arrow>, <&kp_lef_par>;
        };

        TL_delegate:TL_delegate { label = "TL_DELEGATE"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <120>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&grave_grave_grave>, <&kp_grave>;
        };

        TR_delegate:TR_delegate { label = "TR_DELEGATE"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <90>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&comma_space>, <&kp_comma>;
        };

        RE_delegate:RE_delegate { label = "RE_DELEGATE"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <90>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&semicolon_enter>, <&kp_sem>;
        };

        MD_delegate_hold_tap:MD_delegate_hold_tap { label = "MD_DELEGATE_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&left_brace_rig_bra_left_arrow>, <&kp_lef_bra>;
        };

        DY_delegate_hold_tap:DY_delegate_hold_tap { label = "DY_DELEGATE_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&lef_bra_rig_bra_left_arrow>, <&kp_lef_bra>;
        };

        G_key_hold_tap:G_key_hold_tap { label = "G_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <26 38>;
            bindings = <&press_lnav_lctrl_lnav_lctrl>, <&kp_g>;
        };

        H_key_hold_tap:H_key_hold_tap { label = "H_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <26 24 38>;
            bindings = <&press_lsw_lal_lsw_lal>, <&kp_h>;
        };

        A_key_hold_tap:A_key_hold_tap { label = "A_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_kp_lalt_kp_lalt>, <&kp_a>;
        };

        I_key_hold_tap:I_key_hold_tap { label = "I_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <24 26 36 38 48 50 27 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_kp_lshift_kp_lshift>, <&kp_i>;
        };

        N_key_hold_tap:N_key_hold_tap { label = "N_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_kp_lctrl_kp_lctrl>, <&kp_n>;
        };

        F_key_hold_tap:F_key_hold_tap { label = "F_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <25 26 50 38 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_mo_4_mo_4>, <&kp_f>;
        };

        U_key_hold_tap:U_key_hold_tap { label = "U_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <480>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_kp_lgui_kp_lgui>, <&kp_u>;
        };

        B_key_hold_tap:B_key_hold_tap { label = "B_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_lnav_ralt_lnav_ralt>, <&kp_b>;
        };

        T_key_hold_tap:T_key_hold_tap { label = "T_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_kp_rctrl_kp_rctrl>, <&kp_t>;
        };

        R_key_hold_tap:R_key_hold_tap { label = "R_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_kp_rshift_kp_rshift>, <&kp_r>;
        };

        E_key_hold_tap:E_key_hold_tap { label = "E_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_kp_ralt_kp_ralt>, <&kp_e>;
        };

        M_key_hold_tap:M_key_hold_tap { label = "M_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_mo_3_mo_3>, <&kp_m>;
        };

        D_key_hold_tap:D_key_hold_tap { label = "D_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <480>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_kp_rgui_kp_rgui>, <&kp_d>;
        };

        Y_key_hold_tap:Y_key_hold_tap { label = "Y_KEY_HOLD_TAP"; #binding-cells = <2>; compatible = "zmk,behavior-hold-tap";  
            flavor = "balanced"; hold-trigger-on-release; tapping-term-ms = <280>; quick-tap-ms = <175>; require-prior-idle-ms = <200>; hold-trigger-key-positions = <13 24 25 26 27 35 36 37 38 47 48 49 50 66 12 14 23 15 34 39 51 67 68 65 29 30 31 41 42 43 44 59 60 61 62 77 16 17 18 19 32 45 28 40 58 75 76 78>;
            bindings = <&press_mo_4_mo_4>, <&kp_y>;
        };

        OE_key:OE_key { label = "OE_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&press_kp_lef_alt_0_2_4_6_kp_lalt>, <&press_kp_lef_alt_0_2_1_4_kp_lalt>;
            mods = <(MOD_LSFT)>;
            
        };

        AE_key:AE_key { label = "AE_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&press_kp_lef_alt_0_2_2_8_kp_lalt>, <&press_kp_lef_alt_0_1_9_6_kp_lalt>;
            mods = <(MOD_LSFT)>;
            
        };

        UE_key:UE_key { label = "UE_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&press_kp_lef_alt_0_2_5_2_kp_lalt>, <&press_kp_lef_alt_0_2_2_0_kp_lalt>;
            mods = <(MOD_LSFT)>;
            
        };

        SS_key:SS_key { label = "SS_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&press_kp_lef_alt_0_2_2_3_kp_lalt>, <&press_kp_lef_alt_0_7_8_3_8_kp_lalt>;
            mods = <(MOD_LSFT)>;
            
        };

        K_key:K_key { label = "K_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp K>, <&K_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        K_key_rshift_sink:K_key_rshift_sink { label = "K_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F1)>, <&kp K>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        G_key:G_key { label = "G_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&G_key_lshift_link>, <&G_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        G_key_lshift_link:G_key_lshift_link { label = "G_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&G_key_hold_tap 0 0>, <&G_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        G_key_lshift_sink:G_key_lshift_sink { label = "G_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(X)>, <&G_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        G_key_rshift_sink:G_key_rshift_sink { label = "G_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F2)>, <&G_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        H_key:H_key { label = "H_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&H_key_hold_tap 0 0>, <&H_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        H_key_rshift_sink:H_key_rshift_sink { label = "H_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F3)>, <&H_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        C_key:C_key { label = "C_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&C_key_rshift_link>, <&C_key_rctrl_sink>;
            mods = <(MOD_RCTL)>;
            
        };

        C_key_lshift_link:C_key_lshift_link { label = "C_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp C>, <&C_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        C_key_rshift_link:C_key_rshift_link { label = "C_KEY_RSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&C_key_lshift_link>, <&C_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        C_key_lshift_sink:C_key_lshift_sink { label = "C_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp C>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        C_key_rshift_sink:C_key_rshift_sink { label = "C_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F4)>, <&kp C>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        C_key_rctrl_sink:C_key_rctrl_sink { label = "C_KEY_RCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RC(F4)>, <&kp C>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
        };

        W_key:W_key { label = "W_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&W_key_lshift_link>, <&W_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        W_key_lshift_link:W_key_lshift_link { label = "W_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp W>, <&W_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        W_key_lshift_sink:W_key_lshift_sink { label = "W_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(A)>, <&kp W>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        W_key_rshift_sink:W_key_rshift_sink { label = "W_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F5)>, <&kp W>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        O_key:O_key { label = "O_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&O_key_lshift_link>, <&O_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        O_key_lshift_link:O_key_lshift_link { label = "O_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp O>, <&O_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        O_key_lshift_sink:O_key_lshift_sink { label = "O_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F6)>, <&kp O>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        O_key_rshift_sink:O_key_rshift_sink { label = "O_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F6)>, <&kp O>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        A_key:A_key { label = "A_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&A_key_lctrl_link>, <&A_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        A_key_lshift_link:A_key_lshift_link { label = "A_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&A_key_hold_tap 0 0>, <&A_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        A_key_rctrl_link:A_key_rctrl_link { label = "A_KEY_RCTRL_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&A_key_lshift_link>, <&A_key_rctrl_sink>;
            mods = <(MOD_RCTL)>;
            
        };

        A_key_lctrl_link:A_key_lctrl_link { label = "A_KEY_LCTRL_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&A_key_rctrl_link>, <&A_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        A_key_lshift_sink:A_key_lshift_sink { label = "A_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&A_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        A_key_rctrl_sink:A_key_rctrl_sink { label = "A_KEY_RCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RC(F7)>, <&A_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RGUI|MOD_RSFT)>;
        };

        A_key_lctrl_sink:A_key_lctrl_sink { label = "A_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F7)>, <&A_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        A_key_rshift_sink:A_key_rshift_sink { label = "A_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F7)>, <&A_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        I_key:I_key { label = "I_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&I_key_lshift_link>, <&I_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        I_key_lshift_link:I_key_lshift_link { label = "I_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&I_key_hold_tap 0 0>, <&I_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        I_key_lshift_sink:I_key_lshift_sink { label = "I_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&I_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        I_key_rshift_sink:I_key_rshift_sink { label = "I_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F8)>, <&I_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        N_key:N_key { label = "N_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&N_key_lshift_link>, <&N_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        N_key_lshift_link:N_key_lshift_link { label = "N_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&N_key_hold_tap 0 0>, <&N_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        N_key_lshift_sink:N_key_lshift_sink { label = "N_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(S)>, <&N_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        N_key_rshift_sink:N_key_rshift_sink { label = "N_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F9)>, <&N_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        J_key:J_key { label = "J_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp J>, <&J_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        J_key_rshift_sink:J_key_rshift_sink { label = "J_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F10)>, <&kp J>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        F_key:F_key { label = "F_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&F_key_lshift_link>, <&F_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        F_key_lshift_link:F_key_lshift_link { label = "F_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&F_key_hold_tap 0 0>, <&F_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        F_key_lshift_sink:F_key_lshift_sink { label = "F_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F)>, <&F_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        F_key_rshift_sink:F_key_rshift_sink { label = "F_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F11)>, <&F_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        U_key:U_key { label = "U_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&U_key_hold_tap 0 0>, <&U_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        U_key_rshift_sink:U_key_rshift_sink { label = "U_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F12)>, <&U_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        P_key:P_key { label = "P_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&P_key_lshift_link>, <&P_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        P_key_lshift_link:P_key_lshift_link { label = "P_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp P>, <&P_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        P_key_lshift_sink:P_key_lshift_sink { label = "P_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(V)>, <&kp P>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        P_key_rshift_sink:P_key_rshift_sink { label = "P_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RS(F13)>, <&kp P>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        Q_key:Q_key { label = "Q_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&Q_key_lshift_link>, <&Q_key_rshift_sink>;
            mods = <(MOD_RSFT)>;
            
        };

        Q_key_lshift_link:Q_key_lshift_link { label = "Q_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp Q>, <&Q_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        Q_key_lshift_sink:Q_key_lshift_sink { label = "Q_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(Y)>, <&kp Q>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Q_key_rshift_sink:Q_key_rshift_sink { label = "Q_KEY_RSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp RC(CARET)>, <&kp Q>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI)>;
        };

        V_key:V_key { label = "V_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&V_key_lshift_link>, <&V_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        V_key_lshift_link:V_key_lshift_link { label = "V_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp V>, <&V_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        V_key_lshift_sink:V_key_lshift_sink { label = "V_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F14)>, <&kp V>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        V_key_lctrl_sink:V_key_lctrl_sink { label = "V_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F14)>, <&kp V>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        L_key:L_key { label = "L_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp L>, <&L_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        L_key_lshift_sink:L_key_lshift_sink { label = "L_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F15)>, <&kp L>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        B_key:B_key { label = "B_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&B_key_hold_tap 0 0>, <&B_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        B_key_lshift_sink:B_key_lshift_sink { label = "B_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F16)>, <&B_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        T_key:T_key { label = "T_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&T_key_hold_tap 0 0>, <&T_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        T_key_lshift_sink:T_key_lshift_sink { label = "T_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F17)>, <&T_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        R_key:R_key { label = "R_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&R_key_hold_tap 0 0>, <&R_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        R_key_lshift_sink:R_key_lshift_sink { label = "R_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F18)>, <&R_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        E_key:E_key { label = "E_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&E_key_hold_tap 0 0>, <&E_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        E_key_lshift_sink:E_key_lshift_sink { label = "E_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F19)>, <&E_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        S_key:S_key { label = "S_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&S_key_lshift_link>, <&S_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        S_key_lshift_link:S_key_lshift_link { label = "S_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp S>, <&S_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        S_key_lshift_sink:S_key_lshift_sink { label = "S_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F20)>, <&kp S>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        S_key_lctrl_sink:S_key_lctrl_sink { label = "S_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F20)>, <&kp S>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        M_key:M_key { label = "M_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&M_key_hold_tap 0 0>, <&M_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        M_key_lshift_sink:M_key_lshift_sink { label = "M_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F21)>, <&M_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        D_key:D_key { label = "D_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&D_key_hold_tap 0 0>, <&D_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        D_key_lshift_sink:D_key_lshift_sink { label = "D_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F22)>, <&D_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Y_key:Y_key { label = "Y_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&Y_key_lshift_link>, <&Y_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        Y_key_lshift_link:Y_key_lshift_link { label = "Y_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&Y_key_hold_tap 0 0>, <&Y_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        Y_key_lshift_sink:Y_key_lshift_sink { label = "Y_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F23)>, <&Y_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Y_key_lctrl_sink:Y_key_lctrl_sink { label = "Y_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F23)>, <&Y_key_hold_tap 0 0>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        X_key:X_key { label = "X_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&X_key_lshift_link>, <&X_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        X_key_lshift_link:X_key_lshift_link { label = "X_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp X>, <&X_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        X_key_lshift_sink:X_key_lshift_sink { label = "X_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(F24)>, <&kp X>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        X_key_lctrl_sink:X_key_lctrl_sink { label = "X_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(F24)>, <&kp X>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Z_key:Z_key { label = "Z_KEY"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&Z_key_lshift_link>, <&Z_key_lctrl_sink>;
            mods = <(MOD_LCTL)>;
            
        };

        Z_key_lshift_link:Z_key_lshift_link { label = "Z_KEY_LSHIFT_LINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp Z>, <&Z_key_lshift_sink>;
            mods = <(MOD_LSFT)>;
            
        };

        Z_key_lshift_sink:Z_key_lshift_sink { label = "Z_KEY_LSHIFT_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LS(TILDE)>, <&kp Z>;
            mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        Z_key_lctrl_sink:Z_key_lctrl_sink { label = "Z_KEY_LCTRL_SINK"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&kp LC(TILDE)>, <&kp Z>;
            mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
            keep-mods = <(MOD_LALT|MOD_LGUI|MOD_LSFT|MOD_RALT|MOD_RCTL|MOD_RGUI|MOD_RSFT)>;
        };

        FU_delegate:FU_delegate { label = "FU_DELEGATE"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&FU_delegate_hold_tap 0 0>, <&kp GREATER_THAN>;
            mods = <(MOD_RCTL)>;
            
        };

        PU_delegate:PU_delegate { label = "PU_DELEGATE"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&PU_delegate_hold_tap 0 0>, <&kp RIGHT_PARENTHESIS>;
            mods = <(MOD_RCTL)>;
            
        };

        MD_delegate:MD_delegate { label = "MD_DELEGATE"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&MD_delegate_hold_tap 0 0>, <&kp RIGHT_BRACE>;
            mods = <(MOD_LCTL)>;
            
        };

        DY_delegate:DY_delegate { label = "DY_DELEGATE"; compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>;
            bindings = <&DY_delegate_hold_tap 0 0>, <&kp RIGHT_BRACKET>;
            mods = <(MOD_LCTL)>;
            
        };
/*<mods-end>*/
		kp_to:kp_to {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &to MACRO_PLACEHOLDER>;
		label = "KP_TO";};

		kp_tog:kp_tog {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &tog MACRO_PLACEHOLDER>;
		label = "KP_TOG";};

		kp_sl: kp_sl {
			compatible = "zmk,behavior-macro-two-param";

			#binding-cells = <2>;
			bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>;
		label = "KP_SL";};

         lnav: lnav {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 4 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 4>,<&macro_press>;
         label = "LNAV";};

         lfun: lfun {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 4 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 4>,<&macro_press>;
         label = "LFUN";};

         lswitcher: lswitcher {
        compatible = "zmk,behavior-macro-one-param";

         wait-ms = <0>;
         tap-ms = <0>;
         #binding-cells = <1>;
         bindings = <&macro_press>,<&mo 6 &macro_param_1to1>,<&macro_press>,<&kp MACRO_PLACEHOLDER>,<&macro_pause_for_release>,<&macro_param_1to1>,<&macro_release>,<&kp MACRO_PLACEHOLDER>,<&macro_release>,<&mo 6>,<&macro_press>;
         label = "LSWITCHER";};
    };

	//
	// Glove80 key positions index for positional hold-tap
	// - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
	// - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
	//
	// |------------------------|------------------------|
	// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
	// |                        |                        |
	// |  0  1  2  3  4         |          5  6  7  8  9 |
	// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
	// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
	// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
	// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
	// | 64 65 66 67 68         |         75 76 77 78 79 |
	// |                69 52   |   57 74                |
	// |                 70 53  |  56 73                 |
	// |                  71 54 | 55 72                  |
	// |------------------------|------------------------|
	//

	combos {
		compatible = "zmk,combos";
/*<combos-start>*/

        GH { timeout-ms = <10>; key-positions = <24 25>;
            bindings = <&GH_delegate 0 0>; 
        };

        HC { timeout-ms = <10>; key-positions = <25 26>;
            bindings = <&HC_delegate 0 0>; 
        };

        GC { timeout-ms = <10>; key-positions = <24 26>;
            bindings = <&kp HASH>; 
        };

        GI { timeout-ms = <10>; key-positions = <24 37>;
            bindings = <&GI_delegate 0 0>; 
        };

        HA { timeout-ms = <10>; key-positions = <25 36>;
            bindings = <&HA_delegate 0 0>; 
        };

        HN { timeout-ms = <10>; key-positions = <25 38>;
            bindings = <&kp MINUS>; 
        };

        CI { timeout-ms = <10>; key-positions = <26 37>;
            bindings = <&equal_equal>; 
        };

        AI { timeout-ms = <10>; key-positions = <36 37>;
            bindings = <&AI_delegate 0 0>; 
        };

        IN { timeout-ms = <10>; key-positions = <37 38>;
            bindings = <&kp PERIOD>; 
        };

        AN { timeout-ms = <10>; key-positions = <36 38>;
            bindings = <&kp EXCLAMATION>; 
        };

        AU { timeout-ms = <10>; key-positions = <36 49>;
            bindings = <&kp PLUS>; 
        };

        IF { timeout-ms = <10>; key-positions = <37 48>;
            bindings = <&exc_equal>; 
        };

        IP { timeout-ms = <10>; key-positions = <37 50>;
            bindings = <&kp EQUAL>; 
        };

        NU { timeout-ms = <10>; key-positions = <38 49>;
            bindings = <&kp ASTERISK>; 
        };

        FU { timeout-ms = <10>; key-positions = <48 49>;
            bindings = <&FU_delegate>; 
        };

        PU { timeout-ms = <10>; key-positions = <50 49>;
            bindings = <&PU_delegate>; 
        };

        FP { timeout-ms = <10>; key-positions = <48 50>;
            bindings = <&kp UNDERSCORE>; 
        };

        VL { timeout-ms = <10>; key-positions = <29 30>;
            bindings = <&kp SINGLE_QUOTE>; 
        };

        LB { timeout-ms = <10>; key-positions = <30 31>;
            bindings = <&kp DOUBLE_QUOTES>; 
        };

        VB { timeout-ms = <10>; key-positions = <29 31>;
            bindings = <&kp TILDE>; 
        };

        VR { timeout-ms = <10>; key-positions = <29 42>;
            bindings = <&kp CARET>; 
        };

        TL { timeout-ms = <10>; key-positions = <41 30>;
            bindings = <&TL_delegate 0 0>; 
        };

        BR { timeout-ms = <10>; key-positions = <31 42>;
            bindings = <&kp DOLLAR>; 
        };

        TR { timeout-ms = <10>; key-positions = <41 42>;
            bindings = <&TR_delegate 0 0>; 
        };

        RE { timeout-ms = <10>; key-positions = <42 43>;
            bindings = <&RE_delegate 0 0>; 
        };

        TE { timeout-ms = <10>; key-positions = <41 43>;
            bindings = <&kp QUESTION>; 
        };

        RM { timeout-ms = <10>; key-positions = <42 59>;
            bindings = <&minus_gre_tha>; 
        };

        RY { timeout-ms = <10>; key-positions = <42 61>;
            bindings = <&kp AT_SIGN>; 
        };

        MD { timeout-ms = <10>; key-positions = <59 60>;
            bindings = <&MD_delegate>; 
        };

        DY { timeout-ms = <10>; key-positions = <60 61>;
            bindings = <&DY_delegate>; 
        };
/*<combos-end>*/

};

};

/* Automatically generated macro definitions */

/ {
	macros {
	};
};

/* Automatically generated keymap */

/ {


behaviors {};

behaviors {};
keymap {
		compatible = "zmk,keymap";
    main {
    			bindings = <
&kp F1             &kp F2           &kp F3     &kp F4  &kp F5                                                                                               &kp F6       &kp F7       &kp F8       &kp F9      &kp F10
&kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &G3_key  &K_key     &C5_key     &CS_key                                                                       &kp LG(F11)  &kp LG(F12)  &key_repeat  &key_repeat  &none       &none
&kp C_MUTE         &GG_key        &G_key       &H_key     &C_key     &W_key                                                                           &none        &V_key       &L_key       &B_key       &kp DOLLAR  &none
&kp LEFT_WIN       &O_key           &A_key       &I_key     &N_key     &kp ESCAPE                                                                         &kp DELETE        &T_key       &R_key       &E_key       &S_key      &kp RMETA
&mo 5              &J_key           &F_key       &U_key     &P_key     &none   &kp BACKSPACE  &mo 3  &magic 9 0    &magic 9 0  &tog 3  &kp DELETE  &none  &M_key       &D_key       &Y_key       &X_key      &none
&reloadkeymap      &kp AT           &Q_key       &kp TAB    &kp ENTER               &kp SPACE      &sl 2  &none         &tog 1      &tog 8  &sl 1                    &kp ENTER    &kp TAB      &Z_key       &kp TILDE   &none
>;};

		main_upper {
			bindings = <
&trans  &trans     &trans     &trans     &trans                                                                              &trans     &trans     &trans     &trans     &trans
&trans  &trans     &trans     &kp LS(K)  &trans     &trans                                                           &trans  &trans     &trans     &trans     &trans     &trans
&trans  &trans     &kp LS(G)  &kp LS(H)  &kp LS(C)  &kp LS(W)                                                        &trans  &kp LS(V)  &kp LS(L)  &kp LS(B)  &trans     &trans
&trans  &kp LS(O)  &kp LS(A)  &kp LS(I)  &kp LS(N)  &trans                                                           &trans  &kp LS(T)  &kp LS(R)  &kp LS(E)  &kp LS(S)  &trans
&trans  &kp LS(J)  &kp LS(F)  &kp LS(U)  &kp LS(P)  &trans     &trans  &trans      &trans    &trans  &trans  &trans  &trans  &kp LS(M)  &kp LS(D)  &kp LS(Y)  &kp LS(X)  &trans
&tog 1  &trans     &kp LS(Q)  &trans     &trans                &trans  &caps_word  &trans    &trans  &trans  &tog 1          &trans     &trans     &kp LS(Z)  &trans     &tog 1
>;};
de {
         bindings = <
&trans  &trans   &trans   &trans   &trans                                                                       &trans  &trans  &trans  &trans   &trans
&trans  &trans   &trans   &trans   &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans   &trans
&trans  &trans   &trans   &trans   &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans   &trans
&trans  &OE_key  &AE_key  &trans   &trans  &trans                                                       &trans  &trans  &trans  &trans  &SS_key  &trans
&trans  &trans   &trans   &UE_key  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans   &trans
&to 2   &trans   &trans   &trans   &trans          &trans  &trans  &trans    &trans  &trans  &sk LSHFT          &trans  &trans  &trans  &trans   &to 2
>;};
num {
         bindings = <
&trans  &trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9                                                                    &trans           &trans                &trans                           &trans   &trans
&trans  &trans           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans                                                    &trans  &trans           &trans                &trans                           &trans   &trans
&trans  &trans           &kp N7           &kp N8           &kp N9           &trans                                                    &trans  &kp PERCENT      &kp ASTERISK          &kp SLASH                        &none    &trans
&trans  &kp NUMBER_0     &kp N4           &kp N5           &kp N6           &trans                                                    &trans  &hmr LCTRL LPAR  &hmr LSHIFT KP_EQUAL  &hmr LEFT_ALT RIGHT_PARENTHESIS  &kp DOT  &trans
&trans  &kp KP_NUMBER_0  &kp N1           &kp N2           &kp NUMBER_3     &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp PLUS         &kp MINUS             &kp COMMA                        &trans   &trans
&to 3   &trans           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3          &trans  &trans  &trans    &trans  &trans  &trans          &trans           &trans                &trans                           &trans   &to 3
>;};
nav {
			bindings = <
&trans  &trans          &trans                &trans          &trans                                                                                            &trans     &trans           &trans  &trans  &trans
&trans  &trans          &trans                &kp BACKSPACE   &kp DELETE       &trans                                                                   &trans  &trans     &trans           &trans  &trans  &trans
&trans  &trans          &none                 &masked_home    &masked_end      &trans                                                                   &trans  &kp LCTRL  &kp RIGHT_SHIFT  &none   &none   &trans
&trans  &kp LEFT_SHIFT  &move_selection_left  &kp LEFT_ARROW  &kp RIGHT_ARROW  &move_selection_right                                                    &trans  &kp RCTRL  &kp LEFT_SHIFT   &none   &none   &trans
&trans  &kp LCTRL       &none                 &kp UP_ARROW    &kp DOWN         &trans                 &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp LCTRL  &kp RIGHT_SHIFT  &none   &none   &trans
&tog 4  &trans          &trans                &kp PG_UP       &kp PAGE_DOWN                           &trans  &trans  &trans    &trans  &trans  &trans          &none      &none            &none   &trans  &to 4
>;};
fun {
			bindings = <
&trans  &trans  &trans     &trans     &trans                                                                                                         &trans     &trans     &trans         &trans  &trans
&trans  &trans  &trans     &trans     &trans  &trans                                                                                         &trans  &kp F10    &kp F11    &kp F12        &trans  &trans
&none   &none   &kp LC(Y)  &kp LC(Z)  &none   &none                                                                                          &trans  &kp F7     &kp F8     &kp F9         &trans  &trans
&none   &none   &kp LC(X)  &kp LC(V)  &none   &none                                                                                          &trans  &kp LCTRL  &kp RSHFT  &kp RIGHT_ALT  &trans  &trans
&trans  &none   &kp LC(C)  &kp LC(S)  &none   &none   &kp LC(LA(DELETE))  &kp LG(LC(LS(A)))  &kp LG(LS(LC(Q)))    &trans  &trans  &kp LG(X)  &trans  &kp F1     &kp F2     &kp F3         &none   &trans
&trans  &none   &kp LC(F)  &kp LC(A)  &none           &kp F9              &kp LS(F6)         &none                &none   &none   &kp LG(B)          &kp F4     &kp F5     &kp F6         &none   &none
>;
		};
switcher {
         bindings = <
&trans  &trans  &trans           &trans  &trans                                                                        &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F4           &trans  &kp ESCAPE  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(TAB)      &none   &kp TAB     &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F4  &kp AT  &trans  &kp GRAVE   &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans           &trans  &trans      &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans           &trans  &trans              &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
qwerty {
         bindings = <
&kp F1     &kp F2    &kp F3   &kp F4    &kp F5                                                                                       &kp F6  &kp F7     &kp F8    &kp F9    &kp F10
&kp EQUAL  &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                    &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q     &kp W    &kp E     &kp R      &kp T                                                                     &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC    &kp A     &kp S    &kp D     &kp F      &kp G                                                                     &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp APOS
&kp GRAVE  &kp Z     &kp X    &kp C     &kp V      &kp B   &kp LSHFT  &kp LCTRL  &trans      &trans    &kp LCTRL  &kp LSHFT  &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp PG_UP
&trans     &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp SPACE  &kp ENTER  &kp LALT    &kp RALT  &kp DEL    &kp BSPC           &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp PG_DN
>;};
mouse {
         bindings = <
&trans  &trans  &trans  &trans   &trans                                                                     &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans   &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F17  &kp F18  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F13  &kp F14  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F15  &kp F16  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp F19  &kp F20          &trans  &trans  &trans    &trans  &tog 8  &trans          &trans  &trans  &trans  &trans  &trans
>;};
magic {
			bindings = <
&trans      &trans           &trans           &trans           &trans                                                                                                  &trans  &trans  &trans  &trans  &trans
&to 0       &to 0            &to 2            &to 4            &to 3            &to 5                                                                           &to 6  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                 &none  &none   &none   &none   &none   &none
&none       &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                 &none  &none   &none   &none   &none   &none
&sys_reset  &none            &none            &none            &none            &none            &bt_2  &bootloader  &none           &none  &bootloader  &none  &none  &none   &none   &none   &none   &sys_reset
&none       &none            &none            &none            &bt BT_CLR                        &bt_0  &bt_1        &out OUT_USB    &none  &none        &none         &none   &none   &none   &none   &bt BT_CLR_ALL
>;
		};
	};
};
